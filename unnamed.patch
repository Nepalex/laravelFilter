Index: laravel58/database/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/.gitignore	(date 1591080725306)
+++ laravel58/database/.gitignore	(date 1591080725306)
@@ -0,0 +1,1 @@
+*.sqlite
Index: laravel58/database/seeds/DatabaseSeeder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/seeds/DatabaseSeeder.php	(date 1591186960472)
+++ laravel58/database/seeds/DatabaseSeeder.php	(date 1591186960472)
@@ -0,0 +1,20 @@
+<?php
+
+use Illuminate\Database\Seeder;
+
+class DatabaseSeeder extends Seeder
+{
+    /**
+     * Seed the application's database.
+     *
+     * @return void
+     */
+    public function run()
+    {
+        // $this->call(UsersTableSeeder::class);
+        $this->call(UsersTableSeeder::class);
+        $this->call(BlogCategoriesTableSeeder::class);
+        $this->call(factory(App\Models\BlogPost::class, 100)->create());
+
+    }
+}
Index: laravel58/database/factories/UserFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/factories/UserFactory.php	(date 1591184503116)
+++ laravel58/database/factories/UserFactory.php	(date 1591184503116)
@@ -0,0 +1,25 @@
+<?php
+
+use Illuminate\Support\Str;
+use Faker\Generator as Faker;
+
+/*
+|--------------------------------------------------------------------------
+| Model Factories
+|--------------------------------------------------------------------------
+|
+| This directory should contain each of the model factory definitions for
+| your application. Factories provide a convenient way to generate new
+| model instances for testing / seeding your application's database.
+|
+*/
+
+$factory->define(App\Models\User::class, function (Faker $faker) {
+    return [
+        'name' => $faker->name,
+        'email' => $faker->unique()->safeEmail,
+        'email_verified_at' => now(),
+        'password' => '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret
+        'remember_token' => Str::random(10),
+    ];
+});
Index: laravel58/database/migrations/2014_10_12_000000_create_users_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/migrations/2014_10_12_000000_create_users_table.php	(date 1592585440760)
+++ laravel58/database/migrations/2014_10_12_000000_create_users_table.php	(date 1592585440760)
@@ -0,0 +1,36 @@
+<?php
+
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Database\Migrations\Migration;
+
+class CreateUsersTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('users', function (Blueprint $table) {
+            $table->bigIncrements('id');
+            $table->string('name');
+            $table->string('email')->unique();
+            $table->timestamp('email_verified_at')->nullable();
+            $table->string('password');
+            $table->rememberToken();
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('users');
+    }
+}
Index: laravel58/database/migrations/2014_10_12_100000_create_password_resets_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/migrations/2014_10_12_100000_create_password_resets_table.php	(date 1591080725309)
+++ laravel58/database/migrations/2014_10_12_100000_create_password_resets_table.php	(date 1591080725309)
@@ -0,0 +1,32 @@
+<?php
+
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Database\Migrations\Migration;
+
+class CreatePasswordResetsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('password_resets', function (Blueprint $table) {
+            $table->string('email')->index();
+            $table->string('token');
+            $table->timestamp('created_at')->nullable();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('password_resets');
+    }
+}
Index: laravel58/routes/api.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/routes/api.php	(date 1591080725329)
+++ laravel58/routes/api.php	(date 1591080725329)
@@ -0,0 +1,18 @@
+<?php
+
+use Illuminate\Http\Request;
+
+/*
+|--------------------------------------------------------------------------
+| API Routes
+|--------------------------------------------------------------------------
+|
+| Here is where you can register API routes for your application. These
+| routes are loaded by the RouteServiceProvider within a group which
+| is assigned the "api" middleware group. Enjoy building your API!
+|
+*/
+
+Route::middleware('auth:api')->get('/user', function (Request $request) {
+    return $request->user();
+});
Index: laravel58/routes/channels.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/routes/channels.php	(date 1591080725330)
+++ laravel58/routes/channels.php	(date 1591080725330)
@@ -0,0 +1,16 @@
+<?php
+
+/*
+|--------------------------------------------------------------------------
+| Broadcast Channels
+|--------------------------------------------------------------------------
+|
+| Here you may register all of the event broadcasting channels that your
+| application supports. The given channel authorization callbacks are
+| used to check if an authenticated user can listen to the channel.
+|
+*/
+
+Broadcast::channel('App.User.{id}', function ($user, $id) {
+    return (int) $user->id === (int) $id;
+});
Index: laravel58/routes/console.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/routes/console.php	(date 1591080725330)
+++ laravel58/routes/console.php	(date 1591080725330)
@@ -0,0 +1,18 @@
+<?php
+
+use Illuminate\Foundation\Inspiring;
+
+/*
+|--------------------------------------------------------------------------
+| Console Routes
+|--------------------------------------------------------------------------
+|
+| This file is where you may define all of your Closure based console
+| commands. Each Closure is bound to a command instance allowing a
+| simple approach to interacting with each command's IO methods.
+|
+*/
+
+Artisan::command('inspire', function () {
+    $this->comment(Inspiring::quote());
+})->describe('Display an inspiring quote');
Index: laravel58/routes/web.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/routes/web.php	(date 1593597418041)
+++ laravel58/routes/web.php	(date 1593597418041)
@@ -0,0 +1,62 @@
+<?php
+
+/*
+|--------------------------------------------------------------------------
+| Web Routes
+|--------------------------------------------------------------------------
+|
+| Here is where you can register web routes for your application. These
+| routes are loaded by the RouteServiceProvider within a group which
+| contains the "web" middleware group. Now create something great!
+|
+*/
+
+Route::get('/', function () {
+    return view('welcome');
+});
+
+Auth::routes();
+
+Route::get('/home', 'HomeController@index')->name('home');
+
+Route::group(['prefix' => 'digging_deeper'], function (){
+    Route::get('collection','DiggingDeeperController@collections')
+        ->name('digging_deeper.collections');
+
+    Route::get('prepare-catalog','DiggingDeeperController@prepareCatalog')
+        ->name('digging_deeper.prepareCatalog');
+});
+
+Route::group(['namespace' => 'Blog', 'prefix' => 'blog'], function(){
+    //Route::resource('posts', 'PostController')->names('blog.posts');
+     Route::resource('posts', 'PostController')->names('blog.posts');
+
+});
+
+//Route::resource('rest', 'RestTestController')->names('restTest');
+
+//> Админка блога
+
+$groupData = [
+    'namespace' => 'Blog\Admin',
+    'prefix' => 'admin/blog',
+];
+
+Route::group($groupData, function (){
+    //BlogCategory
+    $methods = ['index', 'edit', 'update', 'create', 'store',];
+    Route::resource('categories', 'CategoryController' )
+        ->only($methods)
+        ->names('blog.admin.categories');
+
+    //BlogPost
+    Route::resource('posts','PostController')
+        ->except(['show'])
+        ->names('blog.admin.posts');
+
+});
+//<
+
+Auth::routes();
+
+Route::get('/home', 'HomeController@index')->name('home');
Index: laravel58/public/.htaccess
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/.htaccess	(date 1592582522773)
+++ laravel58/public/.htaccess	(date 1592582522773)
@@ -0,0 +1,21 @@
+<IfModule mod_rewrite.c>
+    <IfModule mod_negotiation.c>
+        Options -MultiViews -Indexes
+    </IfModule>
+
+    RewriteEngine On
+
+    # Handle Authorization Header
+    RewriteCond %{HTTP:Authorization} .
+    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
+
+    # Redirect Trailing Slashes If Not A Folder...
+    RewriteCond %{REQUEST_FILENAME} !-d
+    RewriteCond %{REQUEST_URI} (.+)/$
+    RewriteRule ^ %1 [L,R=301]
+
+    # Handle Front Controller...
+    RewriteCond %{REQUEST_FILENAME} !-d
+    RewriteCond %{REQUEST_FILENAME} !-f
+    RewriteRule ^ index.php [L]
+</IfModule>
Index: laravel58/public/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/index.php	(date 1592582522775)
+++ laravel58/public/index.php	(date 1592582522775)
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * Laravel - A PHP Framework For Web Artisans
+ *
+ * @package  Laravel
+ * @author   Taylor Otwell <taylor@laravel.com>
+ */
+
+define('LARAVEL_START', microtime(true));
+
+/*
+|--------------------------------------------------------------------------
+| Register The Auto Loader
+|--------------------------------------------------------------------------
+|
+| Composer provides a convenient, automatically generated class loader for
+| our application. We just need to utilize it! We'll simply require it
+| into the script here so that we don't have to worry about manual
+| loading any of our classes later on. It feels great to relax.
+|
+*/
+
+require __DIR__.'/../vendor/autoload.php';
+
+/*
+|--------------------------------------------------------------------------
+| Turn On The Lights
+|--------------------------------------------------------------------------
+|
+| We need to illuminate PHP development, so let us turn on the lights.
+| This bootstraps the framework and gets it ready for use, then it
+| will load up this application so that we can run it and send
+| the responses back to the browser and delight our users.
+|
+*/
+
+$app = require_once __DIR__.'/../bootstrap/app.php';
+
+/*
+|--------------------------------------------------------------------------
+| Run The Application
+|--------------------------------------------------------------------------
+|
+| Once we have the application, we can handle the incoming request
+| through the kernel, and send the associated response back to
+| the client's browser allowing them to enjoy the creative
+| and wonderful application we have prepared for them.
+|
+*/
+
+$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
+
+$response = $kernel->handle(
+    $request = Illuminate\Http\Request::capture()
+);
+
+$response->send();
+
+$kernel->terminate($request, $response);
Index: laravel58/public/robots.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/robots.txt	(date 1592582522779)
+++ laravel58/public/robots.txt	(date 1592582522779)
@@ -0,0 +1,2 @@
+User-agent: *
+Disallow:
Index: laravel58/public/web.config
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/web.config	(date 1592582522780)
+++ laravel58/public/web.config	(date 1592582522780)
@@ -0,0 +1,28 @@
+<!--
+    Rewrites requires Microsoft URL Rewrite Module for IIS
+    Download: https://www.microsoft.com/en-us/download/details.aspx?id=47337
+    Debug Help: https://docs.microsoft.com/en-us/iis/extensions/url-rewrite-module/using-failed-request-tracing-to-trace-rewrite-rules
+-->
+<configuration>
+  <system.webServer>
+    <rewrite>
+      <rules>
+        <rule name="Imported Rule 1" stopProcessing="true">
+          <match url="^(.*)/$" ignoreCase="false" />
+          <conditions>
+            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" negate="true" />
+          </conditions>
+          <action type="Redirect" redirectType="Permanent" url="/{R:1}" />
+        </rule>
+        <rule name="Imported Rule 2" stopProcessing="true">
+          <match url="^" ignoreCase="false" />
+          <conditions>
+            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" negate="true" />
+            <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" negate="true" />
+          </conditions>
+          <action type="Rewrite" url="index.php" />
+        </rule>
+      </rules>
+    </rewrite>
+  </system.webServer>
+</configuration>
Index: laravel58/public/js/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/js/app.js	(date 1592582522778)
+++ laravel58/public/js/app.js	(date 1592582522778)
@@ -0,0 +1,1 @@
+!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=11)}([function(e,t,n){"use strict";var r=n(5),i=n(19),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(t){var r=n(0),i=n(21),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=n(7):void 0!==t&&(s=n(7)),s),transformRequest:[function(e,t){return i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(o)}),e.exports=u}).call(this,n(6))},function(e,t,n){"use strict";n.r(t),function(e){for(var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:l(c(e))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?f:10===e?p:f||p}function h(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function v(e){return null!==e.parentNode?v(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,u=o.commonAncestorContainer;if(e!==u&&t!==u||r.contains(i))return"BODY"===(s=(a=u).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(u):u;var c=v(e);return c.host?g(c.host,t):g(e,v(t).host)}function m(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function _(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function b(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:_("Height",t,n,r),width:_("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},T=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return x({},e,{right:e.left+e.width,bottom:e.top+e.height})}function A(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?b(e.ownerDocument):{},a=o.width||e.clientWidth||i.right-i.left,s=o.height||e.clientHeight||i.bottom-i.top,c=e.offsetWidth-a,l=e.offsetHeight-s;if(c||l){var f=u(e);c-=y(f,"x"),l-=y(f,"y"),i.width-=c,i.height-=l}return C(i)}function S(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===t.nodeName,o=A(e),a=A(t),s=l(e),c=u(t),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=C({top:o.top-a.top-f,left:o.left-a.left-p,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var v=parseFloat(c.marginTop,10),g=parseFloat(c.marginLeft,10);h.top-=f-v,h.bottom-=f-v,h.left-=p-g,h.right-=p-g,h.marginTop=v,h.marginLeft=g}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),i=m(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(h,t)),h}function O(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function D(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?O(e):g(e,t);if("viewport"===r)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=S(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:m(n),s=t?0:m(n,"left");return C({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(a,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=l(c(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var f=S(s,a,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===u(t,"position")||e(c(t)))}(a))o=f;else{var p=b(e.ownerDocument),d=p.height,h=p.width;o.top+=f.top-f.marginTop,o.bottom=d+f.top,o.left+=f.left-f.marginLeft,o.right=h+f.left}}var v="number"==typeof(n=n||0);return o.left+=v?n:n.left||0,o.top+=v?n:n.top||0,o.right-=v?n:n.right||0,o.bottom-=v?n:n.bottom||0,o}function I(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=D(n,r,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(s).map(function(e){return x({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),l=c.length>0?c[0].key:u[0].key,f=e.split("-")[1];return l+(f?"-"+f:"")}function k(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?O(t):g(t,n),r)}function N(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function L(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function j(e,t,n){n=n.split("-")[0];var r=N(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",u=o?"height":"width",c=o?"width":"height";return i[a]=t[a]+t[u]/2-r[u]/2,i[s]=n===s?t[s]-r[c]:t[L(s)],i}function P(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=P(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))}),t}function $(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function M(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,M(e).addEventListener("resize",n.updateBound,{passive:!0});var i=l(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(l(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function W(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,M(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function B(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(t[n])&&(r="px"),e.style[n]=t[n]+r})}var U=n&&/Firefox/i.test(navigator.userAgent);function V(e,t,n){var r=P(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],K=z.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=K.indexOf(e),r=K.slice(n+1).concat(K.slice(0,n));return t?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Q(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(P(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(u)[0]]),[a[s].split(u)[1]].concat(a.slice(s+1))]:[a];return(c=c.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return C(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var Y={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",c=s?"width":"height",l={start:E({},u,o[u]),end:E({},u,o[u]+o[c]-a[c])};e.offsets.popper=x({},a,l[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],u=void 0;return u=q(+n)?[+n,0]:Q(n,o,a,s),"left"===s?(o.top+=u[0],o.left-=u[1]):"right"===s?(o.top+=u[0],o.left+=u[1]):"top"===s?(o.left+=u[0],o.top-=u[1]):"bottom"===s&&(o.left+=u[0],o.top+=u[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var u=D(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=s,t.boundaries=u;var c=t.priority,l=e.offsets.popper,f={primary:function(e){var n=l[e];return l[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(l[e],u[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=l[n];return l[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(l[n],u[e]-("right"===e?l.width:l.height))),E({},n,r)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";l=x({},l,f[t](e))}),e.offsets.popper=l,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",u=a?"left":"top",c=a?"width":"height";return n[s]<o(r[u])&&(e.offsets.popper[u]=o(r[u])-n[c]),n[u]>o(r[s])&&(e.offsets.popper[u]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,c=-1!==["left","right"].indexOf(i),l=c?"height":"width",f=c?"Top":"Left",p=f.toLowerCase(),d=c?"left":"top",h=c?"bottom":"right",v=N(r)[l];s[h]-v<a[p]&&(e.offsets.popper[p]-=a[p]-(s[h]-v)),s[p]+v>a[h]&&(e.offsets.popper[p]+=s[p]+v-a[h]),e.offsets.popper=C(e.offsets.popper);var g=s[p]+s[l]/2-v/2,m=u(e.instance.popper),y=parseFloat(m["margin"+f],10),_=parseFloat(m["border"+f+"Width"],10),b=g-e.offsets.popper[p]-y-_;return b=Math.max(Math.min(a[l]-v,b),0),e.arrowElement=r,e.offsets.arrow=(E(n={},p,Math.round(b)),E(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if($(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=D(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=L(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case X.FLIP:a=[r,i];break;case X.CLOCKWISE:a=G(r);break;case X.COUNTERCLOCKWISE:a=G(r,!0);break;default:a=t.behavior}return a.forEach(function(s,u){if(r!==s||a.length===u+1)return e;r=e.placement.split("-")[0],i=L(r);var c=e.offsets.popper,l=e.offsets.reference,f=Math.floor,p="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),d=f(c.left)<f(n.left),h=f(c.right)>f(n.right),v=f(c.top)<f(n.top),g=f(c.bottom)>f(n.bottom),m="left"===r&&d||"right"===r&&h||"top"===r&&v||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),_=!!t.flipVariations&&(y&&"start"===o&&d||y&&"end"===o&&h||!y&&"start"===o&&v||!y&&"end"===o&&g);(p||m||_)&&(e.flipped=!0,(p||m)&&(r=a[u+1]),_&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=x({},e.offsets.popper,j(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=L(t),e.offsets.popper=C(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=P(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=P(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=h(e.instance.popper),u=A(s),c={position:i.position},l=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=-1!==["left","right"].indexOf(e.placement),a=-1!==e.placement.indexOf("-"),s=i.width%2==r.width%2,u=i.width%2==1&&r.width%2==1,c=function(e){return e},l=t?o||a||s?Math.round:Math.floor:c,f=t?Math.round:c;return{left:l(u&&!a&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:l(r.right)}}(e,window.devicePixelRatio<2||!U),f="bottom"===n?"top":"bottom",p="right"===r?"left":"right",d=H("transform"),v=void 0,g=void 0;if(g="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-u.height+l.bottom:l.top,v="right"===p?"HTML"===s.nodeName?-s.clientWidth+l.right:-u.width+l.right:l.left,a&&d)c[d]="translate3d("+v+"px, "+g+"px, 0)",c[f]=0,c[p]=0,c.willChange="transform";else{var m="bottom"===f?-1:1,y="right"===p?-1:1;c[f]=g*m,c[p]=v*y,c.willChange=f+", "+p}var _={"x-placement":e.placement};return e.attributes=x({},_,e.attributes),e.styles=x({},c,e.styles),e.arrowStyles=x({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return B(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&B(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=k(i,t,e,n.positionFixed),a=I(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),B(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=x({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(x({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=x({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return x({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return T(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=k(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=I(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=j(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,$(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=z,J.Defaults=Y,t.default=J}.call(this,n(1))},function(e,t,n){var r;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,p={},d=p.toString,h=p.hasOwnProperty,v=h.toString,g=v.call(Object),m={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},_=function(e){return null!=e&&e===e.window},b={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,i=(t=t||a).createElement("script");if(i.text=e,n)for(r in b)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[d.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!y(e)&&!_(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(c&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&E.isPlainObject(n)?n:{},a[t]=E.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=s(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&v.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return c.apply([],a)},guid:1,support:m}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var A=function(e){var t,n,r,i,o,a,s,u,c,l,f,p,d,h,v,g,m,y,_,b="sizzle"+1*new Date,w=e.document,T=0,E=0,x=ae(),C=ae(),A=ae(),S=function(e,t){return e===t&&(f=!0),0},O={}.hasOwnProperty,D=[],I=D.pop,k=D.push,N=D.push,L=D.slice,j=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",$="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+R+"*("+$+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+R+"*\\]",M=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",F=new RegExp(R+"+","g"),W=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),q=new RegExp("^"+R+"*,"+R+"*"),B=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),U=new RegExp("="+R+"*([^\\]'\"]*?)"+R+"*\\]","g"),V=new RegExp(M),z=new RegExp("^"+$+"$"),K={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},ie=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{N.apply(D=L.call(w.childNodes),w.childNodes),D[w.childNodes.length].nodeType}catch(e){N={apply:D.length?function(e,t){k.apply(e,L.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,s,c,l,f,h,m,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,v)){if(11!==T&&(f=Y.exec(e)))if(o=f[1]){if(9===T){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(y&&(c=y.getElementById(o))&&_(t,c)&&c.id===o)return r.push(c),r}else{if(f[2])return N.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!A[e+" "]&&(!g||!g.test(e))){if(1!==T)y=t,m=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=b),s=(h=a(e)).length;s--;)h[s]="#"+l+" "+me(h[s]);m=h.join(","),y=J.test(e)&&ve(t.parentNode)||t}if(m)try{return N.apply(r,y.querySelectorAll(m)),r}catch(e){}finally{l===b&&t.removeAttribute("id")}}}return u(e.replace(W,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,v=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],g=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||g.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),m.push("!=",M)}),g=g.length&&new RegExp(g.join("|")),m=m.length&&new RegExp(m.join("|")),t=Q.test(h.compareDocumentPosition),_=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},S=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&_(w,e)?-1:t===d||t.ownerDocument===w&&_(w,t)?1:l?j(l,e)-j(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:l?j(l,e)-j(l,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(U,"='$1']"),n.matchesSelector&&v&&!A[t+" "]&&(!m||!m.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),_(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&O.call(r.attrHandle,t.toLowerCase())?i(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,p,d,h,v=o!==a?"nextSibling":"previousSibling",g=t.parentNode,m=s&&t.nodeName.toLowerCase(),y=!u&&!s,_=!1;if(g){if(o){for(;v;){for(p=t;p=p[v];)if(s?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(_=(d=(c=(l=(f=(p=g)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&c[1])&&c[2],p=d&&g.childNodes[d];p=++d&&p&&p[v]||(_=d=0)||h.pop();)if(1===p.nodeType&&++_&&p===t){l[e]=[T,d,_];break}}else if(y&&(_=d=(c=(l=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&c[1]),!1===_)for(;(p=++d&&p&&p[v]||(_=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++_||(y&&((l=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,_]),p!==t)););return(_-=i)===r||_%r==0&&_/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=j(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(W,"$1"));return r[b]?se(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return z.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=E++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,p=[T,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[b]||(t[b]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===T&&c[1]===s)return p[2]=c[2];if(l[o]=p,p[2]=e(t,n,u))return!0}return!1}}function _e(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function we(e,t,n,r,i,o){return r&&!r[b]&&(r=we(r)),i&&!i[b]&&(i=we(i,o)),se(function(o,a,s,u){var c,l,f,p=[],d=[],h=a.length,v=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!o&&t?v:be(v,p,e,s,u),m=n?i||(o?e:h||r)?[]:a:g;if(n&&n(g,m,s,u),r)for(c=be(m,d),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(m[d[l]]=!(g[d[l]]=f));if(o){if(i||e){if(i){for(c=[],l=m.length;l--;)(f=m[l])&&c.push(g[l]=f);i(null,m=[],c,u)}for(l=m.length;l--;)(f=m[l])&&(c=i?j(o,f):p[l])>-1&&(o[c]=!(a[c]=f))}}else m=be(m===a?m.splice(h,m.length):m),i?i(null,a,m,u):N.apply(a,m)})}function Te(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=ye(function(e){return e===t},s,!0),f=ye(function(e){return j(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[ye(_e(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return we(u>1&&_e(p),u>1&&me(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(W,"$1"),n,u<i&&Te(e.slice(u,i)),i<o&&Te(e=e.slice(i)),i<o&&me(e))}p.push(n)}return _e(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,c,l=C[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=q.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=B.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),s=s.slice(n.length)),r.filter)!(i=K[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):C(e,u).slice(0)},s=oe.compile=function(e,t){var n,i=[],o=[],s=A[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Te(t[n]))[b]?i.push(s):o.push(s);(s=A(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var f,h,g,m=0,y="0",_=o&&[],b=[],w=c,E=o||i&&r.find.TAG("*",l),x=T+=null==w?1:Math.random()||.1,C=E.length;for(l&&(c=a===d||a||l);y!==C&&null!=(f=E[y]);y++){if(i&&f){for(h=0,a||f.ownerDocument===d||(p(f),s=!v);g=e[h++];)if(g(f,a||d,s)){u.push(f);break}l&&(T=x)}n&&((f=!g&&f)&&m--,o&&_.push(f))}if(m+=y,n&&y!==m){for(h=0;g=t[h++];)g(_,b,a,s);if(o){if(m>0)for(;y--;)_[y]||b[y]||(b[y]=I.call(u));b=be(b)}N.apply(u,b),l&&!o&&b.length>0&&m+t.length>1&&oe.uniqueSort(u)}return l&&(T=x,c=w),_};return n?se(o):o}(o,i))).selector=e}return s},u=oe.select=function(e,t,n,i){var o,u,c,l,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=K.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(Z,ee),J.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&me(u)))return N.apply(n,i),n;break}}return(p||s(e,d))(i,t,!v,n,!t||J.test(e)&&ve(t.parentNode)||t),n},n.sortStable=b.split("").sort(S).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);E.find=A,E.expr=A.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=A.uniqueSort,E.text=A.getText,E.isXMLDoc=A.isXML,E.contains=A.contains,E.escapeSelector=A.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=E.expr.match.needsContext;function I(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return y(t)?E.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return f.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&D.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(a);var P=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function $(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&E(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(E(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return $(e,"nextSibling")},prev:function(e){return $(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return I(e,"iframe")?e.contentDocument:(I(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,r){var i=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=E.filter(r,i)),this.length>1&&(R[e]||E.uniqueSort(i),P.test(e)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function M(e){return e}function F(e){throw e}function W(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(H)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){E.each(n,function(n,r){y(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==T(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?E.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?i?c.call(n,a(o,t,M,i),a(o,t,F,i)):(o++,c.call(n,a(o,t,M,i),a(o,t,F,i),a(o,t,M,t.notifyWith))):(r!==M&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(r!==F&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(E.Deferred.getStackHook&&(l.stackTrace=E.Deferred.getStackHook()),n.setTimeout(l))}}return E.Deferred(function(n){t[0][3].add(a(0,n,y(i)?i:M,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:M)),t[2][3].add(a(0,n,y(r)?r:F))}).promise()},promise:function(e){return null!=e?E.extend(e,i):i}},o={};return E.each(t,function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=u.call(arguments),o=E.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)W(i[n],a(n),o.reject);return o.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&q.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var B=E.Deferred();function U(){a.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),E.ready()}E.fn.ready=function(e){return B.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||B.resolveWith(a,[E]))}}),E.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(E.ready):(a.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var V=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===T(n))for(s in i=!0,n)V(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},z=/^-ms-/,K=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function X(e){return e.replace(z,"ms-").replace(K,G)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=E.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[X(t)]=n;else for(r in t)i[X(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new Y,Z=new Y,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=X(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Z.set(this,e)}):V(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&E.contains(e.ownerDocument,e)&&"none"===E.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,"")},u=s(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),l=(E.cssNumber[t]||"px"!==c&&+u)&&ie.exec(E.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)E.style(e,t,l+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),l/=o;l*=2,E.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var ce={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=ce[r];return i||(t=n.body.appendChild(n.createElement(r)),i=E.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ce[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}E.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&I(e,t)?E.merge([e],n):n}function me(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var ye,_e,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===T(o))E.merge(p,o.nodeType?[o]:o);else if(be.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ve[s]||ve._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;E.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&E.inArray(o,r)>-1)i&&i.push(o);else if(c=E.contains(o.ownerDocument,o),a=ge(f.appendChild(o),"script"),c&&me(a),n)for(l=0;o=a[l++];)he.test(o.type||"")&&n.push(o);return f}ye=a.createDocumentFragment().appendChild(a.createElement("div")),(_e=a.createElement("input")).setAttribute("type","radio"),_e.setAttribute("checked","checked"),_e.setAttribute("name","t"),ye.appendChild(_e),m.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Te=a.documentElement,Ee=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Se(){return!1}function Oe(){try{return a.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}E.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,v,g=J.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(Te,i),n.guid||(n.guid=E.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)d=v=(s=Ce.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=E.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=E.event.special[d]||{},l=E.extend({type:d,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),E.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,v,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(d=v=(s=Ce.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d){for(f=E.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||E.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)E.event.remove(e,d+t[c],n,r,!0);E.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=E.event.fix(e),u=new Array(arguments.length),c=(J.get(this,"events")||{})[s.type]||[],l=E.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,s)){for(a=E.event.handlers.call(this,s,c),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?E(i,this).index(c)>-1:E.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Oe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Oe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&I(this,"input"))return this.click(),!1},_default:function(e){return I(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||E.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){E.event.remove(this,e,n,t)})}});var Ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return I(e,"table")&&I(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var n,r,i,o,a,s,u,c;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),c=o.events))for(i in delete a.handle,a.events={},c)for(n=0,r=c[i].length;n<r;n++)E.event.add(t,i,c[i][n]);Z.hasData(e)&&(s=Z.access(e),u=E.extend({},s),Z.set(t,u))}}function He(e,t,n,r){t=c.apply([],t);var i,o,a,s,u,l,f=0,p=e.length,d=p-1,h=t[0],v=y(h);if(v||p>1&&"string"==typeof h&&!m.checkClone&&Ne.test(h))return e.each(function(i){var o=e.eq(i);v&&(t[0]=h.call(this,i,o.html())),He(o,t,n,r)});if(p&&(o=(i=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=E.map(ge(i,"script"),Pe)).length;f<p;f++)u=i,f!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,"script"))),n.call(e[f],u,f);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Re),f=0;f<s;f++)u=a[f],he.test(u.type||"")&&!J.access(u,"globalEval")&&E.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(u.src):w(u.textContent.replace(Le,""),l,u))}return e}function Me(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&E.contains(r.ownerDocument,r)&&me(ge(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e.replace(Ie,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,c,l=e.cloneNode(!0),f=E.contains(e.ownerDocument,e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(l),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],c=void 0,"input"===(c=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(l),r=0,i=o.length;r<i;r++)$e(o[r],a[r]);else $e(e,l);return(a=ge(l,"script")).length>0&&me(a,!f&&ge(e,"script")),l},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return V(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!ve[(de.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,r=[],i=E(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),E(i[a])[t](n),l.apply(r,n.get());return this.pushStack(r)}});var Fe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},qe=new RegExp(oe.join("|"),"i");function Be(e,t,n){var r,i,o,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||E.contains(e.ownerDocument,e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Fe.test(a)&&qe.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",s=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",Te.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,s,u,c=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,ze=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","Moz","ms"],Qe=a.createElement("div").style;function Ye(e){var t=E.cssProps[e];return t||(t=E.cssProps[e]=function(e){if(e in Qe)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Qe)return e}(e)||e),t}function Je(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=E.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=E.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=E.css(e,"border"+oe[a]+"Width",!0,i))):(u+=E.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=E.css(e,"border"+oe[a]+"Width",!0,i):s+=E.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=We(e),i=Be(e,t,r),o="border-box"===E.css(e,"boxSizing",!1,r),a=o;if(Fe.test(i)){if(!n)return i;i="auto"}return a=a&&(m.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===E.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=X(t),u=ze.test(t),c=e.style;if(u||(t=Ye(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(E.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=X(t);return ze.test(t)||(t=Ye(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Be(e,t,r)),"normal"===i&&t in Ge&&(i=Ge[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!Ve.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ke,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=We(e),a="border-box"===E.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&m.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),Je(0,n,s)}}}),E.cssHooks.marginLeft=Ue(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(E.cssHooks[e+t].set=Je)}),E.fn.extend({css:function(e,t){return V(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=We(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[E.cssProps[e.prop]]&&!E.cssHooks[e.prop]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=tt.prototype.init,E.fx.step={};var nt,rt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){rt&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,E.fx.interval),E.fx.tick())}function st(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,s=E.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=X(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=E.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=lt.prefilters[o].call(c,e,l,c.opts))return y(r.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return E.map(l,ct,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(H);for(var n,r=0,i=e.length;r<i;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,p=this,d={},h=e.style,v=e.nodeType&&ae(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}d[r]=g&&g[r]||E.style(e,r)}if((u=!E.isEmptyObject(t))||!E.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=J.get(e,"display")),"none"===(l=E.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=E.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===E.css(e,"float")&&(u||(p.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(g?"hidden"in g&&(v=g.hidden):g=J.access(e,"fxshow",{display:c}),o&&(g.hidden=!v),v&&fe([e],!0),p.done(function(){for(r in v||fe([e]),J.remove(e,"fxshow"),d)E.style(e,r,d[r])})),u=ct(v?g[r]:0,r,p),r in g||(g[r]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=E.isEmptyObject(e),o=E.speed(t,n,r),a=function(){var t=lt(this,E.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=E.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=E.timers,a=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),E.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),nt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){rt||(rt=!0,at())},E.fx.stop=function(){rt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,pt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return V(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&I(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||E.find.attr;pt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=pt[a],pt[a]=i,i=null!=n(e,t,r)?a:null,pt[a]=o),i}});var dt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function vt(e){return(e.match(H)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return V(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(y(e))return this.each(function(t){E(this).addClass(e.call(this,t,gt(this)))});if((t=mt(e)).length)for(;n=this[u++];)if(i=gt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(y(e))return this.each(function(t){E(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=mt(e)).length)for(;n=this[u++];)if(i=gt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=E(this),a=mt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;E.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,E(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=E.map(i,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=E.valHooks[i.type]||E.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(yt,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:vt(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!I(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=E.makeArray(t),a=i.length;a--;)((r=i[a]).selected=E.inArray(E.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in n;var _t=/^(?:focusinfocus|focusoutblur)$/,bt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,i){var o,s,u,c,l,f,p,d,v=[r||a],g=h.call(e,"type")?e.type:e,m=h.call(e,"namespace")?e.namespace.split("."):[];if(s=d=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!_t.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),l=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),p=E.event.special[g]||{},i||!p.trigger||!1!==p.trigger.apply(r,t))){if(!i&&!p.noBubble&&!_(r)){for(c=p.delegateType||g,_t.test(c+g)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(r.ownerDocument||a)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(s=v[o++])&&!e.isPropagationStopped();)d=s,e.type=o>1?c:p.bindType||g,(f=(J.get(s,"events")||{})[e.type]&&J.get(s,"handle"))&&f.apply(s,t),(f=l&&s[l])&&f.apply&&Q(s)&&(e.result=f.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(v.pop(),t)||!Q(r)||l&&y(r[g])&&!_(r)&&((u=r[l])&&(r[l]=null),E.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,bt),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,bt),E.event.triggered=void 0,u&&(r[l]=u)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var wt=n.location,Tt=Date.now(),Et=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var xt=/\[\]$/,Ct=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function Ot(e,t,n,r){var i;if(Array.isArray(t))E.each(t,function(t,i){n||xt.test(e)?r(e,i):Ot(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==T(t))r(e,t);else for(i in t)Ot(e+"["+i+"]",t[i],n,r)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)Ot(n,e[n],t,i);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&St.test(this.nodeName)&&!At.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var Dt=/%20/g,It=/#.*$/,kt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,jt=/^\/\//,Pt={},Rt={},$t="*/".concat("*"),Ht=a.createElement("a");function Mt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(H)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var i={},o=e===Rt;function a(s){var u;return i[s]=!0,E.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Ht.href=wt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,E.ajaxSettings),t):Wt(E.ajaxSettings,e)},ajaxPrefilter:Mt(Pt),ajaxTransport:Mt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,u,c,l,f,p,d,h=E.ajaxSetup({},t),v=h.context||h,g=h.context&&(v.nodeType||v.jquery)?E(v):E.event,m=E.Deferred(),y=E.Callbacks("once memory"),_=h.statusCode||{},b={},w={},T="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Nt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==l&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)x.always(e[x.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),C(0,t),this}};if(m.promise(x),h.url=((e||h.url||wt.href)+"").replace(jt,wt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(H)||[""],null==h.crossDomain){c=a.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),Ft(Pt,h,t,x),l)return x;for(p in(f=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Lt.test(h.type),i=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(d=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Et.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(kt,"$1"),d=(Et.test(i)?"&":"?")+"_="+Tt+++d),h.url=i+d),h.ifModified&&(E.lastModified[i]&&x.setRequestHeader("If-Modified-Since",E.lastModified[i]),E.etag[i]&&x.setRequestHeader("If-None-Match",E.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]),h.headers)x.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(v,x,h)||l))return x.abort();if(T="abort",y.add(h.complete),x.done(h.success),x.fail(h.error),r=Ft(Rt,h,t,x)){if(x.readyState=1,f&&g.trigger("ajaxSend",[x,h]),l)return x;h.async&&h.timeout>0&&(u=n.setTimeout(function(){x.abort("timeout")},h.timeout));try{l=!1,r.send(b,C)}catch(e){if(l)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,s){var c,p,d,b,w,T=t;l||(l=!0,u&&n.clearTimeout(u),r=void 0,o=s||"",x.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,x,a)),b=function(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,b,x,c),c?(h.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(E.lastModified[i]=w),(w=x.getResponseHeader("etag"))&&(E.etag[i]=w)),204===e||"HEAD"===h.type?T="nocontent":304===e?T="notmodified":(T=b.state,p=b.data,c=!(d=b.error))):(d=T,!e&&T||(T="error",e<0&&(e=0))),x.status=e,x.statusText=(t||T)+"",c?m.resolveWith(v,[p,T,x]):m.rejectWith(v,[x,T,d]),x.statusCode(_),_=void 0,f&&g.trigger(c?"ajaxSuccess":"ajaxError",[x,h,c?p:d]),y.fireWith(v,[x,T]),f&&(g.trigger("ajaxComplete",[x,h]),--E.active||E.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:i,data:n,success:r},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Bt=E.ajaxSettings.xhr();m.cors=!!Bt&&"withCredentials"in Bt,m.ajax=Bt=!!Bt,E.ajaxTransport(function(e){var t,r;if(m.cors||Bt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(qt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=E("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ut,Vt=[],zt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||E.expando+"_"+Tt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(zt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&zt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(zt,"$1"+i):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||E.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?E(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0}),"script"}),m.createHTMLDocument=((Ut=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&E.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=E.css(e,"position"),l=E(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),o=E.css(e,"top"),u=E.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),y(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):l.css(f)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),i.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-E.css(r,"marginTop",!0),left:t.left-i.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||Te})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return V(this,function(e,r,i){var o;if(_(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Ue(m.pixelPosition,function(e,n){if(n)return n=Be(e,t),Fe.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){E.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return V(this,function(t,n,i){var o;return _(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?E.css(t,n,s):E.style(t,n,i,s)},t,a?i:void 0,a)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=u.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=I,E.isFunction=y,E.isWindow=_,E.camelCase=X,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Gt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Gt),e&&n.jQuery===E&&(n.jQuery=Kt),E},i||(n.jQuery=n.$=E),E})},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0),i=n(22),o=n(24),a=n(25),s=n(26),u=n(8),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(27);e.exports=function(e){return new Promise(function(t,l){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||s(e.url)||(d=new window.XDomainRequest,h="onload",v=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var g=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+c(g+":"+m)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||v)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};i(t,l,r),d=null}},d.onerror=function(){l(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(28),_=(e.withCredentials||s(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;_&&(p[e.xsrfHeaderName]=_)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),l(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t,n,i,o){var a=new Error(e);return r(a,t,n,i,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){n(12),e.exports=n(40)},function(e,t,n){n(13),window.Vue=n(36),Vue.component("example-component",n(39).default);new Vue({el:"#app"})},function(e,t,n){window._=n(14);try{window.Popper=n(3).default,window.$=window.jQuery=n(4),n(16)}catch(e){}window.axios=n(17),window.axios.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";var r=document.head.querySelector('meta[name="csrf-token"]');r?window.axios.defaults.headers.common["X-CSRF-TOKEN"]=r.content:console.error("CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token")},function(e,t,n){(function(e,r){var i;(function(){var o,a=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",p=1,d=2,h=4,v=1,g=2,m=1,y=2,_=4,b=8,w=16,T=32,E=64,x=128,C=256,A=512,S=30,O="...",D=800,I=16,k=1,N=2,L=1/0,j=9007199254740991,P=1.7976931348623157e308,R=NaN,$=4294967295,H=$-1,M=$>>>1,F=[["ary",x],["bind",m],["bindKey",y],["curry",b],["curryRight",w],["flip",A],["partial",T],["partialRight",E],["rearg",C]],W="[object Arguments]",q="[object Array]",B="[object AsyncFunction]",U="[object Boolean]",V="[object Date]",z="[object DOMException]",K="[object Error]",G="[object Function]",X="[object GeneratorFunction]",Q="[object Map]",Y="[object Number]",J="[object Null]",Z="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",ie="[object Symbol]",oe="[object Undefined]",ae="[object WeakMap]",se="[object WeakSet]",ue="[object ArrayBuffer]",ce="[object DataView]",le="[object Float32Array]",fe="[object Float64Array]",pe="[object Int8Array]",de="[object Int16Array]",he="[object Int32Array]",ve="[object Uint8Array]",ge="[object Uint8ClampedArray]",me="[object Uint16Array]",ye="[object Uint32Array]",_e=/\b__p \+= '';/g,be=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Te=/&(?:amp|lt|gt|quot|#39);/g,Ee=/[&<>"']/g,xe=RegExp(Te.source),Ce=RegExp(Ee.source),Ae=/<%-([\s\S]+?)%>/g,Se=/<%([\s\S]+?)%>/g,Oe=/<%=([\s\S]+?)%>/g,De=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ie=/^\w*$/,ke=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ne=/[\\^$.*+?()[\]{}|]/g,Le=RegExp(Ne.source),je=/^\s+|\s+$/g,Pe=/^\s+/,Re=/\s+$/,$e=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,He=/\{\n\/\* \[wrapped with (.+)\] \*/,Me=/,? & /,Fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,We=/\\(\\)?/g,qe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Be=/\w*$/,Ue=/^[-+]0x[0-9a-f]+$/i,Ve=/^0b[01]+$/i,ze=/^\[object .+?Constructor\]$/,Ke=/^0o[0-7]+$/i,Ge=/^(?:0|[1-9]\d*)$/,Xe=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Qe=/($^)/,Ye=/['\n\r\u2028\u2029\\]/g,Je="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ze="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Ze+"]",nt="["+Je+"]",rt="\\d+",it="[\\u2700-\\u27bf]",ot="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Ze+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",st="\\ud83c[\\udffb-\\udfff]",ut="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",lt="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+ot+"|"+at+")",dt="(?:"+ft+"|"+at+")",ht="(?:"+nt+"|"+st+")"+"?",vt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[ut,ct,lt].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),gt="(?:"+[it,ct,lt].join("|")+")"+vt,mt="(?:"+[ut+nt+"?",nt,ct,lt,et].join("|")+")",yt=RegExp("['’]","g"),_t=RegExp(nt,"g"),bt=RegExp(st+"(?="+st+")|"+mt+vt,"g"),wt=RegExp([ft+"?"+ot+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+pt,"$"].join("|")+")",ft+"?"+pt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,gt].join("|"),"g"),Tt=RegExp("[\\u200d\\ud800-\\udfff"+Je+"\\ufe0e\\ufe0f]"),Et=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ct=-1,At={};At[le]=At[fe]=At[pe]=At[de]=At[he]=At[ve]=At[ge]=At[me]=At[ye]=!0,At[W]=At[q]=At[ue]=At[U]=At[ce]=At[V]=At[K]=At[G]=At[Q]=At[Y]=At[Z]=At[te]=At[ne]=At[re]=At[ae]=!1;var St={};St[W]=St[q]=St[ue]=St[ce]=St[U]=St[V]=St[le]=St[fe]=St[pe]=St[de]=St[he]=St[Q]=St[Y]=St[Z]=St[te]=St[ne]=St[re]=St[ie]=St[ve]=St[ge]=St[me]=St[ye]=!0,St[K]=St[G]=St[ae]=!1;var Ot={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Dt=parseFloat,It=parseInt,kt="object"==typeof e&&e&&e.Object===Object&&e,Nt="object"==typeof self&&self&&self.Object===Object&&self,Lt=kt||Nt||Function("return this")(),jt=t&&!t.nodeType&&t,Pt=jt&&"object"==typeof r&&r&&!r.nodeType&&r,Rt=Pt&&Pt.exports===jt,$t=Rt&&kt.process,Ht=function(){try{var e=Pt&&Pt.require&&Pt.require("util").types;return e||$t&&$t.binding&&$t.binding("util")}catch(e){}}(),Mt=Ht&&Ht.isArrayBuffer,Ft=Ht&&Ht.isDate,Wt=Ht&&Ht.isMap,qt=Ht&&Ht.isRegExp,Bt=Ht&&Ht.isSet,Ut=Ht&&Ht.isTypedArray;function Vt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function zt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function Kt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Xt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Qt(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Yt(e,t){return!!(null==e?0:e.length)&&un(e,t,0)>-1}function Jt(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Zt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function en(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function tn(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function nn(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=pn("length");function an(e,t,n){var r;return n(e,function(e,n,i){if(t(e,n,i))return r=n,!1}),r}function sn(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function un(e,t,n){return t==t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):sn(e,ln,n)}function cn(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function ln(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?vn(e,t)/n:R}function pn(e){return function(t){return null==t?o:t[e]}}function dn(e){return function(t){return null==e?o:e[t]}}function hn(e,t,n,r,i){return i(e,function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)}),n}function vn(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function gn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function mn(e){return function(t){return e(t)}}function yn(e,t){return Zt(t,function(t){return e[t]})}function _n(e,t){return e.has(t)}function bn(e,t){for(var n=-1,r=e.length;++n<r&&un(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&un(t,e[n],0)>-1;);return n}var Tn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),En=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(e){return"\\"+Ot[e]}function Cn(e){return Tt.test(e)}function An(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function Sn(e,t){return function(n){return e(t(n))}}function On(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,o[i++]=n)}return o}function Dn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function In(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function kn(e){return Cn(e)?function(e){var t=bt.lastIndex=0;for(;bt.test(e);)++t;return t}(e):on(e)}function Nn(e){return Cn(e)?function(e){return e.match(bt)||[]}(e):function(e){return e.split("")}(e)}var Ln=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var jn=function e(t){var n,r=(t=null==t?Lt:jn.defaults(Lt.Object(),t,jn.pick(Lt,xt))).Array,i=t.Date,Je=t.Error,Ze=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,it=t.TypeError,ot=r.prototype,at=Ze.prototype,st=tt.prototype,ut=t["__core-js_shared__"],ct=at.toString,lt=st.hasOwnProperty,ft=0,pt=(n=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=st.toString,ht=ct.call(tt),vt=Lt._,gt=nt("^"+ct.call(lt).replace(Ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),mt=Rt?t.Buffer:o,bt=t.Symbol,Tt=t.Uint8Array,Ot=mt?mt.allocUnsafe:o,kt=Sn(tt.getPrototypeOf,tt),Nt=tt.create,jt=st.propertyIsEnumerable,Pt=ot.splice,$t=bt?bt.isConcatSpreadable:o,Ht=bt?bt.iterator:o,on=bt?bt.toStringTag:o,dn=function(){try{var e=Mo(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Pn=t.clearTimeout!==Lt.clearTimeout&&t.clearTimeout,Rn=i&&i.now!==Lt.Date.now&&i.now,$n=t.setTimeout!==Lt.setTimeout&&t.setTimeout,Hn=et.ceil,Mn=et.floor,Fn=tt.getOwnPropertySymbols,Wn=mt?mt.isBuffer:o,qn=t.isFinite,Bn=ot.join,Un=Sn(tt.keys,tt),Vn=et.max,zn=et.min,Kn=i.now,Gn=t.parseInt,Xn=et.random,Qn=ot.reverse,Yn=Mo(t,"DataView"),Jn=Mo(t,"Map"),Zn=Mo(t,"Promise"),er=Mo(t,"Set"),tr=Mo(t,"WeakMap"),nr=Mo(tt,"create"),rr=tr&&new tr,ir={},or=fa(Yn),ar=fa(Jn),sr=fa(Zn),ur=fa(er),cr=fa(tr),lr=bt?bt.prototype:o,fr=lr?lr.valueOf:o,pr=lr?lr.toString:o;function dr(e){if(Os(e)&&!ms(e)&&!(e instanceof mr)){if(e instanceof gr)return e;if(lt.call(e,"__wrapped__"))return pa(e)}return new gr(e)}var hr=function(){function e(){}return function(t){if(!Ss(t))return{};if(Nt)return Nt(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function vr(){}function gr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function mr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=$,this.__views__=[]}function yr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new br;++t<n;)this.add(e[t])}function Tr(e){var t=this.__data__=new _r(e);this.size=t.size}function Er(e,t){var n=ms(e),r=!n&&gs(e),i=!n&&!r&&ws(e),o=!n&&!r&&!i&&Rs(e),a=n||r||i||o,s=a?gn(e.length,rt):[],u=s.length;for(var c in e)!t&&!lt.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||zo(c,u))||s.push(c);return s}function xr(e){var t=e.length;return t?e[wi(0,t-1)]:o}function Cr(e,t){return ua(no(e),jr(t,0,e.length))}function Ar(e){return ua(no(e))}function Sr(e,t,n){(n===o||ds(e[t],n))&&(n!==o||t in e)||Nr(e,t,n)}function Or(e,t,n){var r=e[t];lt.call(e,t)&&ds(r,n)&&(n!==o||t in e)||Nr(e,t,n)}function Dr(e,t){for(var n=e.length;n--;)if(ds(e[n][0],t))return n;return-1}function Ir(e,t,n,r){return Mr(e,function(e,i,o){t(r,e,n(e),o)}),r}function kr(e,t){return e&&ro(t,iu(t),e)}function Nr(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Lr(e,t){for(var n=-1,i=t.length,a=r(i),s=null==e;++n<i;)a[n]=s?o:Zs(e,t[n]);return a}function jr(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function Pr(e,t,n,r,i,a){var s,u=t&p,c=t&d,l=t&h;if(n&&(s=i?n(e,r,i,a):n(e)),s!==o)return s;if(!Ss(e))return e;var f=ms(e);if(f){if(s=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&lt.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!u)return no(e,s)}else{var v=qo(e),g=v==G||v==X;if(ws(e))return Qi(e,u);if(v==Z||v==W||g&&!i){if(s=c||g?{}:Uo(e),!u)return c?function(e,t){return ro(e,Wo(e),t)}(e,function(e,t){return e&&ro(t,ou(t),e)}(s,e)):function(e,t){return ro(e,Fo(e),t)}(e,kr(s,e))}else{if(!St[v])return i?e:{};s=function(e,t,n){var r,i,o,a=e.constructor;switch(t){case ue:return Yi(e);case U:case V:return new a(+e);case ce:return function(e,t){var n=t?Yi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case le:case fe:case pe:case de:case he:case ve:case ge:case me:case ye:return Ji(e,n);case Q:return new a;case Y:case re:return new a(e);case te:return(o=new(i=e).constructor(i.source,Be.exec(i))).lastIndex=i.lastIndex,o;case ne:return new a;case ie:return r=e,fr?tt(fr.call(r)):{}}}(e,v,u)}}a||(a=new Tr);var m=a.get(e);if(m)return m;if(a.set(e,s),Ls(e))return e.forEach(function(r){s.add(Pr(r,t,n,r,e,a))}),s;if(Ds(e))return e.forEach(function(r,i){s.set(i,Pr(r,t,n,i,e,a))}),s;var y=f?o:(l?c?No:ko:c?ou:iu)(e);return Kt(y||e,function(r,i){y&&(r=e[i=r]),Or(s,i,Pr(r,t,n,i,e,a))}),s}function Rr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var i=n[r],a=t[i],s=e[i];if(s===o&&!(i in e)||!a(s))return!1}return!0}function $r(e,t,n){if("function"!=typeof e)throw new it(u);return ia(function(){e.apply(o,n)},t)}function Hr(e,t,n,r){var i=-1,o=Yt,s=!0,u=e.length,c=[],l=t.length;if(!u)return c;n&&(t=Zt(t,mn(n))),r?(o=Jt,s=!1):t.length>=a&&(o=_n,s=!1,t=new wr(t));e:for(;++i<u;){var f=e[i],p=null==n?f:n(f);if(f=r||0!==f?f:0,s&&p==p){for(var d=l;d--;)if(t[d]===p)continue e;c.push(f)}else o(t,p,r)||c.push(f)}return c}dr.templateSettings={escape:Ae,evaluate:Se,interpolate:Oe,variable:"",imports:{_:dr}},dr.prototype=vr.prototype,dr.prototype.constructor=dr,gr.prototype=hr(vr.prototype),gr.prototype.constructor=gr,mr.prototype=hr(vr.prototype),mr.prototype.constructor=mr,yr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},yr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},yr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===c?o:n}return lt.call(t,e)?t[e]:o},yr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==o:lt.call(t,e)},yr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===o?c:t,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(e){var t=this.__data__,n=Dr(t,e);return!(n<0||(n==t.length-1?t.pop():Pt.call(t,n,1),--this.size,0))},_r.prototype.get=function(e){var t=this.__data__,n=Dr(t,e);return n<0?o:t[n][1]},_r.prototype.has=function(e){return Dr(this.__data__,e)>-1},_r.prototype.set=function(e,t){var n=this.__data__,r=Dr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},br.prototype.clear=function(){this.size=0,this.__data__={hash:new yr,map:new(Jn||_r),string:new yr}},br.prototype.delete=function(e){var t=$o(this,e).delete(e);return this.size-=t?1:0,t},br.prototype.get=function(e){return $o(this,e).get(e)},br.prototype.has=function(e){return $o(this,e).has(e)},br.prototype.set=function(e,t){var n=$o(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,c),this},wr.prototype.has=function(e){return this.__data__.has(e)},Tr.prototype.clear=function(){this.__data__=new _r,this.size=0},Tr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Tr.prototype.get=function(e){return this.__data__.get(e)},Tr.prototype.has=function(e){return this.__data__.has(e)},Tr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof _r){var r=n.__data__;if(!Jn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new br(r)}return n.set(e,t),this.size=n.size,this};var Mr=ao(Kr),Fr=ao(Gr,!0);function Wr(e,t){var n=!0;return Mr(e,function(e,r,i){return n=!!t(e,r,i)}),n}function qr(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],s=t(a);if(null!=s&&(u===o?s==s&&!Ps(s):n(s,u)))var u=s,c=a}return c}function Br(e,t){var n=[];return Mr(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function Ur(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Vo),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?Ur(s,t-1,n,r,i):en(i,s):r||(i[i.length]=s)}return i}var Vr=so(),zr=so(!0);function Kr(e,t){return e&&Vr(e,t,iu)}function Gr(e,t){return e&&zr(e,t,iu)}function Xr(e,t){return Qt(t,function(t){return xs(e[t])})}function Qr(e,t){for(var n=0,r=(t=zi(t,e)).length;null!=e&&n<r;)e=e[la(t[n++])];return n&&n==r?e:o}function Yr(e,t,n){var r=t(e);return ms(e)?r:en(r,n(e))}function Jr(e){return null==e?e===o?oe:J:on&&on in tt(e)?function(e){var t=lt.call(e,on),n=e[on];try{e[on]=o;var r=!0}catch(e){}var i=dt.call(e);return r&&(t?e[on]=n:delete e[on]),i}(e):function(e){return dt.call(e)}(e)}function Zr(e,t){return e>t}function ei(e,t){return null!=e&&lt.call(e,t)}function ti(e,t){return null!=e&&t in tt(e)}function ni(e,t,n){for(var i=n?Jt:Yt,a=e[0].length,s=e.length,u=s,c=r(s),l=1/0,f=[];u--;){var p=e[u];u&&t&&(p=Zt(p,mn(t))),l=zn(p.length,l),c[u]=!n&&(t||a>=120&&p.length>=120)?new wr(u&&p):o}p=e[0];var d=-1,h=c[0];e:for(;++d<a&&f.length<l;){var v=p[d],g=t?t(v):v;if(v=n||0!==v?v:0,!(h?_n(h,g):i(f,g,n))){for(u=s;--u;){var m=c[u];if(!(m?_n(m,g):i(e[u],g,n)))continue e}h&&h.push(g),f.push(v)}}return f}function ri(e,t,n){var r=null==(e=ta(e,t=zi(t,e)))?e:e[la(Ea(t))];return null==r?o:Vt(r,e,n)}function ii(e){return Os(e)&&Jr(e)==W}function oi(e,t,n,r,i){return e===t||(null==e||null==t||!Os(e)&&!Os(t)?e!=e&&t!=t:function(e,t,n,r,i,a){var s=ms(e),u=ms(t),c=s?q:qo(e),l=u?q:qo(t),f=(c=c==W?Z:c)==Z,p=(l=l==W?Z:l)==Z,d=c==l;if(d&&ws(e)){if(!ws(t))return!1;s=!0,f=!1}if(d&&!f)return a||(a=new Tr),s||Rs(e)?Do(e,t,n,r,i,a):function(e,t,n,r,i,o,a){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ue:return!(e.byteLength!=t.byteLength||!o(new Tt(e),new Tt(t)));case U:case V:case Y:return ds(+e,+t);case K:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case Q:var s=An;case ne:var u=r&v;if(s||(s=Dn),e.size!=t.size&&!u)return!1;var c=a.get(e);if(c)return c==t;r|=g,a.set(e,t);var l=Do(s(e),s(t),r,i,o,a);return a.delete(e),l;case ie:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,c,n,r,i,a);if(!(n&v)){var h=f&&lt.call(e,"__wrapped__"),m=p&&lt.call(t,"__wrapped__");if(h||m){var y=h?e.value():e,_=m?t.value():t;return a||(a=new Tr),i(y,_,n,r,a)}}return!!d&&(a||(a=new Tr),function(e,t,n,r,i,a){var s=n&v,u=ko(e),c=u.length,l=ko(t).length;if(c!=l&&!s)return!1;for(var f=c;f--;){var p=u[f];if(!(s?p in t:lt.call(t,p)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var g=s;++f<c;){p=u[f];var m=e[p],y=t[p];if(r)var _=s?r(y,m,p,t,e,a):r(m,y,p,e,t,a);if(!(_===o?m===y||i(m,y,n,r,a):_)){h=!1;break}g||(g="constructor"==p)}if(h&&!g){var b=e.constructor,w=t.constructor;b!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w)&&(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,i,a))}(e,t,n,r,oi,i))}function ai(e,t,n,r){var i=n.length,a=i,s=!r;if(null==e)return!a;for(e=tt(e);i--;){var u=n[i];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++i<a;){var c=(u=n[i])[0],l=e[c],f=u[1];if(s&&u[2]){if(l===o&&!(c in e))return!1}else{var p=new Tr;if(r)var d=r(l,f,c,e,t,p);if(!(d===o?oi(f,l,v|g,r,p):d))return!1}}return!0}function si(e){return!(!Ss(e)||(t=e,pt&&pt in t))&&(xs(e)?gt:ze).test(fa(e));var t}function ui(e){return"function"==typeof e?e:null==e?Iu:"object"==typeof e?ms(e)?hi(e[0],e[1]):di(e):Mu(e)}function ci(e){if(!Yo(e))return Un(e);var t=[];for(var n in tt(e))lt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function li(e){if(!Ss(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Yo(e),n=[];for(var r in e)("constructor"!=r||!t&&lt.call(e,r))&&n.push(r);return n}function fi(e,t){return e<t}function pi(e,t){var n=-1,i=_s(e)?r(e.length):[];return Mr(e,function(e,r,o){i[++n]=t(e,r,o)}),i}function di(e){var t=Ho(e);return 1==t.length&&t[0][2]?Zo(t[0][0],t[0][1]):function(n){return n===e||ai(n,e,t)}}function hi(e,t){return Go(e)&&Jo(t)?Zo(la(e),t):function(n){var r=Zs(n,e);return r===o&&r===t?eu(n,e):oi(t,r,v|g)}}function vi(e,t,n,r,i){e!==t&&Vr(t,function(a,s){if(Ss(a))i||(i=new Tr),function(e,t,n,r,i,a,s){var u=na(e,n),c=na(t,n),l=s.get(c);if(l)Sr(e,n,l);else{var f=a?a(u,c,n+"",e,t,s):o,p=f===o;if(p){var d=ms(c),h=!d&&ws(c),v=!d&&!h&&Rs(c);f=c,d||h||v?ms(u)?f=u:bs(u)?f=no(u):h?(p=!1,f=Qi(c,!0)):v?(p=!1,f=Ji(c,!0)):f=[]:ks(c)||gs(c)?(f=u,gs(u)?f=Us(u):Ss(u)&&!xs(u)||(f=Uo(c))):p=!1}p&&(s.set(c,f),i(f,c,r,a,s),s.delete(c)),Sr(e,n,f)}}(e,t,s,n,vi,r,i);else{var u=r?r(na(e,s),a,s+"",e,t,i):o;u===o&&(u=a),Sr(e,s,u)}},ou)}function gi(e,t){var n=e.length;if(n)return zo(t+=t<0?n:0,n)?e[t]:o}function mi(e,t,n){var r=-1;return t=Zt(t.length?t:[Iu],mn(Ro())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(pi(e,function(e,n,i){return{criteria:Zt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){for(var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;++r<a;){var u=Zi(i[r],o[r]);if(u){if(r>=s)return u;var c=n[r];return u*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)})}function yi(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=Qr(e,a);n(s,a)&&Ai(o,zi(a,e),s)}return o}function _i(e,t,n,r){var i=r?cn:un,o=-1,a=t.length,s=e;for(e===t&&(t=no(t)),n&&(s=Zt(e,mn(n)));++o<a;)for(var u=0,c=t[o],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==e&&Pt.call(s,u,1),Pt.call(e,u,1);return e}function bi(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;zo(i)?Pt.call(e,i,1):Hi(e,i)}}return e}function wi(e,t){return e+Mn(Xn()*(t-e+1))}function Ti(e,t){var n="";if(!e||t<1||t>j)return n;do{t%2&&(n+=e),(t=Mn(t/2))&&(e+=e)}while(t);return n}function Ei(e,t){return oa(ea(e,t,Iu),e+"")}function xi(e){return xr(du(e))}function Ci(e,t){var n=du(e);return ua(n,jr(t,0,n.length))}function Ai(e,t,n,r){if(!Ss(e))return e;for(var i=-1,a=(t=zi(t,e)).length,s=a-1,u=e;null!=u&&++i<a;){var c=la(t[i]),l=n;if(i!=s){var f=u[c];(l=r?r(f,c,u):o)===o&&(l=Ss(f)?f:zo(t[i+1])?[]:{})}Or(u,c,l),u=u[c]}return e}var Si=rr?function(e,t){return rr.set(e,t),e}:Iu,Oi=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Su(t),writable:!0})}:Iu;function Di(e){return ua(du(e))}function Ii(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function ki(e,t){var n;return Mr(e,function(e,r,i){return!(n=t(e,r,i))}),!!n}function Ni(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=M){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!Ps(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return Li(e,t,Iu,n)}function Li(e,t,n,r){t=n(t);for(var i=0,a=null==e?0:e.length,s=t!=t,u=null===t,c=Ps(t),l=t===o;i<a;){var f=Mn((i+a)/2),p=n(e[f]),d=p!==o,h=null===p,v=p==p,g=Ps(p);if(s)var m=r||v;else m=l?v&&(r||d):u?v&&d&&(r||!h):c?v&&d&&!h&&(r||!g):!h&&!g&&(r?p<=t:p<t);m?i=f+1:a=f}return zn(a,H)}function ji(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!ds(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function Pi(e){return"number"==typeof e?e:Ps(e)?R:+e}function Ri(e){if("string"==typeof e)return e;if(ms(e))return Zt(e,Ri)+"";if(Ps(e))return pr?pr.call(e):"";var t=e+"";return"0"==t&&1/e==-L?"-0":t}function $i(e,t,n){var r=-1,i=Yt,o=e.length,s=!0,u=[],c=u;if(n)s=!1,i=Jt;else if(o>=a){var l=t?null:Eo(e);if(l)return Dn(l);s=!1,i=_n,c=new wr}else c=t?[]:u;e:for(;++r<o;){var f=e[r],p=t?t(f):f;if(f=n||0!==f?f:0,s&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue e;t&&c.push(p),u.push(f)}else i(c,p,n)||(c!==u&&c.push(p),u.push(f))}return u}function Hi(e,t){return null==(e=ta(e,t=zi(t,e)))||delete e[la(Ea(t))]}function Mi(e,t,n,r){return Ai(e,t,n(Qr(e,t)),r)}function Fi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Ii(e,r?0:o,r?o+1:i):Ii(e,r?o+1:0,r?i:o)}function Wi(e,t){var n=e;return n instanceof mr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function qi(e,t,n){var i=e.length;if(i<2)return i?$i(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],u=-1;++u<i;)u!=o&&(a[o]=Hr(a[o]||s,e[u],t,n));return $i(Ur(a,1),t,n)}function Bi(e,t,n){for(var r=-1,i=e.length,a=t.length,s={};++r<i;){var u=r<a?t[r]:o;n(s,e[r],u)}return s}function Ui(e){return bs(e)?e:[]}function Vi(e){return"function"==typeof e?e:Iu}function zi(e,t){return ms(e)?e:Go(e,t)?[e]:ca(Vs(e))}var Ki=Ei;function Gi(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:Ii(e,t,n)}var Xi=Pn||function(e){return Lt.clearTimeout(e)};function Qi(e,t){if(t)return e.slice();var n=e.length,r=Ot?Ot(n):new e.constructor(n);return e.copy(r),r}function Yi(e){var t=new e.constructor(e.byteLength);return new Tt(t).set(new Tt(e)),t}function Ji(e,t){var n=t?Yi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Zi(e,t){if(e!==t){var n=e!==o,r=null===e,i=e==e,a=Ps(e),s=t!==o,u=null===t,c=t==t,l=Ps(t);if(!u&&!l&&!a&&e>t||a&&s&&c&&!u&&!l||r&&s&&c||!n&&c||!i)return 1;if(!r&&!a&&!l&&e<t||l&&n&&i&&!r&&!a||u&&n&&i||!s&&i||!c)return-1}return 0}function eo(e,t,n,i){for(var o=-1,a=e.length,s=n.length,u=-1,c=t.length,l=Vn(a-s,0),f=r(c+l),p=!i;++u<c;)f[u]=t[u];for(;++o<s;)(p||o<a)&&(f[n[o]]=e[o]);for(;l--;)f[u++]=e[o++];return f}function to(e,t,n,i){for(var o=-1,a=e.length,s=-1,u=n.length,c=-1,l=t.length,f=Vn(a-u,0),p=r(f+l),d=!i;++o<f;)p[o]=e[o];for(var h=o;++c<l;)p[h+c]=t[c];for(;++s<u;)(d||o<a)&&(p[h+n[s]]=e[o++]);return p}function no(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function ro(e,t,n,r){var i=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var u=t[a],c=r?r(n[u],e[u],u,n,e):o;c===o&&(c=e[u]),i?Nr(n,u,c):Or(n,u,c)}return n}function io(e,t){return function(n,r){var i=ms(n)?zt:Ir,o=t?t():{};return i(n,e,Ro(r,2),o)}}function oo(e){return Ei(function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,s=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,s&&Ko(n[0],n[1],s)&&(a=i<3?o:a,i=1),t=tt(t);++r<i;){var u=n[r];u&&e(t,u,r,a)}return t})}function ao(e,t){return function(n,r){if(null==n)return n;if(!_s(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=tt(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function so(e){return function(t,n,r){for(var i=-1,o=tt(t),a=r(t),s=a.length;s--;){var u=a[e?s:++i];if(!1===n(o[u],u,o))break}return t}}function uo(e){return function(t){var n=Cn(t=Vs(t))?Nn(t):o,r=n?n[0]:t.charAt(0),i=n?Gi(n,1).join(""):t.slice(1);return r[e]()+i}}function co(e){return function(t){return tn(xu(gu(t).replace(yt,"")),e,"")}}function lo(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hr(e.prototype),r=e.apply(n,t);return Ss(r)?r:n}}function fo(e){return function(t,n,r){var i=tt(t);if(!_s(t)){var a=Ro(n,3);t=iu(t),n=function(e){return a(i[e],e,i)}}var s=e(t,n,r);return s>-1?i[a?t[s]:s]:o}}function po(e){return Io(function(t){var n=t.length,r=n,i=gr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new it(u);if(i&&!s&&"wrapper"==jo(a))var s=new gr([],!0)}for(r=s?r:n;++r<n;){var c=jo(a=t[r]),l="wrapper"==c?Lo(a):o;s=l&&Xo(l[0])&&l[1]==(x|b|T|C)&&!l[4].length&&1==l[9]?s[jo(l[0])].apply(s,l[3]):1==a.length&&Xo(a)?s[c]():s.thru(a)}return function(){var e=arguments,r=e[0];if(s&&1==e.length&&ms(r))return s.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}})}function ho(e,t,n,i,a,s,u,c,l,f){var p=t&x,d=t&m,h=t&y,v=t&(b|w),g=t&A,_=h?o:lo(e);return function m(){for(var y=arguments.length,b=r(y),w=y;w--;)b[w]=arguments[w];if(v)var T=Po(m),E=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(b,T);if(i&&(b=eo(b,i,a,v)),s&&(b=to(b,s,u,v)),y-=E,v&&y<f){var x=On(b,T);return wo(e,t,ho,m.placeholder,n,b,x,c,l,f-y)}var C=d?n:this,A=h?C[e]:e;return y=b.length,c?b=function(e,t){for(var n=e.length,r=zn(t.length,n),i=no(e);r--;){var a=t[r];e[r]=zo(a,n)?i[a]:o}return e}(b,c):g&&y>1&&b.reverse(),p&&l<y&&(b.length=l),this&&this!==Lt&&this instanceof m&&(A=_||lo(A)),A.apply(C,b)}}function vo(e,t){return function(n,r){return function(e,t,n,r){return Kr(e,function(e,i,o){t(r,n(e),i,o)}),r}(n,e,t(r),{})}}function go(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Ri(n),r=Ri(r)):(n=Pi(n),r=Pi(r)),i=e(n,r)}return i}}function mo(e){return Io(function(t){return t=Zt(t,mn(Ro())),Ei(function(n){var r=this;return e(t,function(e){return Vt(e,r,n)})})})}function yo(e,t){var n=(t=t===o?" ":Ri(t)).length;if(n<2)return n?Ti(t,e):t;var r=Ti(t,Hn(e/kn(t)));return Cn(t)?Gi(Nn(r),0,e).join(""):r.slice(0,e)}function _o(e){return function(t,n,i){return i&&"number"!=typeof i&&Ko(t,n,i)&&(n=i=o),t=Fs(t),n===o?(n=t,t=0):n=Fs(n),function(e,t,n,i){for(var o=-1,a=Vn(Hn((t-e)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=n;return s}(t,n,i=i===o?t<n?1:-1:Fs(i),e)}}function bo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Bs(t),n=Bs(n)),e(t,n)}}function wo(e,t,n,r,i,a,s,u,c,l){var f=t&b;t|=f?T:E,(t&=~(f?E:T))&_||(t&=~(m|y));var p=[e,t,i,f?a:o,f?s:o,f?o:a,f?o:s,u,c,l],d=n.apply(o,p);return Xo(e)&&ra(d,p),d.placeholder=r,aa(d,e,t)}function To(e){var t=et[e];return function(e,n){if(e=Bs(e),n=null==n?0:zn(Ws(n),292)){var r=(Vs(e)+"e").split("e");return+((r=(Vs(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Eo=er&&1/Dn(new er([,-0]))[1]==L?function(e){return new er(e)}:Pu;function xo(e){return function(t){var n=qo(t);return n==Q?An(t):n==ne?In(t):function(e,t){return Zt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Co(e,t,n,i,a,s,c,l){var p=t&y;if(!p&&"function"!=typeof e)throw new it(u);var d=i?i.length:0;if(d||(t&=~(T|E),i=a=o),c=c===o?c:Vn(Ws(c),0),l=l===o?l:Ws(l),d-=a?a.length:0,t&E){var h=i,v=a;i=a=o}var g=p?o:Lo(e),A=[e,t,n,i,a,h,v,s,c,l];if(g&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<(m|y|x),a=r==x&&n==b||r==x&&n==C&&e[7].length<=t[8]||r==(x|C)&&t[7].length<=t[8]&&n==b;if(!o&&!a)return e;r&m&&(e[2]=t[2],i|=n&m?0:_);var s=t[3];if(s){var u=e[3];e[3]=u?eo(u,s,t[4]):s,e[4]=u?On(e[3],f):t[4]}(s=t[5])&&(u=e[5],e[5]=u?to(u,s,t[6]):s,e[6]=u?On(e[5],f):t[6]),(s=t[7])&&(e[7]=s),r&x&&(e[8]=null==e[8]?t[8]:zn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(A,g),e=A[0],t=A[1],n=A[2],i=A[3],a=A[4],!(l=A[9]=A[9]===o?p?0:e.length:Vn(A[9]-d,0))&&t&(b|w)&&(t&=~(b|w)),t&&t!=m)S=t==b||t==w?function(e,t,n){var i=lo(e);return function a(){for(var s=arguments.length,u=r(s),c=s,l=Po(a);c--;)u[c]=arguments[c];var f=s<3&&u[0]!==l&&u[s-1]!==l?[]:On(u,l);return(s-=f.length)<n?wo(e,t,ho,a.placeholder,o,u,f,o,o,n-s):Vt(this&&this!==Lt&&this instanceof a?i:e,this,u)}}(e,t,l):t!=T&&t!=(m|T)||a.length?ho.apply(o,A):function(e,t,n,i){var o=t&m,a=lo(e);return function t(){for(var s=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),p=this&&this!==Lt&&this instanceof t?a:e;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++s];return Vt(p,o?n:this,f)}}(e,t,n,i);else var S=function(e,t,n){var r=t&m,i=lo(e);return function t(){return(this&&this!==Lt&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return aa((g?Si:ra)(S,A),e,t)}function Ao(e,t,n,r){return e===o||ds(e,st[n])&&!lt.call(r,n)?t:e}function So(e,t,n,r,i,a){return Ss(e)&&Ss(t)&&(a.set(t,e),vi(e,t,o,So,a),a.delete(t)),e}function Oo(e){return ks(e)?o:e}function Do(e,t,n,r,i,a){var s=n&v,u=e.length,c=t.length;if(u!=c&&!(s&&c>u))return!1;var l=a.get(e);if(l&&a.get(t))return l==t;var f=-1,p=!0,d=n&g?new wr:o;for(a.set(e,t),a.set(t,e);++f<u;){var h=e[f],m=t[f];if(r)var y=s?r(m,h,f,t,e,a):r(h,m,f,e,t,a);if(y!==o){if(y)continue;p=!1;break}if(d){if(!rn(t,function(e,t){if(!_n(d,t)&&(h===e||i(h,e,n,r,a)))return d.push(t)})){p=!1;break}}else if(h!==m&&!i(h,m,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Io(e){return oa(ea(e,o,ya),e+"")}function ko(e){return Yr(e,iu,Fo)}function No(e){return Yr(e,ou,Wo)}var Lo=rr?function(e){return rr.get(e)}:Pu;function jo(e){for(var t=e.name+"",n=ir[t],r=lt.call(ir,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function Po(e){return(lt.call(dr,"placeholder")?dr:e).placeholder}function Ro(){var e=dr.iteratee||ku;return e=e===ku?ui:e,arguments.length?e(arguments[0],arguments[1]):e}function $o(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function Ho(e){for(var t=iu(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Jo(i)]}return t}function Mo(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return si(n)?n:o}var Fo=Fn?function(e){return null==e?[]:(e=tt(e),Qt(Fn(e),function(t){return jt.call(e,t)}))}:qu,Wo=Fn?function(e){for(var t=[];e;)en(t,Fo(e)),e=kt(e);return t}:qu,qo=Jr;function Bo(e,t,n){for(var r=-1,i=(t=zi(t,e)).length,o=!1;++r<i;){var a=la(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&As(i)&&zo(a,i)&&(ms(e)||gs(e))}function Uo(e){return"function"!=typeof e.constructor||Yo(e)?{}:hr(kt(e))}function Vo(e){return ms(e)||gs(e)||!!($t&&e&&e[$t])}function zo(e,t){var n=typeof e;return!!(t=null==t?j:t)&&("number"==n||"symbol"!=n&&Ge.test(e))&&e>-1&&e%1==0&&e<t}function Ko(e,t,n){if(!Ss(n))return!1;var r=typeof t;return!!("number"==r?_s(n)&&zo(t,n.length):"string"==r&&t in n)&&ds(n[t],e)}function Go(e,t){if(ms(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ps(e))||Ie.test(e)||!De.test(e)||null!=t&&e in tt(t)}function Xo(e){var t=jo(e),n=dr[t];if("function"!=typeof n||!(t in mr.prototype))return!1;if(e===n)return!0;var r=Lo(n);return!!r&&e===r[0]}(Yn&&qo(new Yn(new ArrayBuffer(1)))!=ce||Jn&&qo(new Jn)!=Q||Zn&&"[object Promise]"!=qo(Zn.resolve())||er&&qo(new er)!=ne||tr&&qo(new tr)!=ae)&&(qo=function(e){var t=Jr(e),n=t==Z?e.constructor:o,r=n?fa(n):"";if(r)switch(r){case or:return ce;case ar:return Q;case sr:return"[object Promise]";case ur:return ne;case cr:return ae}return t});var Qo=ut?xs:Bu;function Yo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||st)}function Jo(e){return e==e&&!Ss(e)}function Zo(e,t){return function(n){return null!=n&&n[e]===t&&(t!==o||e in tt(n))}}function ea(e,t,n){return t=Vn(t===o?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=Vn(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var u=r(t+1);++o<t;)u[o]=i[o];return u[t]=n(s),Vt(e,this,u)}}function ta(e,t){return t.length<2?e:Qr(e,Ii(t,0,-1))}function na(e,t){if("__proto__"!=t)return e[t]}var ra=sa(Si),ia=$n||function(e,t){return Lt.setTimeout(e,t)},oa=sa(Oi);function aa(e,t,n){var r=t+"";return oa(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace($e,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Kt(F,function(n){var r="_."+n[0];t&n[1]&&!Yt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(He);return t?t[1].split(Me):[]}(r),n)))}function sa(e){var t=0,n=0;return function(){var r=Kn(),i=I-(r-n);if(n=r,i>0){if(++t>=D)return arguments[0]}else t=0;return e.apply(o,arguments)}}function ua(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=wi(n,i),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var ca=function(e){var t=ss(e,function(e){return n.size===l&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ke,function(e,n,r,i){t.push(r?i.replace(We,"$1"):n||e)}),t});function la(e){if("string"==typeof e||Ps(e))return e;var t=e+"";return"0"==t&&1/e==-L?"-0":t}function fa(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pa(e){if(e instanceof mr)return e.clone();var t=new gr(e.__wrapped__,e.__chain__);return t.__actions__=no(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=Ei(function(e,t){return bs(e)?Hr(e,Ur(t,1,bs,!0)):[]}),ha=Ei(function(e,t){var n=Ea(t);return bs(n)&&(n=o),bs(e)?Hr(e,Ur(t,1,bs,!0),Ro(n,2)):[]}),va=Ei(function(e,t){var n=Ea(t);return bs(n)&&(n=o),bs(e)?Hr(e,Ur(t,1,bs,!0),o,n):[]});function ga(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Ws(n);return i<0&&(i=Vn(r+i,0)),sn(e,Ro(t,3),i)}function ma(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Ws(n),i=n<0?Vn(r+i,0):zn(i,r-1)),sn(e,Ro(t,3),i,!0)}function ya(e){return null!=e&&e.length?Ur(e,1):[]}function _a(e){return e&&e.length?e[0]:o}var ba=Ei(function(e){var t=Zt(e,Ui);return t.length&&t[0]===e[0]?ni(t):[]}),wa=Ei(function(e){var t=Ea(e),n=Zt(e,Ui);return t===Ea(n)?t=o:n.pop(),n.length&&n[0]===e[0]?ni(n,Ro(t,2)):[]}),Ta=Ei(function(e){var t=Ea(e),n=Zt(e,Ui);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?ni(n,o,t):[]});function Ea(e){var t=null==e?0:e.length;return t?e[t-1]:o}var xa=Ei(Ca);function Ca(e,t){return e&&e.length&&t&&t.length?_i(e,t):e}var Aa=Io(function(e,t){var n=null==e?0:e.length,r=Lr(e,t);return bi(e,Zt(t,function(e){return zo(e,n)?+e:e}).sort(Zi)),r});function Sa(e){return null==e?e:Qn.call(e)}var Oa=Ei(function(e){return $i(Ur(e,1,bs,!0))}),Da=Ei(function(e){var t=Ea(e);return bs(t)&&(t=o),$i(Ur(e,1,bs,!0),Ro(t,2))}),Ia=Ei(function(e){var t=Ea(e);return t="function"==typeof t?t:o,$i(Ur(e,1,bs,!0),o,t)});function ka(e){if(!e||!e.length)return[];var t=0;return e=Qt(e,function(e){if(bs(e))return t=Vn(e.length,t),!0}),gn(t,function(t){return Zt(e,pn(t))})}function Na(e,t){if(!e||!e.length)return[];var n=ka(e);return null==t?n:Zt(n,function(e){return Vt(t,o,e)})}var La=Ei(function(e,t){return bs(e)?Hr(e,t):[]}),ja=Ei(function(e){return qi(Qt(e,bs))}),Pa=Ei(function(e){var t=Ea(e);return bs(t)&&(t=o),qi(Qt(e,bs),Ro(t,2))}),Ra=Ei(function(e){var t=Ea(e);return t="function"==typeof t?t:o,qi(Qt(e,bs),o,t)}),$a=Ei(ka);var Ha=Ei(function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,Na(e,n)});function Ma(e){var t=dr(e);return t.__chain__=!0,t}function Fa(e,t){return t(e)}var Wa=Io(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return Lr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof mr&&zo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Fa,args:[i],thisArg:o}),new gr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(o),e})):this.thru(i)});var qa=io(function(e,t,n){lt.call(e,n)?++e[n]:Nr(e,n,1)});var Ba=fo(ga),Ua=fo(ma);function Va(e,t){return(ms(e)?Kt:Mr)(e,Ro(t,3))}function za(e,t){return(ms(e)?Gt:Fr)(e,Ro(t,3))}var Ka=io(function(e,t,n){lt.call(e,n)?e[n].push(t):Nr(e,n,[t])});var Ga=Ei(function(e,t,n){var i=-1,o="function"==typeof t,a=_s(e)?r(e.length):[];return Mr(e,function(e){a[++i]=o?Vt(t,e,n):ri(e,t,n)}),a}),Xa=io(function(e,t,n){Nr(e,n,t)});function Qa(e,t){return(ms(e)?Zt:pi)(e,Ro(t,3))}var Ya=io(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Ja=Ei(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Ko(e,t[0],t[1])?t=[]:n>2&&Ko(t[0],t[1],t[2])&&(t=[t[0]]),mi(e,Ur(t,1),[])}),Za=Rn||function(){return Lt.Date.now()};function es(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,Co(e,x,o,o,o,o,t)}function ts(e,t){var n;if("function"!=typeof t)throw new it(u);return e=Ws(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var ns=Ei(function(e,t,n){var r=m;if(n.length){var i=On(n,Po(ns));r|=T}return Co(e,r,t,n,i)}),rs=Ei(function(e,t,n){var r=m|y;if(n.length){var i=On(n,Po(rs));r|=T}return Co(t,r,e,n,i)});function is(e,t,n){var r,i,a,s,c,l,f=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new it(u);function v(t){var n=r,a=i;return r=i=o,f=t,s=e.apply(a,n)}function g(e){var n=e-l;return l===o||n>=t||n<0||d&&e-f>=a}function m(){var e=Za();if(g(e))return y(e);c=ia(m,function(e){var n=t-(e-l);return d?zn(n,a-(e-f)):n}(e))}function y(e){return c=o,h&&r?v(e):(r=i=o,s)}function _(){var e=Za(),n=g(e);if(r=arguments,i=this,l=e,n){if(c===o)return function(e){return f=e,c=ia(m,t),p?v(e):s}(l);if(d)return c=ia(m,t),v(l)}return c===o&&(c=ia(m,t)),s}return t=Bs(t)||0,Ss(n)&&(p=!!n.leading,a=(d="maxWait"in n)?Vn(Bs(n.maxWait)||0,t):a,h="trailing"in n?!!n.trailing:h),_.cancel=function(){c!==o&&Xi(c),f=0,r=l=i=c=o},_.flush=function(){return c===o?s:y(Za())},_}var os=Ei(function(e,t){return $r(e,1,t)}),as=Ei(function(e,t,n){return $r(e,Bs(t)||0,n)});function ss(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new it(u);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(ss.Cache||br),n}function us(e){if("function"!=typeof e)throw new it(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}ss.Cache=br;var cs=Ki(function(e,t){var n=(t=1==t.length&&ms(t[0])?Zt(t[0],mn(Ro())):Zt(Ur(t,1),mn(Ro()))).length;return Ei(function(r){for(var i=-1,o=zn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return Vt(e,this,r)})}),ls=Ei(function(e,t){var n=On(t,Po(ls));return Co(e,T,o,t,n)}),fs=Ei(function(e,t){var n=On(t,Po(fs));return Co(e,E,o,t,n)}),ps=Io(function(e,t){return Co(e,C,o,o,o,t)});function ds(e,t){return e===t||e!=e&&t!=t}var hs=bo(Zr),vs=bo(function(e,t){return e>=t}),gs=ii(function(){return arguments}())?ii:function(e){return Os(e)&&lt.call(e,"callee")&&!jt.call(e,"callee")},ms=r.isArray,ys=Mt?mn(Mt):function(e){return Os(e)&&Jr(e)==ue};function _s(e){return null!=e&&As(e.length)&&!xs(e)}function bs(e){return Os(e)&&_s(e)}var ws=Wn||Bu,Ts=Ft?mn(Ft):function(e){return Os(e)&&Jr(e)==V};function Es(e){if(!Os(e))return!1;var t=Jr(e);return t==K||t==z||"string"==typeof e.message&&"string"==typeof e.name&&!ks(e)}function xs(e){if(!Ss(e))return!1;var t=Jr(e);return t==G||t==X||t==B||t==ee}function Cs(e){return"number"==typeof e&&e==Ws(e)}function As(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=j}function Ss(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Os(e){return null!=e&&"object"==typeof e}var Ds=Wt?mn(Wt):function(e){return Os(e)&&qo(e)==Q};function Is(e){return"number"==typeof e||Os(e)&&Jr(e)==Y}function ks(e){if(!Os(e)||Jr(e)!=Z)return!1;var t=kt(e);if(null===t)return!0;var n=lt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==ht}var Ns=qt?mn(qt):function(e){return Os(e)&&Jr(e)==te};var Ls=Bt?mn(Bt):function(e){return Os(e)&&qo(e)==ne};function js(e){return"string"==typeof e||!ms(e)&&Os(e)&&Jr(e)==re}function Ps(e){return"symbol"==typeof e||Os(e)&&Jr(e)==ie}var Rs=Ut?mn(Ut):function(e){return Os(e)&&As(e.length)&&!!At[Jr(e)]};var $s=bo(fi),Hs=bo(function(e,t){return e<=t});function Ms(e){if(!e)return[];if(_s(e))return js(e)?Nn(e):no(e);if(Ht&&e[Ht])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ht]());var t=qo(e);return(t==Q?An:t==ne?Dn:du)(e)}function Fs(e){return e?(e=Bs(e))===L||e===-L?(e<0?-1:1)*P:e==e?e:0:0===e?e:0}function Ws(e){var t=Fs(e),n=t%1;return t==t?n?t-n:t:0}function qs(e){return e?jr(Ws(e),0,$):0}function Bs(e){if("number"==typeof e)return e;if(Ps(e))return R;if(Ss(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ss(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(je,"");var n=Ve.test(e);return n||Ke.test(e)?It(e.slice(2),n?2:8):Ue.test(e)?R:+e}function Us(e){return ro(e,ou(e))}function Vs(e){return null==e?"":Ri(e)}var zs=oo(function(e,t){if(Yo(t)||_s(t))ro(t,iu(t),e);else for(var n in t)lt.call(t,n)&&Or(e,n,t[n])}),Ks=oo(function(e,t){ro(t,ou(t),e)}),Gs=oo(function(e,t,n,r){ro(t,ou(t),e,r)}),Xs=oo(function(e,t,n,r){ro(t,iu(t),e,r)}),Qs=Io(Lr);var Ys=Ei(function(e,t){e=tt(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&Ko(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],s=ou(a),u=-1,c=s.length;++u<c;){var l=s[u],f=e[l];(f===o||ds(f,st[l])&&!lt.call(e,l))&&(e[l]=a[l])}return e}),Js=Ei(function(e){return e.push(o,So),Vt(su,o,e)});function Zs(e,t,n){var r=null==e?o:Qr(e,t);return r===o?n:r}function eu(e,t){return null!=e&&Bo(e,t,ti)}var tu=vo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},Su(Iu)),nu=vo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),lt.call(e,t)?e[t].push(n):e[t]=[n]},Ro),ru=Ei(ri);function iu(e){return _s(e)?Er(e):ci(e)}function ou(e){return _s(e)?Er(e,!0):li(e)}var au=oo(function(e,t,n){vi(e,t,n)}),su=oo(function(e,t,n,r){vi(e,t,n,r)}),uu=Io(function(e,t){var n={};if(null==e)return n;var r=!1;t=Zt(t,function(t){return t=zi(t,e),r||(r=t.length>1),t}),ro(e,No(e),n),r&&(n=Pr(n,p|d|h,Oo));for(var i=t.length;i--;)Hi(n,t[i]);return n});var cu=Io(function(e,t){return null==e?{}:function(e,t){return yi(e,t,function(t,n){return eu(e,n)})}(e,t)});function lu(e,t){if(null==e)return{};var n=Zt(No(e),function(e){return[e]});return t=Ro(t),yi(e,n,function(e,n){return t(e,n[0])})}var fu=xo(iu),pu=xo(ou);function du(e){return null==e?[]:yn(e,iu(e))}var hu=co(function(e,t,n){return t=t.toLowerCase(),e+(n?vu(t):t)});function vu(e){return Eu(Vs(e).toLowerCase())}function gu(e){return(e=Vs(e))&&e.replace(Xe,Tn).replace(_t,"")}var mu=co(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yu=co(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),_u=uo("toLowerCase");var bu=co(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wu=co(function(e,t,n){return e+(n?" ":"")+Eu(t)});var Tu=co(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Eu=uo("toUpperCase");function xu(e,t,n){return e=Vs(e),(t=n?o:t)===o?function(e){return Et.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(Fe)||[]}(e):e.match(t)||[]}var Cu=Ei(function(e,t){try{return Vt(e,o,t)}catch(e){return Es(e)?e:new Je(e)}}),Au=Io(function(e,t){return Kt(t,function(t){t=la(t),Nr(e,t,ns(e[t],e))}),e});function Su(e){return function(){return e}}var Ou=po(),Du=po(!0);function Iu(e){return e}function ku(e){return ui("function"==typeof e?e:Pr(e,p))}var Nu=Ei(function(e,t){return function(n){return ri(n,e,t)}}),Lu=Ei(function(e,t){return function(n){return ri(e,n,t)}});function ju(e,t,n){var r=iu(t),i=Xr(t,r);null!=n||Ss(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=Xr(t,iu(t)));var o=!(Ss(n)&&"chain"in n&&!n.chain),a=xs(e);return Kt(i,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=no(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Pu(){}var Ru=mo(Zt),$u=mo(Xt),Hu=mo(rn);function Mu(e){return Go(e)?pn(la(e)):function(e){return function(t){return Qr(t,e)}}(e)}var Fu=_o(),Wu=_o(!0);function qu(){return[]}function Bu(){return!1}var Uu=go(function(e,t){return e+t},0),Vu=To("ceil"),zu=go(function(e,t){return e/t},1),Ku=To("floor");var Gu,Xu=go(function(e,t){return e*t},1),Qu=To("round"),Yu=go(function(e,t){return e-t},0);return dr.after=function(e,t){if("function"!=typeof t)throw new it(u);return e=Ws(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=es,dr.assign=zs,dr.assignIn=Ks,dr.assignInWith=Gs,dr.assignWith=Xs,dr.at=Qs,dr.before=ts,dr.bind=ns,dr.bindAll=Au,dr.bindKey=rs,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return ms(e)?e:[e]},dr.chain=Ma,dr.chunk=function(e,t,n){t=(n?Ko(e,t,n):t===o)?1:Vn(Ws(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,s=0,u=r(Hn(i/t));a<i;)u[s++]=Ii(e,a,a+=t);return u},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return en(ms(n)?no(n):[n],Ur(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Ro();return e=t?Zt(e,function(e){if("function"!=typeof e[1])throw new it(u);return[n(e[0]),e[1]]}):[],Ei(function(n){for(var r=-1;++r<t;){var i=e[r];if(Vt(i[0],this,n))return Vt(i[1],this,n)}})},dr.conforms=function(e){return function(e){var t=iu(e);return function(n){return Rr(n,e,t)}}(Pr(e,p))},dr.constant=Su,dr.countBy=qa,dr.create=function(e,t){var n=hr(e);return null==t?n:kr(n,t)},dr.curry=function e(t,n,r){var i=Co(t,b,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.curryRight=function e(t,n,r){var i=Co(t,w,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.debounce=is,dr.defaults=Ys,dr.defaultsDeep=Js,dr.defer=os,dr.delay=as,dr.difference=da,dr.differenceBy=ha,dr.differenceWith=va,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Ii(e,(t=n||t===o?1:Ws(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Ii(e,0,(t=r-(t=n||t===o?1:Ws(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!0):[]},dr.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&Ko(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=Ws(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Ws(r))<0&&(r+=i),r=n>r?0:qs(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(ms(e)?Qt:Br)(e,Ro(t,3))},dr.flatMap=function(e,t){return Ur(Qa(e,t),1)},dr.flatMapDeep=function(e,t){return Ur(Qa(e,t),L)},dr.flatMapDepth=function(e,t,n){return n=n===o?1:Ws(n),Ur(Qa(e,t),n)},dr.flatten=ya,dr.flattenDeep=function(e){return null!=e&&e.length?Ur(e,L):[]},dr.flattenDepth=function(e,t){return null!=e&&e.length?Ur(e,t=t===o?1:Ws(t)):[]},dr.flip=function(e){return Co(e,A)},dr.flow=Ou,dr.flowRight=Du,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},dr.functions=function(e){return null==e?[]:Xr(e,iu(e))},dr.functionsIn=function(e){return null==e?[]:Xr(e,ou(e))},dr.groupBy=Ka,dr.initial=function(e){return null!=e&&e.length?Ii(e,0,-1):[]},dr.intersection=ba,dr.intersectionBy=wa,dr.intersectionWith=Ta,dr.invert=tu,dr.invertBy=nu,dr.invokeMap=Ga,dr.iteratee=ku,dr.keyBy=Xa,dr.keys=iu,dr.keysIn=ou,dr.map=Qa,dr.mapKeys=function(e,t){var n={};return t=Ro(t,3),Kr(e,function(e,r,i){Nr(n,t(e,r,i),e)}),n},dr.mapValues=function(e,t){var n={};return t=Ro(t,3),Kr(e,function(e,r,i){Nr(n,r,t(e,r,i))}),n},dr.matches=function(e){return di(Pr(e,p))},dr.matchesProperty=function(e,t){return hi(e,Pr(t,p))},dr.memoize=ss,dr.merge=au,dr.mergeWith=su,dr.method=Nu,dr.methodOf=Lu,dr.mixin=ju,dr.negate=us,dr.nthArg=function(e){return e=Ws(e),Ei(function(t){return gi(t,e)})},dr.omit=uu,dr.omitBy=function(e,t){return lu(e,us(Ro(t)))},dr.once=function(e){return ts(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(ms(t)||(t=null==t?[]:[t]),ms(n=r?o:n)||(n=null==n?[]:[n]),mi(e,t,n))},dr.over=Ru,dr.overArgs=cs,dr.overEvery=$u,dr.overSome=Hu,dr.partial=ls,dr.partialRight=fs,dr.partition=Ya,dr.pick=cu,dr.pickBy=lu,dr.property=Mu,dr.propertyOf=function(e){return function(t){return null==e?o:Qr(e,t)}},dr.pull=xa,dr.pullAll=Ca,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?_i(e,t,Ro(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?_i(e,t,o,n):e},dr.pullAt=Aa,dr.range=Fu,dr.rangeRight=Wu,dr.rearg=ps,dr.reject=function(e,t){return(ms(e)?Qt:Br)(e,us(Ro(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=Ro(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return bi(e,i),n},dr.rest=function(e,t){if("function"!=typeof e)throw new it(u);return Ei(e,t=t===o?t:Ws(t))},dr.reverse=Sa,dr.sampleSize=function(e,t,n){return t=(n?Ko(e,t,n):t===o)?1:Ws(t),(ms(e)?Cr:Ci)(e,t)},dr.set=function(e,t,n){return null==e?e:Ai(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Ai(e,t,n,r)},dr.shuffle=function(e){return(ms(e)?Ar:Di)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Ko(e,t,n)?(t=0,n=r):(t=null==t?0:Ws(t),n=n===o?r:Ws(n)),Ii(e,t,n)):[]},dr.sortBy=Ja,dr.sortedUniq=function(e){return e&&e.length?ji(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?ji(e,Ro(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Ko(e,t,n)&&(t=n=o),(n=n===o?$:n>>>0)?(e=Vs(e))&&("string"==typeof t||null!=t&&!Ns(t))&&!(t=Ri(t))&&Cn(e)?Gi(Nn(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new it(u);return t=null==t?0:Vn(Ws(t),0),Ei(function(n){var r=n[t],i=Gi(n,0,t);return r&&en(i,r),Vt(e,this,i)})},dr.tail=function(e){var t=null==e?0:e.length;return t?Ii(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?Ii(e,0,(t=n||t===o?1:Ws(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Ii(e,(t=r-(t=n||t===o?1:Ws(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new it(u);return Ss(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),is(e,t,{leading:r,maxWait:t,trailing:i})},dr.thru=Fa,dr.toArray=Ms,dr.toPairs=fu,dr.toPairsIn=pu,dr.toPath=function(e){return ms(e)?Zt(e,la):Ps(e)?[e]:no(ca(Vs(e)))},dr.toPlainObject=Us,dr.transform=function(e,t,n){var r=ms(e),i=r||ws(e)||Rs(e);if(t=Ro(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Ss(e)&&xs(o)?hr(kt(e)):{}}return(i?Kt:Kr)(e,function(e,r,i){return t(n,e,r,i)}),n},dr.unary=function(e){return es(e,1)},dr.union=Oa,dr.unionBy=Da,dr.unionWith=Ia,dr.uniq=function(e){return e&&e.length?$i(e):[]},dr.uniqBy=function(e,t){return e&&e.length?$i(e,Ro(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?$i(e,o,t):[]},dr.unset=function(e,t){return null==e||Hi(e,t)},dr.unzip=ka,dr.unzipWith=Na,dr.update=function(e,t,n){return null==e?e:Mi(e,t,Vi(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Mi(e,t,Vi(n),r)},dr.values=du,dr.valuesIn=function(e){return null==e?[]:yn(e,ou(e))},dr.without=La,dr.words=xu,dr.wrap=function(e,t){return ls(Vi(t),e)},dr.xor=ja,dr.xorBy=Pa,dr.xorWith=Ra,dr.zip=$a,dr.zipObject=function(e,t){return Bi(e||[],t||[],Or)},dr.zipObjectDeep=function(e,t){return Bi(e||[],t||[],Ai)},dr.zipWith=Ha,dr.entries=fu,dr.entriesIn=pu,dr.extend=Ks,dr.extendWith=Gs,ju(dr,dr),dr.add=Uu,dr.attempt=Cu,dr.camelCase=hu,dr.capitalize=vu,dr.ceil=Vu,dr.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=Bs(n))==n?n:0),t!==o&&(t=(t=Bs(t))==t?t:0),jr(Bs(e),t,n)},dr.clone=function(e){return Pr(e,h)},dr.cloneDeep=function(e){return Pr(e,p|h)},dr.cloneDeepWith=function(e,t){return Pr(e,p|h,t="function"==typeof t?t:o)},dr.cloneWith=function(e,t){return Pr(e,h,t="function"==typeof t?t:o)},dr.conformsTo=function(e,t){return null==t||Rr(e,t,iu(t))},dr.deburr=gu,dr.defaultTo=function(e,t){return null==e||e!=e?t:e},dr.divide=zu,dr.endsWith=function(e,t,n){e=Vs(e),t=Ri(t);var r=e.length,i=n=n===o?r:jr(Ws(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},dr.eq=ds,dr.escape=function(e){return(e=Vs(e))&&Ce.test(e)?e.replace(Ee,En):e},dr.escapeRegExp=function(e){return(e=Vs(e))&&Le.test(e)?e.replace(Ne,"\\$&"):e},dr.every=function(e,t,n){var r=ms(e)?Xt:Wr;return n&&Ko(e,t,n)&&(t=o),r(e,Ro(t,3))},dr.find=Ba,dr.findIndex=ga,dr.findKey=function(e,t){return an(e,Ro(t,3),Kr)},dr.findLast=Ua,dr.findLastIndex=ma,dr.findLastKey=function(e,t){return an(e,Ro(t,3),Gr)},dr.floor=Ku,dr.forEach=Va,dr.forEachRight=za,dr.forIn=function(e,t){return null==e?e:Vr(e,Ro(t,3),ou)},dr.forInRight=function(e,t){return null==e?e:zr(e,Ro(t,3),ou)},dr.forOwn=function(e,t){return e&&Kr(e,Ro(t,3))},dr.forOwnRight=function(e,t){return e&&Gr(e,Ro(t,3))},dr.get=Zs,dr.gt=hs,dr.gte=vs,dr.has=function(e,t){return null!=e&&Bo(e,t,ei)},dr.hasIn=eu,dr.head=_a,dr.identity=Iu,dr.includes=function(e,t,n,r){e=_s(e)?e:du(e),n=n&&!r?Ws(n):0;var i=e.length;return n<0&&(n=Vn(i+n,0)),js(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&un(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Ws(n);return i<0&&(i=Vn(r+i,0)),un(e,t,i)},dr.inRange=function(e,t,n){return t=Fs(t),n===o?(n=t,t=0):n=Fs(n),function(e,t,n){return e>=zn(t,n)&&e<Vn(t,n)}(e=Bs(e),t,n)},dr.invoke=ru,dr.isArguments=gs,dr.isArray=ms,dr.isArrayBuffer=ys,dr.isArrayLike=_s,dr.isArrayLikeObject=bs,dr.isBoolean=function(e){return!0===e||!1===e||Os(e)&&Jr(e)==U},dr.isBuffer=ws,dr.isDate=Ts,dr.isElement=function(e){return Os(e)&&1===e.nodeType&&!ks(e)},dr.isEmpty=function(e){if(null==e)return!0;if(_s(e)&&(ms(e)||"string"==typeof e||"function"==typeof e.splice||ws(e)||Rs(e)||gs(e)))return!e.length;var t=qo(e);if(t==Q||t==ne)return!e.size;if(Yo(e))return!ci(e).length;for(var n in e)if(lt.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return oi(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?oi(e,t,o,n):!!r},dr.isError=Es,dr.isFinite=function(e){return"number"==typeof e&&qn(e)},dr.isFunction=xs,dr.isInteger=Cs,dr.isLength=As,dr.isMap=Ds,dr.isMatch=function(e,t){return e===t||ai(e,t,Ho(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,ai(e,t,Ho(t),n)},dr.isNaN=function(e){return Is(e)&&e!=+e},dr.isNative=function(e){if(Qo(e))throw new Je(s);return si(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Is,dr.isObject=Ss,dr.isObjectLike=Os,dr.isPlainObject=ks,dr.isRegExp=Ns,dr.isSafeInteger=function(e){return Cs(e)&&e>=-j&&e<=j},dr.isSet=Ls,dr.isString=js,dr.isSymbol=Ps,dr.isTypedArray=Rs,dr.isUndefined=function(e){return e===o},dr.isWeakMap=function(e){return Os(e)&&qo(e)==ae},dr.isWeakSet=function(e){return Os(e)&&Jr(e)==se},dr.join=function(e,t){return null==e?"":Bn.call(e,t)},dr.kebabCase=mu,dr.last=Ea,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Ws(n))<0?Vn(r+i,0):zn(i,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):sn(e,ln,i,!0)},dr.lowerCase=yu,dr.lowerFirst=_u,dr.lt=$s,dr.lte=Hs,dr.max=function(e){return e&&e.length?qr(e,Iu,Zr):o},dr.maxBy=function(e,t){return e&&e.length?qr(e,Ro(t,2),Zr):o},dr.mean=function(e){return fn(e,Iu)},dr.meanBy=function(e,t){return fn(e,Ro(t,2))},dr.min=function(e){return e&&e.length?qr(e,Iu,fi):o},dr.minBy=function(e,t){return e&&e.length?qr(e,Ro(t,2),fi):o},dr.stubArray=qu,dr.stubFalse=Bu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Xu,dr.nth=function(e,t){return e&&e.length?gi(e,Ws(t)):o},dr.noConflict=function(){return Lt._===this&&(Lt._=vt),this},dr.noop=Pu,dr.now=Za,dr.pad=function(e,t,n){e=Vs(e);var r=(t=Ws(t))?kn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return yo(Mn(i),n)+e+yo(Hn(i),n)},dr.padEnd=function(e,t,n){e=Vs(e);var r=(t=Ws(t))?kn(e):0;return t&&r<t?e+yo(t-r,n):e},dr.padStart=function(e,t,n){e=Vs(e);var r=(t=Ws(t))?kn(e):0;return t&&r<t?yo(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Gn(Vs(e).replace(Pe,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Ko(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=Fs(e),t===o?(t=e,e=0):t=Fs(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=Xn();return zn(e+i*(t-e+Dt("1e-"+((i+"").length-1))),t)}return wi(e,t)},dr.reduce=function(e,t,n){var r=ms(e)?tn:hn,i=arguments.length<3;return r(e,Ro(t,4),n,i,Mr)},dr.reduceRight=function(e,t,n){var r=ms(e)?nn:hn,i=arguments.length<3;return r(e,Ro(t,4),n,i,Fr)},dr.repeat=function(e,t,n){return t=(n?Ko(e,t,n):t===o)?1:Ws(t),Ti(Vs(e),t)},dr.replace=function(){var e=arguments,t=Vs(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,i=(t=zi(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[la(t[r])];a===o&&(r=i,a=n),e=xs(a)?a.call(e):a}return e},dr.round=Qu,dr.runInContext=e,dr.sample=function(e){return(ms(e)?xr:xi)(e)},dr.size=function(e){if(null==e)return 0;if(_s(e))return js(e)?kn(e):e.length;var t=qo(e);return t==Q||t==ne?e.size:ci(e).length},dr.snakeCase=bu,dr.some=function(e,t,n){var r=ms(e)?rn:ki;return n&&Ko(e,t,n)&&(t=o),r(e,Ro(t,3))},dr.sortedIndex=function(e,t){return Ni(e,t)},dr.sortedIndexBy=function(e,t,n){return Li(e,t,Ro(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Ni(e,t);if(r<n&&ds(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return Ni(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return Li(e,t,Ro(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Ni(e,t,!0)-1;if(ds(e[n],t))return n}return-1},dr.startCase=wu,dr.startsWith=function(e,t,n){return e=Vs(e),n=null==n?0:jr(Ws(n),0,e.length),t=Ri(t),e.slice(n,n+t.length)==t},dr.subtract=Yu,dr.sum=function(e){return e&&e.length?vn(e,Iu):0},dr.sumBy=function(e,t){return e&&e.length?vn(e,Ro(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Ko(e,t,n)&&(t=o),e=Vs(e),t=Gs({},t,r,Ao);var i,a,s=Gs({},t.imports,r.imports,Ao),u=iu(s),c=yn(s,u),l=0,f=t.interpolate||Qe,p="__p += '",d=nt((t.escape||Qe).source+"|"+f.source+"|"+(f===Oe?qe:Qe).source+"|"+(t.evaluate||Qe).source+"|$","g"),h="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++Ct+"]")+"\n";e.replace(d,function(t,n,r,o,s,u){return r||(r=o),p+=e.slice(l,u).replace(Ye,xn),n&&(i=!0,p+="' +\n__e("+n+") +\n'"),s&&(a=!0,p+="';\n"+s+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+t.length,t}),p+="';\n";var v=t.variable;v||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(_e,""):p).replace(be,"$1").replace(we,"$1;"),p="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Cu(function(){return Ze(u,h+"return "+p).apply(o,c)});if(g.source=p,Es(g))throw g;return g},dr.times=function(e,t){if((e=Ws(e))<1||e>j)return[];var n=$,r=zn(e,$);t=Ro(t),e-=$;for(var i=gn(r,t);++n<e;)t(n);return i},dr.toFinite=Fs,dr.toInteger=Ws,dr.toLength=qs,dr.toLower=function(e){return Vs(e).toLowerCase()},dr.toNumber=Bs,dr.toSafeInteger=function(e){return e?jr(Ws(e),-j,j):0===e?e:0},dr.toString=Vs,dr.toUpper=function(e){return Vs(e).toUpperCase()},dr.trim=function(e,t,n){if((e=Vs(e))&&(n||t===o))return e.replace(je,"");if(!e||!(t=Ri(t)))return e;var r=Nn(e),i=Nn(t);return Gi(r,bn(r,i),wn(r,i)+1).join("")},dr.trimEnd=function(e,t,n){if((e=Vs(e))&&(n||t===o))return e.replace(Re,"");if(!e||!(t=Ri(t)))return e;var r=Nn(e);return Gi(r,0,wn(r,Nn(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=Vs(e))&&(n||t===o))return e.replace(Pe,"");if(!e||!(t=Ri(t)))return e;var r=Nn(e);return Gi(r,bn(r,Nn(t))).join("")},dr.truncate=function(e,t){var n=S,r=O;if(Ss(t)){var i="separator"in t?t.separator:i;n="length"in t?Ws(t.length):n,r="omission"in t?Ri(t.omission):r}var a=(e=Vs(e)).length;if(Cn(e)){var s=Nn(e);a=s.length}if(n>=a)return e;var u=n-kn(r);if(u<1)return r;var c=s?Gi(s,0,u).join(""):e.slice(0,u);if(i===o)return c+r;if(s&&(u+=c.length-u),Ns(i)){if(e.slice(u).search(i)){var l,f=c;for(i.global||(i=nt(i.source,Vs(Be.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var p=l.index;c=c.slice(0,p===o?u:p)}}else if(e.indexOf(Ri(i),u)!=u){var d=c.lastIndexOf(i);d>-1&&(c=c.slice(0,d))}return c+r},dr.unescape=function(e){return(e=Vs(e))&&xe.test(e)?e.replace(Te,Ln):e},dr.uniqueId=function(e){var t=++ft;return Vs(e)+t},dr.upperCase=Tu,dr.upperFirst=Eu,dr.each=Va,dr.eachRight=za,dr.first=_a,ju(dr,(Gu={},Kr(dr,function(e,t){lt.call(dr.prototype,t)||(Gu[t]=e)}),Gu),{chain:!1}),dr.VERSION="4.17.11",Kt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){dr[e].placeholder=dr}),Kt(["drop","take"],function(e,t){mr.prototype[e]=function(n){n=n===o?1:Vn(Ws(n),0);var r=this.__filtered__&&!t?new mr(this):this.clone();return r.__filtered__?r.__takeCount__=zn(n,r.__takeCount__):r.__views__.push({size:zn(n,$),type:e+(r.__dir__<0?"Right":"")}),r},mr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Kt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==k||3==n;mr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Ro(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Kt(["head","last"],function(e,t){var n="take"+(t?"Right":"");mr.prototype[e]=function(){return this[n](1).value()[0]}}),Kt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");mr.prototype[e]=function(){return this.__filtered__?new mr(this):this[n](1)}}),mr.prototype.compact=function(){return this.filter(Iu)},mr.prototype.find=function(e){return this.filter(e).head()},mr.prototype.findLast=function(e){return this.reverse().find(e)},mr.prototype.invokeMap=Ei(function(e,t){return"function"==typeof e?new mr(this):this.map(function(n){return ri(n,e,t)})}),mr.prototype.reject=function(e){return this.filter(us(Ro(e)))},mr.prototype.slice=function(e,t){e=Ws(e);var n=this;return n.__filtered__&&(e>0||t<0)?new mr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=Ws(t))<0?n.dropRight(-t):n.take(t-e)),n)},mr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},mr.prototype.toArray=function(){return this.take($)},Kr(mr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=dr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(dr.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,u=t instanceof mr,c=s[0],l=u||ms(t),f=function(e){var t=i.apply(dr,en([e],s));return r&&p?t[0]:t};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var p=this.__chain__,d=!!this.__actions__.length,h=a&&!p,v=u&&!d;if(!a&&l){t=v?t:new mr(this);var g=e.apply(t,s);return g.__actions__.push({func:Fa,args:[f],thisArg:o}),new gr(g,p)}return h&&v?e.apply(this,s):(g=this.thru(f),h?r?g.value()[0]:g.value():g)})}),Kt(["pop","push","shift","sort","splice","unshift"],function(e){var t=ot[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(ms(i)?i:[],e)}return this[n](function(n){return t.apply(ms(n)?n:[],e)})}}),Kr(mr.prototype,function(e,t){var n=dr[t];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:t,func:n})}}),ir[ho(o,y).name]=[{name:"wrapper",func:o}],mr.prototype.clone=function(){var e=new mr(this.__wrapped__);return e.__actions__=no(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=no(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=no(this.__views__),e},mr.prototype.reverse=function(){if(this.__filtered__){var e=new mr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},mr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=ms(e),r=t<0,i=n?e.length:0,o=function(e,t,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=zn(t,e+a);break;case"takeRight":e=Vn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,f=l.length,p=0,d=zn(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return Wi(e,this.__actions__);var h=[];e:for(;u--&&p<d;){for(var v=-1,g=e[c+=t];++v<f;){var m=l[v],y=m.iteratee,_=m.type,b=y(g);if(_==N)g=b;else if(!b){if(_==k)continue e;break e}}h[p++]=g}return h},dr.prototype.at=Wa,dr.prototype.chain=function(){return Ma(this)},dr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===o&&(this.__values__=Ms(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof vr;){var r=pa(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof mr){var t=e;return this.__actions__.length&&(t=new mr(this)),(t=t.reverse()).__actions__.push({func:Fa,args:[Sa],thisArg:o}),new gr(t,this.__chain__)}return this.thru(Sa)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Wi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,Ht&&(dr.prototype[Ht]=function(){return this}),dr}();Lt._=jn,(i=function(){return jn}.call(t,n,t,r))===o||(r.exports=i)}).call(this)}).call(this,n(1),n(15)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){!function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){o(e,t,n[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var s=function(e){var t="transitionend";function n(t){var n=this,i=!1;return e(this).one(r.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||r.triggerTransitionEnd(n)},t),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=e.getAttribute("href")||"");try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),r=parseFloat(n);return r?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],a=t[i],s=a&&r.isElement(a)?"element":(u=a,{}.toString.call(u).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".')}var u}};return e.fn.emulateTransitionEnd=n,e.event.special[r.TRANSITION_END]={bindType:t,delegateType:t,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},r}(t),u=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},r={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){var t=this._element;e&&(t=this._getRootElement(e));var n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var n=s.getSelectorFromElement(t),i=!1;return n&&(i=document.querySelector(n)),i||(i=e(t).closest("."+r.ALERT)[0]),i},o._triggerCloseEvent=function(t){var r=e.Event(n.CLOSE);return e(t).trigger(r),r},o._removeElement=function(t){var n=this;if(e(t).removeClass(r.SHOW),e(t).hasClass(r.FADE)){var i=s.getTransitionDurationFromElement(t);e(t).one(s.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(i)}else this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),c=function(e){var t="button",n=e.fn[t],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},s=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(o.DATA_TOGGLE)[0];if(i){var a=this._element.querySelector(o.INPUT);if(a){if("radio"===a.type)if(a.checked&&this._element.classList.contains(r.ACTIVE))t=!1;else{var s=i.querySelector(o.ACTIVE);s&&e(s).removeClass(r.ACTIVE)}if(t){if(a.hasAttribute("disabled")||i.hasAttribute("disabled")||a.classList.contains("disabled")||i.classList.contains("disabled"))return;a.checked=!this._element.classList.contains(r.ACTIVE),e(a).trigger("change")}a.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(r.ACTIVE)),t&&e(this._element).toggleClass(r.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()})},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(a.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(r.BUTTON)||(n=e(n).closest(o.BUTTON)),s._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(o.BUTTON)[0];e(n).toggleClass(r.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=s._jQueryInterface,e.fn[t].Constructor=s,e.fn[t].noConflict=function(){return e.fn[t]=n,s._jQueryInterface},s}(t),l=function(e){var t="carousel",n="bs.carousel",r="."+n,o=e.fn[t],u={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},l={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},d={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function o(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=this._element.querySelector(d.INDICATORS),this._addEventListeners()}var h=o.prototype;return h.next=function(){this._isSliding||this._slide(l.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(l.PREV)},h.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(d.NEXT_PREV)&&(s.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=this._element.querySelector(d.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(f.SLID,function(){return n.to(t)});else{if(r===t)return this.pause(),void this.cycle();var i=t>r?l.NEXT:l.PREV;this._slide(i,this._items[t])}},h.dispose=function(){e(this._element).off(r),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=a({},u,e),s.typeCheckConfig(t,e,c),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(f.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(f.MOUSEENTER,function(e){return t.pause(e)}).on(f.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(f.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(d.ITEM)):[],this._items.indexOf(e)},h._getItemByDirection=function(e,t){var n=e===l.NEXT,r=e===l.PREV,i=this._getItemIndex(t),o=this._items.length-1,a=r&&0===i||n&&i===o;if(a&&!this._config.wrap)return t;var s=e===l.PREV?-1:1,u=(i+s)%this._items.length;return-1===u?this._items[this._items.length-1]:this._items[u]},h._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(d.ACTIVE_ITEM)),o=e.Event(f.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(d.ACTIVE));e(n).removeClass(p.ACTIVE);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(p.ACTIVE)}},h._slide=function(t,n){var r,i,o,a=this,u=this._element.querySelector(d.ACTIVE_ITEM),c=this._getItemIndex(u),h=n||u&&this._getItemByDirection(t,u),v=this._getItemIndex(h),g=Boolean(this._interval);if(t===l.NEXT?(r=p.LEFT,i=p.NEXT,o=l.LEFT):(r=p.RIGHT,i=p.PREV,o=l.RIGHT),h&&e(h).hasClass(p.ACTIVE))this._isSliding=!1;else{var m=this._triggerSlideEvent(h,o);if(!m.isDefaultPrevented()&&u&&h){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(f.SLID,{relatedTarget:h,direction:o,from:c,to:v});if(e(this._element).hasClass(p.SLIDE)){e(h).addClass(i),s.reflow(h),e(u).addClass(r),e(h).addClass(r);var _=s.getTransitionDurationFromElement(u);e(u).one(s.TRANSITION_END,function(){e(h).removeClass(r+" "+i).addClass(p.ACTIVE),e(u).removeClass(p.ACTIVE+" "+i+" "+r),a._isSliding=!1,setTimeout(function(){return e(a._element).trigger(y)},0)}).emulateTransitionEnd(_)}else e(u).removeClass(p.ACTIVE),e(h).addClass(p.ACTIVE),this._isSliding=!1,e(this._element).trigger(y);g&&this.cycle()}}},o._jQueryInterface=function(t){return this.each(function(){var r=e(this).data(n),i=a({},u,e(this).data());"object"==typeof t&&(i=a({},i,t));var s="string"==typeof t?t:i.slide;if(r||(r=new o(this,i),e(this).data(n,r)),"number"==typeof t)r.to(t);else if("string"==typeof s){if(void 0===r[s])throw new TypeError('No method named "'+s+'"');r[s]()}else i.interval&&(r.pause(),r.cycle())})},o._dataApiClickHandler=function(t){var r=s.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(p.CAROUSEL)){var u=a({},e(i).data(),e(this).data()),c=this.getAttribute("data-slide-to");c&&(u.interval=!1),o._jQueryInterface.call(e(i),u),c&&e(i).data(n).to(c),t.preventDefault()}}},i(o,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}}]),o}();return e(document).on(f.CLICK_DATA_API,d.DATA_SLIDE,h._dataApiClickHandler),e(window).on(f.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(d.DATA_RIDE)),n=0,r=t.length;n<r;n++){var i=e(t[n]);h._jQueryInterface.call(i,i.data())}}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=o,h._jQueryInterface},h}(t),f=function(e){var t="collapse",n="bs.collapse",r=e.fn[t],o={toggle:!0,parent:""},u={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},l={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},f={WIDTH:"width",HEIGHT:"height"},p={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},d=function(){function r(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=[].slice.call(document.querySelectorAll(p.DATA_TOGGLE)),i=0,o=r.length;i<o;i++){var a=r[i],u=s.getSelectorFromElement(a),c=[].slice.call(document.querySelectorAll(u)).filter(function(e){return e===t});null!==u&&c.length>0&&(this._selector=u,this._triggerArray.push(a))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var d=r.prototype;return d.toggle=function(){e(this._element).hasClass(l.SHOW)?this.hide():this.show()},d.show=function(){var t,i,o=this;if(!(this._isTransitioning||e(this._element).hasClass(l.SHOW)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(p.ACTIVES)).filter(function(e){return e.getAttribute("data-parent")===o._config.parent})).length&&(t=null),t&&(i=e(t).not(this._selector).data(n))&&i._isTransitioning))){var a=e.Event(c.SHOW);if(e(this._element).trigger(a),!a.isDefaultPrevented()){t&&(r._jQueryInterface.call(e(t).not(this._selector),"hide"),i||e(t).data(n,null));var u=this._getDimension();e(this._element).removeClass(l.COLLAPSE).addClass(l.COLLAPSING),this._element.style[u]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(l.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var f=u[0].toUpperCase()+u.slice(1),d="scroll"+f,h=s.getTransitionDurationFromElement(this._element);e(this._element).one(s.TRANSITION_END,function(){e(o._element).removeClass(l.COLLAPSING).addClass(l.COLLAPSE).addClass(l.SHOW),o._element.style[u]="",o.setTransitioning(!1),e(o._element).trigger(c.SHOWN)}).emulateTransitionEnd(h),this._element.style[u]=this._element[d]+"px"}}},d.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(l.SHOW)){var n=e.Event(c.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",s.reflow(this._element),e(this._element).addClass(l.COLLAPSING).removeClass(l.COLLAPSE).removeClass(l.SHOW);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var a=this._triggerArray[o],u=s.getSelectorFromElement(a);if(null!==u){var f=e([].slice.call(document.querySelectorAll(u)));f.hasClass(l.SHOW)||e(a).addClass(l.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[r]="";var p=s.getTransitionDurationFromElement(this._element);e(this._element).one(s.TRANSITION_END,function(){t.setTransitioning(!1),e(t._element).removeClass(l.COLLAPSING).addClass(l.COLLAPSE).trigger(c.HIDDEN)}).emulateTransitionEnd(p)}}},d.setTransitioning=function(e){this._isTransitioning=e},d.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},d._getConfig=function(e){return(e=a({},o,e)).toggle=Boolean(e.toggle),s.typeCheckConfig(t,e,u),e},d._getDimension=function(){var t=e(this._element).hasClass(f.WIDTH);return t?f.WIDTH:f.HEIGHT},d._getParent=function(){var t=this,n=null;s.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return e(o).each(function(e,n){t._addAriaAndCollapsedClass(r._getTargetFromElement(n),[n])}),n},d._addAriaAndCollapsedClass=function(t,n){if(t){var r=e(t).hasClass(l.SHOW);n.length&&e(n).toggleClass(l.COLLAPSED,!r).attr("aria-expanded",r)}},r._getTargetFromElement=function(e){var t=s.getSelectorFromElement(e);return t?document.querySelector(t):null},r._jQueryInterface=function(t){return this.each(function(){var i=e(this),s=i.data(n),u=a({},o,i.data(),"object"==typeof t&&t?t:{});if(!s&&u.toggle&&/show|hide/.test(t)&&(u.toggle=!1),s||(s=new r(this,u),i.data(n,s)),"string"==typeof t){if(void 0===s[t])throw new TypeError('No method named "'+t+'"');s[t]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return o}}]),r}();return e(document).on(c.CLICK_DATA_API,p.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var r=e(this),i=s.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(i));e(o).each(function(){var t=e(this),i=t.data(n),o=i?"toggle":r.data();d._jQueryInterface.call(t,o)})}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=r,d._jQueryInterface},d}(t),p=function(e){var t="dropdown",r="bs.dropdown",o="."+r,u=e.fn[t],c=new RegExp("38|40|27"),l={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},f={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},p={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},d={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},v={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=u.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(f.DISABLED)){var t=u._getParentFromElement(this._element),r=e(this._menu).hasClass(f.SHOW);if(u._clearMenus(),!r){var i={relatedTarget:this._element},o=e.Event(l.SHOW,i);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;"parent"===this._config.reference?a=t:s.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(t).addClass(f.POSITION_STATIC),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(p.NAVBAR_NAV).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(f.SHOW),e(t).toggleClass(f.SHOW).trigger(e.Event(l.SHOWN,i))}}}},g.dispose=function(){e.removeData(this._element,r),e(this._element).off(o),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(l.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(n){return n=a({},this.constructor.Default,e(this._element).data(),n),s.typeCheckConfig(t,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(p.MENU))}return this._menu},g._getPlacement=function(){var t=e(this._element.parentNode),n=d.BOTTOM;return t.hasClass(f.DROPUP)?(n=d.TOP,e(this._menu).hasClass(f.MENURIGHT)&&(n=d.TOPEND)):t.hasClass(f.DROPRIGHT)?n=d.RIGHT:t.hasClass(f.DROPLEFT)?n=d.LEFT:e(this._menu).hasClass(f.MENURIGHT)&&(n=d.BOTTOMEND),n},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},u._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r),i="object"==typeof t?t:null;if(n||(n=new u(this,i),e(this).data(r,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},u._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=[].slice.call(document.querySelectorAll(p.DATA_TOGGLE)),i=0,o=n.length;i<o;i++){var a=u._getParentFromElement(n[i]),s=e(n[i]).data(r),c={relatedTarget:n[i]};if(t&&"click"===t.type&&(c.clickEvent=t),s){var d=s._menu;if(e(a).hasClass(f.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(a,t.target))){var h=e.Event(l.HIDE,c);e(a).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),n[i].setAttribute("aria-expanded","false"),e(d).removeClass(f.SHOW),e(a).removeClass(f.SHOW).trigger(e.Event(l.HIDDEN,c)))}}}},u._getParentFromElement=function(e){var t,n=s.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(p.MENU).length)):c.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(f.DISABLED))){var n=u._getParentFromElement(this),r=e(n).hasClass(f.SHOW);if((r||27===t.which&&32===t.which)&&(!r||27!==t.which&&32!==t.which)){var i=[].slice.call(n.querySelectorAll(p.VISIBLE_ITEMS));if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var a=n.querySelector(p.DATA_TOGGLE);e(a).trigger("focus")}e(this).trigger("click")}}},i(u,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return v}}]),u}();return e(document).on(l.KEYDOWN_DATA_API,p.DATA_TOGGLE,g._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,p.MENU,g._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.KEYUP_DATA_API,g._clearMenus).on(l.CLICK_DATA_API,p.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(l.CLICK_DATA_API,p.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=u,g._jQueryInterface},g}(t),d=function(e){var t="modal",n=".bs.modal",r=e.fn.modal,o={backdrop:!0,keyboard:!0,focus:!0,show:!0},u={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},c={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},l={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},p=function(){function r(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(f.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var p=r.prototype;return p.toggle=function(e){return this._isShown?this.hide():this.show(e)},p.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){e(this._element).hasClass(l.FADE)&&(this._isTransitioning=!0);var r=e.Event(c.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(l.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(c.CLICK_DISMISS,f.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(c.MOUSEDOWN_DISMISS,function(){e(n._element).one(c.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},p.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var r=e.Event(c.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(l.FADE);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(c.FOCUSIN),e(this._element).removeClass(l.SHOW),e(this._element).off(c.CLICK_DISMISS),e(this._dialog).off(c.MOUSEDOWN_DISMISS),i){var o=s.getTransitionDurationFromElement(this._element);e(this._element).one(s.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(o)}else this._hideModal()}}},p.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},p.handleUpdate=function(){this._adjustDialog()},p._getConfig=function(e){return e=a({},o,e),s.typeCheckConfig(t,e,u),e},p._showElement=function(t){var n=this,r=e(this._element).hasClass(l.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,r&&s.reflow(this._element),e(this._element).addClass(l.SHOW),this._config.focus&&this._enforceFocus();var i=e.Event(c.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};if(r){var a=s.getTransitionDurationFromElement(this._element);e(this._dialog).one(s.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},p._enforceFocus=function(){var t=this;e(document).off(c.FOCUSIN).on(c.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},p._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(c.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(c.KEYDOWN_DISMISS)},p._setResizeEvent=function(){var t=this;this._isShown?e(window).on(c.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(c.RESIZE)},p._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(l.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(c.HIDDEN)})},p._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},p._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(l.FADE)?l.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=l.BACKDROP,r&&this._backdrop.classList.add(r),e(this._backdrop).appendTo(document.body),e(this._element).on(c.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),r&&s.reflow(this._backdrop),e(this._backdrop).addClass(l.SHOW),!t)return;if(!r)return void t();var i=s.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(s.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(l.SHOW);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(l.FADE)){var a=s.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(s.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else t&&t()},p._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},p._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},p._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},p._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(f.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(f.STICKY_CONTENT));e(n).each(function(n,r){var i=r.style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(r).each(function(n,r){var i=r.style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")});var i=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}},p._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(f.FIXED_CONTENT));e(t).each(function(t,n){var r=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=r||""});var n=[].slice.call(document.querySelectorAll(""+f.STICKY_CONTENT));e(n).each(function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")});var r=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},p._getScrollbarWidth=function(){var e=document.createElement("div");e.className=l.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},r._jQueryInterface=function(t,n){return this.each(function(){var i=e(this).data("bs.modal"),s=a({},o,e(this).data(),"object"==typeof t&&t?t:{});if(i||(i=new r(this,s),e(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}else s.show&&i.show(n)})},i(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return o}}]),r}();return e(document).on(c.CLICK_DATA_API,f.DATA_TOGGLE,function(t){var n,r=this,i=s.getSelectorFromElement(this);i&&(n=document.querySelector(i));var o=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var u=e(n).one(c.SHOW,function(t){t.isDefaultPrevented()||u.one(c.HIDDEN,function(){e(r).is(":visible")&&r.focus()})});p._jQueryInterface.call(e(n),o,this)}),e.fn.modal=p._jQueryInterface,e.fn.modal.Constructor=p,e.fn.modal.noConflict=function(){return e.fn.modal=r,p._jQueryInterface},p}(t),h=function(e){var t="tooltip",r=".bs.tooltip",o=e.fn[t],u=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},l={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},f={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},p={SHOW:"show",OUT:"out"},d={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},h={FADE:"fade",SHOW:"show"},v={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},m=function(){function o(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var m=o.prototype;return m.enable=function(){this._isEnabled=!0},m.disable=function(){this._isEnabled=!1},m.toggleEnabled=function(){this._isEnabled=!this._isEnabled},m.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},m.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},m.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!i)return;var o=this.getTipElement(),a=s.getUID(this.constructor.NAME);o.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&e(o).addClass(h.FADE);var u="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var l=!1===this.config.container?document.body:e(document).find(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(l),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:v.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var f=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===p.OUT&&t._leave(null,t)};if(e(this.tip).hasClass(h.FADE)){var d=s.getTransitionDurationFromElement(this.tip);e(this.tip).one(s.TRANSITION_END,f).emulateTransitionEnd(d)}else f()}},m.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==p.SHOW&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(r).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,e(this.tip).hasClass(h.FADE)){var a=s.getTransitionDurationFromElement(r);e(r).one(s.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},m.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},m.isWithContent=function(){return Boolean(this.getTitle())},m.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},m.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},m.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(v.TOOLTIP_INNER)),this.getTitle()),e(t).removeClass(h.FADE+" "+h.SHOW)},m.setElementContent=function(t,n){var r=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?r?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[r?"html":"text"](n)},m.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},m._getAttachment=function(e){return l[e.toUpperCase()]},m._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==g.MANUAL){var r=n===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},m._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},m._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===p.SHOW?n._hoverState=p.SHOW:(clearTimeout(n._timeout),n._hoverState=p.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===p.SHOW&&n.show()},n.config.delay.show):n.show())},m._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=p.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===p.OUT&&n.hide()},n.config.delay.hide):n.hide())},m._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},m._getConfig=function(n){return"number"==typeof(n=a({},this.constructor.Default,e(this.element).data(),"object"==typeof n&&n?n:{})).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),s.typeCheckConfig(t,n,this.constructor.DefaultType),n},m._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},m._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(u);null!==n&&n.length&&t.removeClass(n.join(""))},m._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},m._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),r="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,r),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(o,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return f}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return c}}]),o}();return e.fn[t]=m._jQueryInterface,e.fn[t].Constructor=m,e.fn[t].noConflict=function(){return e.fn[t]=o,m._jQueryInterface},m}(t),v=function(e){var t="popover",n=".bs.popover",r=e.fn[t],o=new RegExp("(^|\\s)bs-popover\\S+","g"),s=a({},h.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),u=a({},h.DefaultType,{content:"(string|element|function)"}),c={FADE:"fade",SHOW:"show"},l={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},p=function(r){var a,p;function d(){return r.apply(this,arguments)||this}p=r,(a=d).prototype=Object.create(p.prototype),a.prototype.constructor=a,a.__proto__=p;var h=d.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(l.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(l.CONTENT),n),t.removeClass(c.FADE+" "+c.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(o);null!==n&&n.length>0&&t.removeClass(n.join(""))},d._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new d(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(d,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return s}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return u}}]),d}(h);return e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=r,p._jQueryInterface},p}(t),g=function(e){var t="scrollspy",n=e.fn[t],r={offset:10,method:"auto",target:""},o={offset:"number",method:"string",target:"(string|element)"},u={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},c={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},l={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},f={OFFSET:"offset",POSITION:"position"},p=function(){function n(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+l.NAV_LINKS+","+this._config.target+" "+l.LIST_ITEMS+","+this._config.target+" "+l.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(u.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var p=n.prototype;return p.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?f.OFFSET:f.POSITION,r="auto"===this._config.method?n:this._config.method,i=r===f.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=[].slice.call(document.querySelectorAll(this._selector));o.map(function(t){var n,o=s.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[r]().top+i,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},p.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},p._getConfig=function(n){if("string"!=typeof(n=a({},r,"object"==typeof n&&n?n:{})).target){var i=e(n.target).attr("id");i||(i=s.getUID(t),e(n.target).attr("id",i)),n.target="#"+i}return s.typeCheckConfig(t,n,o),n},p._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},p._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},p._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},p._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length,o=i;o--;){var a=this._activeTarget!==this._targets[o]&&e>=this._offsets[o]&&(void 0===this._offsets[o+1]||e<this._offsets[o+1]);a&&this._activate(this._targets[o])}}},p._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var r=e([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass(c.DROPDOWN_ITEM)?(r.closest(l.DROPDOWN).find(l.DROPDOWN_TOGGLE).addClass(c.ACTIVE),r.addClass(c.ACTIVE)):(r.addClass(c.ACTIVE),r.parents(l.NAV_LIST_GROUP).prev(l.NAV_LINKS+", "+l.LIST_ITEMS).addClass(c.ACTIVE),r.parents(l.NAV_LIST_GROUP).prev(l.NAV_ITEMS).children(l.NAV_LINKS).addClass(c.ACTIVE)),e(this._scrollElement).trigger(u.ACTIVATE,{relatedTarget:t})},p._clear=function(){var t=[].slice.call(document.querySelectorAll(this._selector));e(t).filter(l.ACTIVE).removeClass(c.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.scrollspy"),i="object"==typeof t&&t;if(r||(r=new n(this,i),e(this).data("bs.scrollspy",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return r}}]),n}();return e(window).on(u.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(l.DATA_SPY)),n=t.length,r=n;r--;){var i=e(t[r]);p._jQueryInterface.call(i,i.data())}}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=n,p._jQueryInterface},p}(t),m=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},a=function(){function t(e){this._element=e}var a=t.prototype;return a.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(r.ACTIVE)||e(this._element).hasClass(r.DISABLED))){var i,a,u=e(this._element).closest(o.NAV_LIST_GROUP)[0],c=s.getSelectorFromElement(this._element);if(u){var l="UL"===u.nodeName?o.ACTIVE_UL:o.ACTIVE;a=(a=e.makeArray(e(u).find(l)))[a.length-1]}var f=e.Event(n.HIDE,{relatedTarget:this._element}),p=e.Event(n.SHOW,{relatedTarget:a});if(a&&e(a).trigger(f),e(this._element).trigger(p),!p.isDefaultPrevented()&&!f.isDefaultPrevented()){c&&(i=document.querySelector(c)),this._activate(this._element,u);var d=function(){var r=e.Event(n.HIDDEN,{relatedTarget:t._element}),i=e.Event(n.SHOWN,{relatedTarget:a});e(a).trigger(r),e(t._element).trigger(i)};i?this._activate(i,i.parentNode,d):d()}}},a.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},a._activate=function(t,n,i){var a=this,u=("UL"===n.nodeName?e(n).find(o.ACTIVE_UL):e(n).children(o.ACTIVE))[0],c=i&&u&&e(u).hasClass(r.FADE),l=function(){return a._transitionComplete(t,u,i)};if(u&&c){var f=s.getTransitionDurationFromElement(u);e(u).one(s.TRANSITION_END,l).emulateTransitionEnd(f)}else l()},a._transitionComplete=function(t,n,i){if(n){e(n).removeClass(r.SHOW+" "+r.ACTIVE);var a=e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];a&&e(a).removeClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(r.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),s.reflow(t),e(t).addClass(r.SHOW),t.parentNode&&e(t.parentNode).hasClass(r.DROPDOWN_MENU)){var u=e(t).closest(o.DROPDOWN)[0];if(u){var c=[].slice.call(u.querySelectorAll(o.DROPDOWN_TOGGLE));e(c).addClass(r.ACTIVE)}t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),a._jQueryInterface.call(e(this),"show")}),e.fn.tab=a._jQueryInterface,e.fn.tab.Constructor=a,e.fn.tab.noConflict=function(){return e.fn.tab=t,a._jQueryInterface},a}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=s,e.Alert=u,e.Button=c,e.Carousel=l,e.Collapse=f,e.Dropdown=p,e.Modal=d,e.Popover=v,e.Scrollspy=g,e.Tab=m,e.Tooltip=h,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(4),n(3))},function(e,t,n){e.exports=n(18)},function(e,t,n){"use strict";var r=n(0),i=n(5),o=n(20),a=n(2);function s(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var u=s(a);u.Axios=o,u.create=function(e){return s(r.merge(a,e))},u.Cancel=n(10),u.CancelToken=n(34),u.isCancel=n(9),u.all=function(e){return Promise.all(e)},u.spread=n(35),e.exports=u,e.exports.default=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),i=n(0),o=n(29),a=n(30);function s(e){this.defaults=e,this.interceptors={request:new o,response:new o}}s.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(8);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e}},function(e,t,n){"use strict";var r=n(0);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))}))}),o=a.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,a={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),a="",s=0,u=r;o.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&t>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new i;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";var r=n(0),i=n(31),o=n(9),a=n(2),s=n(32),u=n(33);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(10);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";(function(t,n){var r=Object.freeze({});function i(e){return null==e}function o(e){return null!=e}function a(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function u(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function l(e){return"[object Object]"===c.call(e)}function f(e){return"[object RegExp]"===c.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function d(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function h(e){var t=parseFloat(e);return isNaN(t)?e:t}function v(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var g=v("slot,component",!0),m=v("key,ref,slot,slot-scope,is");function y(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var _=Object.prototype.hasOwnProperty;function b(e,t){return _.call(e,t)}function w(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var T=/-(\w)/g,E=w(function(e){return e.replace(T,function(e,t){return t?t.toUpperCase():""})}),x=w(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),C=/\B([A-Z])/g,A=w(function(e){return e.replace(C,"-$1").toLowerCase()});var S=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function O(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function D(e,t){for(var n in t)e[n]=t[n];return e}function I(e){for(var t={},n=0;n<e.length;n++)e[n]&&D(t,e[n]);return t}function k(e,t,n){}var N=function(e,t,n){return!1},L=function(e){return e};function j(e,t){if(e===t)return!0;var n=u(e),r=u(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var i=Array.isArray(e),o=Array.isArray(t);if(i&&o)return e.length===t.length&&e.every(function(e,n){return j(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||o)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every(function(n){return j(e[n],t[n])})}catch(e){return!1}}function P(e,t){for(var n=0;n<e.length;n++)if(j(e[n],t))return n;return-1}function R(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var $="data-server-rendered",H=["component","directive","filter"],M=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:N,isReservedAttr:N,isUnknownElement:N,getTagNamespace:k,parsePlatformTagName:L,mustUseProp:N,async:!0,_lifecycleHooks:M};function W(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=/[^\w.$]/;var B,U="__proto__"in{},V="undefined"!=typeof window,z="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=z&&WXEnvironment.platform.toLowerCase(),G=V&&window.navigator.userAgent.toLowerCase(),X=G&&/msie|trident/.test(G),Q=G&&G.indexOf("msie 9.0")>0,Y=G&&G.indexOf("edge/")>0,J=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===K),Z=(G&&/chrome\/\d+/.test(G),{}.watch),ee=!1;if(V)try{var te={};Object.defineProperty(te,"passive",{get:function(){ee=!0}}),window.addEventListener("test-passive",null,te)}catch(e){}var ne=function(){return void 0===B&&(B=!V&&!z&&void 0!==t&&(t.process&&"server"===t.process.env.VUE_ENV)),B},re=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ie(e){return"function"==typeof e&&/native code/.test(e.toString())}var oe,ae="undefined"!=typeof Symbol&&ie(Symbol)&&"undefined"!=typeof Reflect&&ie(Reflect.ownKeys);oe="undefined"!=typeof Set&&ie(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var se=k,ue=0,ce=function(){this.id=ue++,this.subs=[]};ce.prototype.addSub=function(e){this.subs.push(e)},ce.prototype.removeSub=function(e){y(this.subs,e)},ce.prototype.depend=function(){ce.target&&ce.target.addDep(this)},ce.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},ce.target=null;var le=[];function fe(e){le.push(e),ce.target=e}function pe(){le.pop(),ce.target=le[le.length-1]}var de=function(e,t,n,r,i,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},he={child:{configurable:!0}};he.child.get=function(){return this.componentInstance},Object.defineProperties(de.prototype,he);var ve=function(e){void 0===e&&(e="");var t=new de;return t.text=e,t.isComment=!0,t};function ge(e){return new de(void 0,void 0,void 0,String(e))}function me(e){var t=new de(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ye=Array.prototype,_e=Object.create(ye);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=ye[e];W(_e,e,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var be=Object.getOwnPropertyNames(_e),we=!0;function Te(e){we=e}var Ee=function(e){var t;this.value=e,this.dep=new ce,this.vmCount=0,W(e,"__ob__",this),Array.isArray(e)?(U?(t=_e,e.__proto__=t):function(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];W(e,o,t[o])}}(e,_e,be),this.observeArray(e)):this.walk(e)};function xe(e,t){var n;if(u(e)&&!(e instanceof de))return b(e,"__ob__")&&e.__ob__ instanceof Ee?n=e.__ob__:we&&!ne()&&(Array.isArray(e)||l(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ee(e)),t&&n&&n.vmCount++,n}function Ce(e,t,n,r,i){var o=new ce,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set;s&&!u||2!==arguments.length||(n=e[t]);var c=!i&&xe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ce.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,r=0,i=t.length;r<i;r++)(n=t[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var r=s?s.call(e):n;t===r||t!=t&&r!=r||s&&!u||(u?u.call(e,t):n=t,c=!i&&xe(t),o.notify())}})}}function Ae(e,t,n){if(Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(Ce(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Se(e,t){if(Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||b(e,t)&&(delete e[t],n&&n.dep.notify())}}Ee.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ce(e,t[n])},Ee.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)xe(e[t])};var Oe=F.optionMergeStrategies;function De(e,t){if(!t)return e;for(var n,r,i,o=Object.keys(t),a=0;a<o.length;a++)r=e[n=o[a]],i=t[n],b(e,n)?r!==i&&l(r)&&l(i)&&De(r,i):Ae(e,n,i);return e}function Ie(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return r?De(r,i):i}:t?e?function(){return De("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function ke(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function Ne(e,t,n,r){var i=Object.create(e||null);return t?D(i,t):i}Oe.data=function(e,t,n){return n?Ie(e,t,n):t&&"function"!=typeof t?e:Ie(e,t)},M.forEach(function(e){Oe[e]=ke}),H.forEach(function(e){Oe[e+"s"]=Ne}),Oe.watch=function(e,t,n,r){if(e===Z&&(e=void 0),t===Z&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var o in D(i,e),t){var a=i[o],s=t[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},Oe.props=Oe.methods=Oe.inject=Oe.computed=function(e,t,n,r){if(!e)return t;var i=Object.create(null);return D(i,e),t&&D(i,t),i},Oe.provide=Ie;var Le=function(e,t){return void 0===t?e:t};function je(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(o[E(i)]={type:null});else if(l(n))for(var a in n)i=n[a],o[E(a)]=l(i)?i:{type:i};e.props=o}}(t),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(l(n))for(var o in n){var a=n[o];r[o]=l(a)?D({from:o},a):{from:a}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=je(e,t.extends,n)),t.mixins))for(var r=0,i=t.mixins.length;r<i;r++)e=je(e,t.mixins[r],n);var o,a={};for(o in e)s(o);for(o in t)b(e,o)||s(o);function s(r){var i=Oe[r]||Le;a[r]=i(e[r],t[r],n,r)}return a}function Pe(e,t,n,r){if("string"==typeof n){var i=e[t];if(b(i,n))return i[n];var o=E(n);if(b(i,o))return i[o];var a=x(o);return b(i,a)?i[a]:i[n]||i[o]||i[a]}}function Re(e,t,n,r){var i=t[e],o=!b(n,e),a=n[e],s=Me(Boolean,i.type);if(s>-1)if(o&&!b(i,"default"))a=!1;else if(""===a||a===A(e)){var u=Me(String,i.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!b(t,"default"))return;var r=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==$e(t.type)?r.call(e):r}(r,i,e);var c=we;Te(!0),xe(a),Te(c)}return a}function $e(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function He(e,t){return $e(e)===$e(t)}function Me(e,t){if(!Array.isArray(t))return He(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(He(t[n],e))return n;return-1}function Fe(e,t,n){if(t)for(var r=t;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,e,t,n))return}catch(e){We(e,r,"errorCaptured hook")}}We(e,t,n)}function We(e,t,n){if(F.errorHandler)try{return F.errorHandler.call(null,e,t,n)}catch(e){qe(e,null,"config.errorHandler")}qe(e,t,n)}function qe(e,t,n){if(!V&&!z||"undefined"==typeof console)throw e;console.error(e)}var Be,Ue,Ve=[],ze=!1;function Ke(){ze=!1;var e=Ve.slice(0);Ve.length=0;for(var t=0;t<e.length;t++)e[t]()}var Ge=!1;if(void 0!==n&&ie(n))Ue=function(){n(Ke)};else if("undefined"==typeof MessageChannel||!ie(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Ue=function(){setTimeout(Ke,0)};else{var Xe=new MessageChannel,Qe=Xe.port2;Xe.port1.onmessage=Ke,Ue=function(){Qe.postMessage(1)}}if("undefined"!=typeof Promise&&ie(Promise)){var Ye=Promise.resolve();Be=function(){Ye.then(Ke),J&&setTimeout(k)}}else Be=Ue;function Je(e,t){var n;if(Ve.push(function(){if(e)try{e.call(t)}catch(e){Fe(e,t,"nextTick")}else n&&n(t)}),ze||(ze=!0,Ge?Ue():Be()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var Ze=new oe;function et(e){!function e(t,n){var r,i;var o=Array.isArray(t);if(!o&&!u(t)||Object.isFrozen(t)||t instanceof de)return;if(t.__ob__){var a=t.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=t.length;r--;)e(t[r],n);else for(i=Object.keys(t),r=i.length;r--;)e(t[i[r]],n)}(e,Ze),Ze.clear()}var tt,nt=w(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}});function rt(e){function t(){var e=arguments,n=t.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),i=0;i<r.length;i++)r[i].apply(null,e)}return t.fns=e,t}function it(e,t,n,r,o,s){var u,c,l,f;for(u in e)c=e[u],l=t[u],f=nt(u),i(c)||(i(l)?(i(c.fns)&&(c=e[u]=rt(c)),a(f.once)&&(c=e[u]=o(f.name,c,f.capture)),n(f.name,c,f.capture,f.passive,f.params)):c!==l&&(l.fns=c,e[u]=l));for(u in t)i(e[u])&&r((f=nt(u)).name,t[u],f.capture)}function ot(e,t,n){var r;e instanceof de&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function u(){n.apply(this,arguments),y(r.fns,u)}i(s)?r=rt([u]):o(s.fns)&&a(s.merged)?(r=s).fns.push(u):r=rt([s,u]),r.merged=!0,e[t]=r}function at(e,t,n,r,i){if(o(t)){if(b(t,n))return e[n]=t[n],i||delete t[n],!0;if(b(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function st(e){return s(e)?[ge(e)]:Array.isArray(e)?function e(t,n){var r=[];var u,c,l,f;for(u=0;u<t.length;u++)i(c=t[u])||"boolean"==typeof c||(l=r.length-1,f=r[l],Array.isArray(c)?c.length>0&&(ut((c=e(c,(n||"")+"_"+u))[0])&&ut(f)&&(r[l]=ge(f.text+c[0].text),c.shift()),r.push.apply(r,c)):s(c)?ut(f)?r[l]=ge(f.text+c):""!==c&&r.push(ge(c)):ut(c)&&ut(f)?r[l]=ge(f.text+c.text):(a(t._isVList)&&o(c.tag)&&i(c.key)&&o(n)&&(c.key="__vlist"+n+"_"+u+"__"),r.push(c)));return r}(e):void 0}function ut(e){return o(e)&&o(e.text)&&!1===e.isComment}function ct(e,t){return(e.__esModule||ae&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?t.extend(e):e}function lt(e){return e.isComment&&e.asyncFactory}function ft(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||lt(n)))return n}}function pt(e,t){tt.$on(e,t)}function dt(e,t){tt.$off(e,t)}function ht(e,t){var n=tt;return function r(){null!==t.apply(null,arguments)&&n.$off(e,r)}}function vt(e,t,n){tt=e,it(t,n||{},pt,dt,ht),tt=void 0}function gt(e,t){var n={};if(!e)return n;for(var r=0,i=e.length;r<i;r++){var o=e[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==t&&o.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var c in n)n[c].every(mt)&&delete n[c];return n}function mt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function yt(e,t){t=t||{};for(var n=0;n<e.length;n++)Array.isArray(e[n])?yt(e[n],t):t[e[n].key]=e[n].fn;return t}var _t=null;function bt(e){var t=_t;return _t=e,function(){_t=t}}function wt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Tt(e,t){if(t){if(e._directInactive=!1,wt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Tt(e.$children[n]);Et(e,"activated")}}function Et(e,t){fe();var n=e.$options[t];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(e)}catch(n){Fe(n,e,t+" hook")}e._hasHookEvent&&e.$emit("hook:"+t),pe()}var xt=[],Ct=[],At={},St=!1,Ot=!1,Dt=0;function It(){var e,t;for(Ot=!0,xt.sort(function(e,t){return e.id-t.id}),Dt=0;Dt<xt.length;Dt++)(e=xt[Dt]).before&&e.before(),t=e.id,At[t]=null,e.run();var n=Ct.slice(),r=xt.slice();Dt=xt.length=Ct.length=0,At={},St=Ot=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Tt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Et(r,"updated")}}(r),re&&F.devtools&&re.emit("flush")}var kt=0,Nt=function(e,t,n,r,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++kt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new oe,this.newDepIds=new oe,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!q.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=k)),this.value=this.lazy?void 0:this.get()};Nt.prototype.get=function(){var e;fe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Fe(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&et(e),pe(),this.cleanupDeps()}return e},Nt.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Nt.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Nt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==At[t]){if(At[t]=!0,Ot){for(var n=xt.length-1;n>Dt&&xt[n].id>e.id;)n--;xt.splice(n+1,0,e)}else xt.push(e);St||(St=!0,Je(It))}}(this)},Nt.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){Fe(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Nt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Nt.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Nt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Lt={enumerable:!0,configurable:!0,get:k,set:k};function jt(e,t,n){Lt.get=function(){return this[t][n]},Lt.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Lt)}function Pt(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},i=e.$options._propKeys=[];e.$parent&&Te(!1);var o=function(o){i.push(o);var a=Re(o,t,n,e);Ce(r,o,a),o in e||jt(e,"_props",o)};for(var a in t)o(a);Te(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?k:S(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;l(t=e._data="function"==typeof t?function(e,t){fe();try{return e.call(t,t)}catch(e){return Fe(e,t,"data()"),{}}finally{pe()}}(t,e):t||{})||(t={});var n=Object.keys(t),r=e.$options.props,i=(e.$options.methods,n.length);for(;i--;){var o=n[i];0,r&&b(r,o)||(a=void 0,36!==(a=(o+"").charCodeAt(0))&&95!==a&&jt(e,"_data",o))}var a;xe(t,!0)}(e):xe(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ne();for(var i in t){var o=t[i],a="function"==typeof o?o:o.get;0,r||(n[i]=new Nt(e,a||k,k,Rt)),i in e||$t(e,i,o)}}(e,t.computed),t.watch&&t.watch!==Z&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Ft(e,n,r[i]);else Ft(e,n,r)}}(e,t.watch)}var Rt={lazy:!0};function $t(e,t,n){var r=!ne();"function"==typeof n?(Lt.get=r?Ht(t):Mt(n),Lt.set=k):(Lt.get=n.get?r&&!1!==n.cache?Ht(t):Mt(n.get):k,Lt.set=n.set||k),Object.defineProperty(e,t,Lt)}function Ht(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ce.target&&t.depend(),t.value}}function Mt(e){return function(){return e.call(this,this)}}function Ft(e,t,n,r){return l(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function Wt(e,t){if(e){for(var n=Object.create(null),r=ae?Reflect.ownKeys(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}):Object.keys(e),i=0;i<r.length;i++){for(var o=r[i],a=e[o].from,s=t;s;){if(s._provided&&b(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[o]){var u=e[o].default;n[o]="function"==typeof u?u.call(t):u}else 0}return n}}function qt(e,t){var n,r,i,a,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(u(e))for(a=Object.keys(e),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=t(e[s],s,r);return o(n)||(n=[]),n._isVList=!0,n}function Bt(e,t,n,r){var i,o=this.$scopedSlots[e];o?(n=n||{},r&&(n=D(D({},r),n)),i=o(n)||t):i=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function Ut(e){return Pe(this.$options,"filters",e)||L}function Vt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function zt(e,t,n,r,i){var o=F.keyCodes[t]||n;return i&&r&&!F.keyCodes[t]?Vt(i,r):o?Vt(o,e):r?A(r)!==t:void 0}function Kt(e,t,n,r,i){if(n)if(u(n)){var o;Array.isArray(n)&&(n=I(n));var a=function(a){if("class"===a||"style"===a||m(a))o=e;else{var s=e.attrs&&e.attrs.type;o=r||F.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=E(a);a in o||u in o||(o[a]=n[a],i&&((e.on||(e.on={}))["update:"+u]=function(e){n[a]=e}))};for(var s in n)a(s)}else;return e}function Gt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(Qt(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r)}function Xt(e,t,n){return Qt(e,"__once__"+t+(n?"_"+n:""),!0),e}function Qt(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&Yt(e[r],t+"_"+r,n);else Yt(e,t,n)}function Yt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Jt(e,t){if(t)if(l(t)){var n=e.on=e.on?D({},e.on):{};for(var r in t){var i=n[r],o=t[r];n[r]=i?[].concat(i,o):o}}else;return e}function Zt(e){e._o=Xt,e._n=h,e._s=d,e._l=qt,e._t=Bt,e._q=j,e._i=P,e._m=Gt,e._f=Ut,e._k=zt,e._b=Kt,e._v=ge,e._e=ve,e._u=yt,e._g=Jt}function en(e,t,n,i,o){var s,u=o.options;b(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var c=a(u._compiled),l=!c;this.data=e,this.props=t,this.children=n,this.parent=i,this.listeners=e.on||r,this.injections=Wt(u.inject,i),this.slots=function(){return gt(n,i)},c&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=e.scopedSlots||r),u._scopeId?this._c=function(e,t,n,r){var o=ln(s,e,t,n,r,l);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(e,t,n,r){return ln(s,e,t,n,r,l)}}function tn(e,t,n,r,i){var o=me(e);return o.fnContext=n,o.fnOptions=r,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function nn(e,t){for(var n in t)e[E(n)]=t[n]}Zt(en.prototype);var rn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;rn.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,_t)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,i,o){var a=!!(o||e.$options._renderChildren||i.data.scopedSlots||e.$scopedSlots!==r);if(e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=o,e.$attrs=i.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){Te(!1);for(var s=e._props,u=e.$options._propKeys||[],c=0;c<u.length;c++){var l=u[c],f=e.$options.props;s[l]=Re(l,f,t,e)}Te(!0),e.$options.propsData=t}n=n||r;var p=e.$options._parentListeners;e.$options._parentListeners=n,vt(e,n,p),a&&(e.$slots=gt(o,i.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Et(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Ct.push(t)):Tt(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(!(n&&(t._directInactive=!0,wt(t))||t._inactive)){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);Et(t,"deactivated")}}(t,!0):t.$destroy())}},on=Object.keys(rn);function an(e,t,n,s,c){if(!i(e)){var l=n.$options._base;if(u(e)&&(e=l.extend(e)),"function"==typeof e){var f;if(i(e.cid)&&void 0===(e=function(e,t,n){if(a(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;if(a(e.loading)&&o(e.loadingComp))return e.loadingComp;if(!o(e.contexts)){var r=e.contexts=[n],s=!0,c=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0)},l=R(function(n){e.resolved=ct(n,t),s||c(!0)}),f=R(function(t){o(e.errorComp)&&(e.error=!0,c(!0))}),p=e(l,f);return u(p)&&("function"==typeof p.then?i(e.resolved)&&p.then(l,f):o(p.component)&&"function"==typeof p.component.then&&(p.component.then(l,f),o(p.error)&&(e.errorComp=ct(p.error,t)),o(p.loading)&&(e.loadingComp=ct(p.loading,t),0===p.delay?e.loading=!0:setTimeout(function(){i(e.resolved)&&i(e.error)&&(e.loading=!0,c(!1))},p.delay||200)),o(p.timeout)&&setTimeout(function(){i(e.resolved)&&f(null)},p.timeout))),s=!1,e.loading?e.loadingComp:e.resolved}e.contexts.push(n)}(f=e,l,n)))return function(e,t,n,r,i){var o=ve();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:r,tag:i},o}(f,t,n,s,c);t=t||{},pn(e),o(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.props||(t.props={}))[n]=t.model.value;var i=t.on||(t.on={}),a=i[r],s=t.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}(e.options,t);var p=function(e,t,n){var r=t.options.props;if(!i(r)){var a={},s=e.attrs,u=e.props;if(o(s)||o(u))for(var c in r){var l=A(c);at(a,u,c,l,!0)||at(a,s,c,l,!1)}return a}}(t,e);if(a(e.options.functional))return function(e,t,n,i,a){var s=e.options,u={},c=s.props;if(o(c))for(var l in c)u[l]=Re(l,c,t||r);else o(n.attrs)&&nn(u,n.attrs),o(n.props)&&nn(u,n.props);var f=new en(n,u,a,i,e),p=s.render.call(null,f._c,f);if(p instanceof de)return tn(p,n,f.parent,s);if(Array.isArray(p)){for(var d=st(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=tn(d[v],n,f.parent,s);return h}}(e,p,t,n,s);var d=t.on;if(t.on=t.nativeOn,a(e.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<on.length;n++){var r=on[n],i=t[r],o=rn[r];i===o||i&&i._merged||(t[r]=i?sn(o,i):o)}}(t);var v=e.options.name||c;return new de("vue-component-"+e.cid+(v?"-"+v:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:d,tag:c,children:s},f)}}}function sn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}var un=1,cn=2;function ln(e,t,n,r,c,l){return(Array.isArray(n)||s(n))&&(c=r,r=n,n=void 0),a(l)&&(c=cn),function(e,t,n,r,s){if(o(n)&&o(n.__ob__))return ve();o(n)&&o(n.is)&&(t=n.is);if(!t)return ve();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);s===cn?r=st(r):s===un&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var c,l;if("string"==typeof t){var f;l=e.$vnode&&e.$vnode.ns||F.getTagNamespace(t),c=F.isReservedTag(t)?new de(F.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!o(f=Pe(e.$options,"components",t))?new de(t,n,r,void 0,void 0,e):an(f,n,e,r,t)}else c=an(t,n,e,r);return Array.isArray(c)?c:o(c)?(o(l)&&function e(t,n,r){t.ns=n;"foreignObject"===t.tag&&(n=void 0,r=!0);if(o(t.children))for(var s=0,u=t.children.length;s<u;s++){var c=t.children[s];o(c.tag)&&(i(c.ns)||a(r)&&"svg"!==c.tag)&&e(c,n,r)}}(c,l),o(n)&&function(e){u(e.style)&&et(e.style);u(e.class)&&et(e.class)}(n),c):ve()}(e,t,n,r,c)}var fn=0;function pn(e){var t=e.options;if(e.super){var n=pn(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.extendOptions,i=e.sealedOptions;for(var o in n)n[o]!==i[o]&&(t||(t={}),t[o]=dn(n[o],r[o],i[o]));return t}(e);r&&D(e.extendOptions,r),(t=e.options=je(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function dn(e,t,n){if(Array.isArray(e)){var r=[];n=Array.isArray(n)?n:[n],t=Array.isArray(t)?t:[t];for(var i=0;i<e.length;i++)(t.indexOf(e[i])>=0||n.indexOf(e[i])<0)&&r.push(e[i]);return r}return e}function hn(e){this._init(e)}function vn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var o=e.name||n.options.name;var a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=je(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)jt(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)$t(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,H.forEach(function(e){a[e]=n[e]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=D({},a.options),i[r]=a,a}}function gn(e){return e&&(e.Ctor.options.name||e.tag)}function mn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!f(e)&&e.test(t)}function yn(e,t){var n=e.cache,r=e.keys,i=e._vnode;for(var o in n){var a=n[o];if(a){var s=gn(a.componentOptions);s&&!t(s)&&_n(n,o,r,i)}}}function _n(e,t,n,r){var i=e[t];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),e[t]=null,y(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=fn++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=je(pn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&vt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,i=n&&n.context;e.$slots=gt(t._renderChildren,i),e.$scopedSlots=r,e._c=function(t,n,r,i){return ln(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return ln(e,t,n,r,i,!0)};var o=n&&n.data;Ce(e,"$attrs",o&&o.attrs||r,null,!0),Ce(e,"$listeners",t._parentListeners||r,null,!0)}(t),Et(t,"beforeCreate"),function(e){var t=Wt(e.$options.inject,e);t&&(Te(!1),Object.keys(t).forEach(function(n){Ce(e,n,t[n])}),Te(!0))}(t),Pt(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),Et(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(hn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ae,e.prototype.$delete=Se,e.prototype.$watch=function(e,t,n){if(l(t))return Ft(this,e,t,n);(n=n||{}).user=!0;var r=new Nt(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){Fe(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(hn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var i=0,o=e.length;i<o;i++)r.$on(e[i],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,i=e.length;r<i;r++)n.$off(e[r],t);return n}var o=n._events[e];if(!o)return n;if(!t)return n._events[e]=null,n;if(t)for(var a,s=o.length;s--;)if((a=o[s])===t||a.fn===t){o.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this._events[e];if(t){t=t.length>1?O(t):t;for(var n=O(arguments,1),r=0,i=t.length;r<i;r++)try{t[r].apply(this,n)}catch(t){Fe(t,this,'event handler for "'+e+'"')}}return this}}(hn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,i=n._vnode,o=bt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||y(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(hn),function(e){Zt(e.prototype),e.prototype.$nextTick=function(e){return Je(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,i=n.render,o=n._parentVnode;o&&(t.$scopedSlots=o.data.scopedSlots||r),t.$vnode=o;try{e=i.call(t._renderProxy,t.$createElement)}catch(n){Fe(n,t,"render"),e=t._vnode}return e instanceof de||(e=ve()),e.parent=o,e}}(hn);var bn=[String,RegExp,Array],wn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:bn,exclude:bn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)_n(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){yn(e,function(e){return mn(t,e)})}),this.$watch("exclude",function(t){yn(e,function(e){return!mn(t,e)})})},render:function(){var e=this.$slots.default,t=ft(e),n=t&&t.componentOptions;if(n){var r=gn(n),i=this.include,o=this.exclude;if(i&&(!r||!mn(i,r))||o&&r&&mn(o,r))return t;var a=this.cache,s=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[u]?(t.componentInstance=a[u].componentInstance,y(s,u),s.push(u)):(a[u]=t,s.push(u),this.max&&s.length>parseInt(this.max)&&_n(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return F}};Object.defineProperty(e,"config",t),e.util={warn:se,extend:D,mergeOptions:je,defineReactive:Ce},e.set=Ae,e.delete=Se,e.nextTick=Je,e.options=Object.create(null),H.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,D(e.options.components,wn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=O(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=je(this.options,e),this}}(e),vn(e),function(e){H.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&l(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(hn),Object.defineProperty(hn.prototype,"$isServer",{get:ne}),Object.defineProperty(hn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(hn,"FunctionalRenderContext",{value:en}),hn.version="2.5.21";var Tn=v("style,class"),En=v("input,textarea,option,select,progress"),xn=function(e,t,n){return"value"===n&&En(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Cn=v("contenteditable,draggable,spellcheck"),An=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Sn="http://www.w3.org/1999/xlink",On=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Dn=function(e){return On(e)?e.slice(6,e.length):""},In=function(e){return null==e||!1===e};function kn(e){for(var t=e.data,n=e,r=e;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=Nn(r.data,t));for(;o(n=n.parent);)n&&n.data&&(t=Nn(t,n.data));return function(e,t){if(o(e)||o(t))return Ln(e,jn(t));return""}(t.staticClass,t.class)}function Nn(e,t){return{staticClass:Ln(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function Ln(e,t){return e?t?e+" "+t:e:t||""}function jn(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,i=e.length;r<i;r++)o(t=jn(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):u(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Pn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Rn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),$n=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Hn=function(e){return Rn(e)||$n(e)};function Mn(e){return $n(e)?"svg":"math"===e?"math":void 0}var Fn=Object.create(null);var Wn=v("text,number,password,search,email,tel,url");function qn(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var Bn=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(Pn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Un={create:function(e,t){Vn(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Vn(e,!0),Vn(t))},destroy:function(e){Vn(e,!0)}};function Vn(e,t){var n=e.data.ref;if(o(n)){var r=e.context,i=e.componentInstance||e.elm,a=r.$refs;t?Array.isArray(a[n])?y(a[n],i):a[n]===i&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var zn=new de("",{},[]),Kn=["create","activate","update","remove","destroy"];function Gn(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=o(n=e.data)&&o(n=n.attrs)&&n.type,i=o(n=t.data)&&o(n=n.attrs)&&n.type;return r===i||Wn(r)&&Wn(i)}(e,t)||a(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&i(t.asyncFactory.error))}function Xn(e,t,n){var r,i,a={};for(r=t;r<=n;++r)o(i=e[r].key)&&(a[i]=r);return a}var Qn={create:Yn,update:Yn,destroy:function(e){Yn(e,zn)}};function Yn(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,i,o=e===zn,a=t===zn,s=Zn(e.data.directives,e.context),u=Zn(t.data.directives,t.context),c=[],l=[];for(n in u)r=s[n],i=u[n],r?(i.oldValue=r.value,tr(i,"update",t,e),i.def&&i.def.componentUpdated&&l.push(i)):(tr(i,"bind",t,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var f=function(){for(var n=0;n<c.length;n++)tr(c[n],"inserted",t,e)};o?ot(t,"insert",f):f()}l.length&&ot(t,"postpatch",function(){for(var n=0;n<l.length;n++)tr(l[n],"componentUpdated",t,e)});if(!o)for(n in s)u[n]||tr(s[n],"unbind",e,e,a)}(e,t)}var Jn=Object.create(null);function Zn(e,t){var n,r,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Jn),i[er(r)]=r,r.def=Pe(t.$options,"directives",r.name);return i}function er(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function tr(e,t,n,r,i){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,r,i)}catch(r){Fe(r,n.context,"directive "+e.name+" "+t+" hook")}}var nr=[Un,Qn];function rr(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(t.data.attrs))){var r,a,s=t.elm,u=e.data.attrs||{},c=t.data.attrs||{};for(r in o(c.__ob__)&&(c=t.data.attrs=D({},c)),c)a=c[r],u[r]!==a&&ir(s,r,a);for(r in(X||Y)&&c.value!==u.value&&ir(s,"value",c.value),u)i(c[r])&&(On(r)?s.removeAttributeNS(Sn,Dn(r)):Cn(r)||s.removeAttribute(r))}}function ir(e,t,n){e.tagName.indexOf("-")>-1?or(e,t,n):An(t)?In(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Cn(t)?e.setAttribute(t,In(n)||"false"===n?"false":"true"):On(t)?In(n)?e.removeAttributeNS(Sn,Dn(t)):e.setAttributeNS(Sn,t,n):or(e,t,n)}function or(e,t,n){if(In(n))e.removeAttribute(t);else{if(X&&!Q&&("TEXTAREA"===e.tagName||"INPUT"===e.tagName)&&"placeholder"===t&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var ar={create:rr,update:rr};function sr(e,t){var n=t.elm,r=t.data,a=e.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=kn(t),u=n._transitionClasses;o(u)&&(s=Ln(s,jn(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var ur,cr,lr,fr,pr,dr,hr={create:sr,update:sr},vr=/[\w).+\-_$\]]/;function gr(e){var t,n,r,i,o,a=!1,s=!1,u=!1,c=!1,l=0,f=0,p=0,d=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),a)39===t&&92!==n&&(a=!1);else if(s)34===t&&92!==n&&(s=!1);else if(u)96===t&&92!==n&&(u=!1);else if(c)47===t&&92!==n&&(c=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||l||f||p){switch(t){case 34:s=!0;break;case 39:a=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:f++;break;case 93:f--;break;case 123:l++;break;case 125:l--}if(47===t){for(var h=r-1,v=void 0;h>=0&&" "===(v=e.charAt(h));h--);v&&vr.test(v)||(c=!0)}}else void 0===i?(d=r+1,i=e.slice(0,r).trim()):g();function g(){(o||(o=[])).push(e.slice(d,r).trim()),d=r+1}if(void 0===i?i=e.slice(0,r).trim():0!==d&&g(),o)for(r=0;r<o.length;r++)i=mr(i,o[r]);return i}function mr(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==i?","+i:i)}function yr(e){console.error("[Vue compiler]: "+e)}function _r(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function br(e,t,n){(e.props||(e.props=[])).push({name:t,value:n}),e.plain=!1}function wr(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n}),e.plain=!1}function Tr(e,t,n){e.attrsMap[t]=n,e.attrsList.push({name:t,value:n})}function Er(e,t,n,r,i,o){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:i,modifiers:o}),e.plain=!1}function xr(e,t,n,i,o,a){var s;i=i||r,"click"===t&&(i.right?(t="contextmenu",delete i.right):i.middle&&(t="mouseup")),i.capture&&(delete i.capture,t="!"+t),i.once&&(delete i.once,t="~"+t),i.passive&&(delete i.passive,t="&"+t),i.native?(delete i.native,s=e.nativeEvents||(e.nativeEvents={})):s=e.events||(e.events={});var u={value:n.trim()};i!==r&&(u.modifiers=i);var c=s[t];Array.isArray(c)?o?c.unshift(u):c.push(u):s[t]=c?o?[u,c]:[c,u]:u,e.plain=!1}function Cr(e,t,n){var r=Ar(e,":"+t)||Ar(e,"v-bind:"+t);if(null!=r)return gr(r);if(!1!==n){var i=Ar(e,t);if(null!=i)return JSON.stringify(i)}}function Ar(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var i=e.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===t){i.splice(o,1);break}return n&&delete e.attrsMap[t],r}function Sr(e,t,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=Or(t,o);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+a+"}"}}function Or(e,t){var n=function(e){if(e=e.trim(),ur=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<ur-1)return(fr=e.lastIndexOf("."))>-1?{exp:e.slice(0,fr),key:'"'+e.slice(fr+1)+'"'}:{exp:e,key:null};cr=e,fr=pr=dr=0;for(;!Ir();)kr(lr=Dr())?Lr(lr):91===lr&&Nr(lr);return{exp:e.slice(0,pr),key:e.slice(pr+1,dr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Dr(){return cr.charCodeAt(++fr)}function Ir(){return fr>=ur}function kr(e){return 34===e||39===e}function Nr(e){var t=1;for(pr=fr;!Ir();)if(kr(e=Dr()))Lr(e);else if(91===e&&t++,93===e&&t--,0===t){dr=fr;break}}function Lr(e){for(var t=e;!Ir()&&(e=Dr())!==t;);}var jr,Pr="__r",Rr="__c";function $r(e,t,n){var r=jr;return function i(){null!==t.apply(null,arguments)&&Mr(e,i,n,r)}}function Hr(e,t,n,r){var i;t=(i=t)._withTask||(i._withTask=function(){Ge=!0;try{return i.apply(null,arguments)}finally{Ge=!1}}),jr.addEventListener(e,t,ee?{capture:n,passive:r}:n)}function Mr(e,t,n,r){(r||jr).removeEventListener(e,t._withTask||t,n)}function Fr(e,t){if(!i(e.data.on)||!i(t.data.on)){var n=t.data.on||{},r=e.data.on||{};jr=t.elm,function(e){if(o(e[Pr])){var t=X?"change":"input";e[t]=[].concat(e[Pr],e[t]||[]),delete e[Pr]}o(e[Rr])&&(e.change=[].concat(e[Rr],e.change||[]),delete e[Rr])}(n),it(n,r,Hr,Mr,$r,t.context),jr=void 0}}var Wr={create:Fr,update:Fr};function qr(e,t){if(!i(e.data.domProps)||!i(t.data.domProps)){var n,r,a=t.elm,s=e.data.domProps||{},u=t.data.domProps||{};for(n in o(u.__ob__)&&(u=t.data.domProps=D({},u)),s)i(u[n])&&(a[n]="");for(n in u){if(r=u[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var c=i(r)?"":String(r);Br(a,c)&&(a.value=c)}else a[n]=r}}}function Br(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(o(r)){if(r.lazy)return!1;if(r.number)return h(n)!==h(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Ur={create:qr,update:qr},Vr=w(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t});function zr(e){var t=Kr(e.style);return e.staticStyle?D(e.staticStyle,t):t}function Kr(e){return Array.isArray(e)?I(e):"string"==typeof e?Vr(e):e}var Gr,Xr=/^--/,Qr=/\s*!important$/,Yr=function(e,t,n){if(Xr.test(t))e.style.setProperty(t,n);else if(Qr.test(n))e.style.setProperty(t,n.replace(Qr,""),"important");else{var r=Zr(t);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)e.style[r]=n[i];else e.style[r]=n}},Jr=["Webkit","Moz","ms"],Zr=w(function(e){if(Gr=Gr||document.createElement("div").style,"filter"!==(e=E(e))&&e in Gr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Jr.length;n++){var r=Jr[n]+t;if(r in Gr)return r}});function ei(e,t){var n=t.data,r=e.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var a,s,u=t.elm,c=r.staticStyle,l=r.normalizedStyle||r.style||{},f=c||l,p=Kr(t.data.style)||{};t.data.normalizedStyle=o(p.__ob__)?D({},p):p;var d=function(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=zr(i.data))&&D(r,n);(n=zr(e.data))&&D(r,n);for(var o=e;o=o.parent;)o.data&&(n=zr(o.data))&&D(r,n);return r}(t,!0);for(s in f)i(d[s])&&Yr(u,s,"");for(s in d)(a=d[s])!==f[s]&&Yr(u,s,null==a?"":a)}}var ti={create:ei,update:ei},ni=/\s+/;function ri(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(ni).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function ii(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(ni).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function oi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&D(t,ai(e.name||"v")),D(t,e),t}return"string"==typeof e?ai(e):void 0}}var ai=w(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),si=V&&!Q,ui="transition",ci="animation",li="transition",fi="transitionend",pi="animation",di="animationend";si&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(li="WebkitTransition",fi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(pi="WebkitAnimation",di="webkitAnimationEnd"));var hi=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function vi(e){hi(function(){hi(e)})}function gi(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),ri(e,t))}function mi(e,t){e._transitionClasses&&y(e._transitionClasses,t),ii(e,t)}function yi(e,t,n){var r=bi(e,t),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===ui?fi:di,u=0,c=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++u>=a&&c()};setTimeout(function(){u<a&&c()},o+1),e.addEventListener(s,l)}var _i=/\b(transform|all)(,|$)/;function bi(e,t){var n,r=window.getComputedStyle(e),i=(r[li+"Delay"]||"").split(", "),o=(r[li+"Duration"]||"").split(", "),a=wi(i,o),s=(r[pi+"Delay"]||"").split(", "),u=(r[pi+"Duration"]||"").split(", "),c=wi(s,u),l=0,f=0;return t===ui?a>0&&(n=ui,l=a,f=o.length):t===ci?c>0&&(n=ci,l=c,f=u.length):f=(n=(l=Math.max(a,c))>0?a>c?ui:ci:null)?n===ui?o.length:u.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===ui&&_i.test(r[li+"Property"])}}function wi(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Ti(t)+Ti(e[n])}))}function Ti(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ei(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=oi(e.data.transition);if(!i(r)&&!o(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,l=r.enterToClass,f=r.enterActiveClass,p=r.appearClass,d=r.appearToClass,v=r.appearActiveClass,g=r.beforeEnter,m=r.enter,y=r.afterEnter,_=r.enterCancelled,b=r.beforeAppear,w=r.appear,T=r.afterAppear,E=r.appearCancelled,x=r.duration,C=_t,A=_t.$vnode;A&&A.parent;)C=(A=A.parent).context;var S=!C._isMounted||!e.isRootInsert;if(!S||w||""===w){var O=S&&p?p:c,D=S&&v?v:f,I=S&&d?d:l,k=S&&b||g,N=S&&"function"==typeof w?w:m,L=S&&T||y,j=S&&E||_,P=h(u(x)?x.enter:x);0;var $=!1!==a&&!Q,H=Ai(N),M=n._enterCb=R(function(){$&&(mi(n,I),mi(n,D)),M.cancelled?($&&mi(n,O),j&&j(n)):L&&L(n),n._enterCb=null});e.data.show||ot(e,"insert",function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),N&&N(n,M)}),k&&k(n),$&&(gi(n,O),gi(n,D),vi(function(){mi(n,O),M.cancelled||(gi(n,I),H||(Ci(P)?setTimeout(M,P):yi(n,s,M)))})),e.data.show&&(t&&t(),N&&N(n,M)),$||H||M()}}}function xi(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=oi(e.data.transition);if(i(r)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,f=r.leaveActiveClass,p=r.beforeLeave,d=r.leave,v=r.afterLeave,g=r.leaveCancelled,m=r.delayLeave,y=r.duration,_=!1!==a&&!Q,b=Ai(d),w=h(u(y)?y.leave:y);0;var T=n._leaveCb=R(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),_&&(mi(n,l),mi(n,f)),T.cancelled?(_&&mi(n,c),g&&g(n)):(t(),v&&v(n)),n._leaveCb=null});m?m(E):E()}function E(){T.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),_&&(gi(n,c),gi(n,f),vi(function(){mi(n,c),T.cancelled||(gi(n,l),b||(Ci(w)?setTimeout(T,w):yi(n,s,T)))})),d&&d(n,T),_||b||T())}}function Ci(e){return"number"==typeof e&&!isNaN(e)}function Ai(e){if(i(e))return!1;var t=e.fns;return o(t)?Ai(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Si(e,t){!0!==t.data.show&&Ei(t)}var Oi=function(e){var t,n,r={},u=e.modules,c=e.nodeOps;for(t=0;t<Kn.length;++t)for(r[Kn[t]]=[],n=0;n<u.length;++n)o(u[n][Kn[t]])&&r[Kn[t]].push(u[n][Kn[t]]);function l(e){var t=c.parentNode(e);o(t)&&c.removeChild(t,e)}function f(e,t,n,i,s,u,l){if(o(e.elm)&&o(u)&&(e=u[l]=me(e)),e.isRootInsert=!s,!function(e,t,n,i){var s=e.data;if(o(s)){var u=o(e.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(e,!1),o(e.componentInstance))return p(e,t),d(n,e.elm,i),a(u)&&function(e,t,n,i){for(var a,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,o(a=s.data)&&o(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](zn,s);t.push(s);break}d(n,e.elm,i)}(e,t,n,i),!0}}(e,t,n,i)){var f=e.data,v=e.children,g=e.tag;o(g)?(e.elm=e.ns?c.createElementNS(e.ns,g):c.createElement(g,e),y(e),h(e,v,t),o(f)&&m(e,t),d(n,e.elm,i)):a(e.isComment)?(e.elm=c.createComment(e.text),d(n,e.elm,i)):(e.elm=c.createTextNode(e.text),d(n,e.elm,i))}}function p(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(m(e,t),y(e)):(Vn(e),t.push(e))}function d(e,t,n){o(e)&&(o(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)f(t[r],n,e.elm,null,!0,t,r);else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function m(e,n){for(var i=0;i<r.create.length;++i)r.create[i](zn,e);o(t=e.data.hook)&&(o(t.create)&&t.create(zn,e),o(t.insert)&&n.push(e))}function y(e){var t;if(o(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;o(t=_t)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function _(e,t,n,r,i,o){for(;r<=i;++r)f(n[r],o,e,t,!1,n,r)}function b(e){var t,n,i=e.data;if(o(i))for(o(t=i.hook)&&o(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)b(e.children[n])}function w(e,t,n,r){for(;n<=r;++n){var i=t[n];o(i)&&(o(i.tag)?(T(i),b(i)):l(i.elm))}}function T(e,t){if(o(t)||o(e.data)){var n,i=r.remove.length+1;for(o(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,i),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&T(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else l(e.elm)}function E(e,t,n,r){for(var i=n;i<r;i++){var a=t[i];if(o(a)&&Gn(e,a))return i}}function x(e,t,n,s,u,l){if(e!==t){o(t.elm)&&o(s)&&(t=s[u]=me(t));var p=t.elm=e.elm;if(a(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?S(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(a(t.isStatic)&&a(e.isStatic)&&t.key===e.key&&(a(t.isCloned)||a(t.isOnce)))t.componentInstance=e.componentInstance;else{var d,h=t.data;o(h)&&o(d=h.hook)&&o(d=d.prepatch)&&d(e,t);var v=e.children,m=t.children;if(o(h)&&g(t)){for(d=0;d<r.update.length;++d)r.update[d](e,t);o(d=h.hook)&&o(d=d.update)&&d(e,t)}i(t.text)?o(v)&&o(m)?v!==m&&function(e,t,n,r,a){for(var s,u,l,p=0,d=0,h=t.length-1,v=t[0],g=t[h],m=n.length-1,y=n[0],b=n[m],T=!a;p<=h&&d<=m;)i(v)?v=t[++p]:i(g)?g=t[--h]:Gn(v,y)?(x(v,y,r,n,d),v=t[++p],y=n[++d]):Gn(g,b)?(x(g,b,r,n,m),g=t[--h],b=n[--m]):Gn(v,b)?(x(v,b,r,n,m),T&&c.insertBefore(e,v.elm,c.nextSibling(g.elm)),v=t[++p],b=n[--m]):Gn(g,y)?(x(g,y,r,n,d),T&&c.insertBefore(e,g.elm,v.elm),g=t[--h],y=n[++d]):(i(s)&&(s=Xn(t,p,h)),i(u=o(y.key)?s[y.key]:E(y,t,p,h))?f(y,r,e,v.elm,!1,n,d):Gn(l=t[u],y)?(x(l,y,r,n,d),t[u]=void 0,T&&c.insertBefore(e,l.elm,v.elm)):f(y,r,e,v.elm,!1,n,d),y=n[++d]);p>h?_(e,i(n[m+1])?null:n[m+1].elm,n,d,m,r):d>m&&w(0,t,p,h)}(p,v,m,n,l):o(m)?(o(e.text)&&c.setTextContent(p,""),_(p,null,m,0,m.length-1,n)):o(v)?w(0,v,0,v.length-1):o(e.text)&&c.setTextContent(p,""):e.text!==t.text&&c.setTextContent(p,t.text),o(h)&&o(d=h.hook)&&o(d=d.postpatch)&&d(e,t)}}}function C(e,t,n){if(a(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var A=v("attrs,class,staticClass,staticStyle,key");function S(e,t,n,r){var i,s=t.tag,u=t.data,c=t.children;if(r=r||u&&u.pre,t.elm=e,a(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(u)&&(o(i=u.hook)&&o(i=i.init)&&i(t,!0),o(i=t.componentInstance)))return p(t,n),!0;if(o(s)){if(o(c))if(e.hasChildNodes())if(o(i=u)&&o(i=i.domProps)&&o(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var l=!0,f=e.firstChild,d=0;d<c.length;d++){if(!f||!S(f,c[d],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else h(t,c,n);if(o(u)){var v=!1;for(var g in u)if(!A(g)){v=!0,m(t,n);break}!v&&u.class&&et(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!i(t)){var u,l=!1,p=[];if(i(e))l=!0,f(t,p);else{var d=o(e.nodeType);if(!d&&Gn(e,t))x(e,t,p,null,null,s);else{if(d){if(1===e.nodeType&&e.hasAttribute($)&&(e.removeAttribute($),n=!0),a(n)&&S(e,t,p))return C(t,p,!0),e;u=e,e=new de(c.tagName(u).toLowerCase(),{},[],void 0,u)}var h=e.elm,v=c.parentNode(h);if(f(t,p,h._leaveCb?null:v,c.nextSibling(h)),o(t.parent))for(var m=t.parent,y=g(t);m;){for(var _=0;_<r.destroy.length;++_)r.destroy[_](m);if(m.elm=t.elm,y){for(var T=0;T<r.create.length;++T)r.create[T](zn,m);var E=m.data.hook.insert;if(E.merged)for(var A=1;A<E.fns.length;A++)E.fns[A]()}else Vn(m);m=m.parent}o(v)?w(0,[e],0,0):o(e.tag)&&b(e)}}return C(t,p,l),t.elm}o(e)&&b(e)}}({nodeOps:Bn,modules:[ar,hr,Wr,Ur,ti,V?{create:Si,activate:Si,remove:function(e,t){!0!==e.data.show?xi(e,t):t()}}:{}].concat(nr)});Q&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&Ri(e,"input")});var Di={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ot(n,"postpatch",function(){Di.componentUpdated(e,t,n)}):Ii(e,t,n.context),e._vOptions=[].map.call(e.options,Li)):("textarea"===n.tag||Wn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",ji),e.addEventListener("compositionend",Pi),e.addEventListener("change",Pi),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Ii(e,t,n.context);var r=e._vOptions,i=e._vOptions=[].map.call(e.options,Li);if(i.some(function(e,t){return!j(e,r[t])}))(e.multiple?t.value.some(function(e){return Ni(e,i)}):t.value!==t.oldValue&&Ni(t.value,i))&&Ri(e,"change")}}};function Ii(e,t,n){ki(e,t,n),(X||Y)&&setTimeout(function(){ki(e,t,n)},0)}function ki(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,u=e.options.length;s<u;s++)if(a=e.options[s],i)o=P(r,Li(a))>-1,a.selected!==o&&(a.selected=o);else if(j(Li(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Ni(e,t){return t.every(function(t){return!j(t,e)})}function Li(e){return"_value"in e?e._value:e.value}function ji(e){e.target.composing=!0}function Pi(e){e.target.composing&&(e.target.composing=!1,Ri(e.target,"input"))}function Ri(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function $i(e){return!e.componentInstance||e.data&&e.data.transition?e:$i(e.componentInstance._vnode)}var Hi={model:Di,show:{bind:function(e,t,n){var r=t.value,i=(n=$i(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i?(n.data.show=!0,Ei(n,function(){e.style.display=o})):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=$i(n)).data&&n.data.transition?(n.data.show=!0,r?Ei(n,function(){e.style.display=e.__vOriginalDisplay}):xi(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}}},Mi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Fi(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Fi(ft(t.children)):e}function Wi(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[E(o)]=i[o];return t}function qi(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Bi=function(e){return e.tag||lt(e)},Ui=function(e){return"show"===e.name},Vi={name:"transition",props:Mi,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Bi)).length){0;var r=this.mode;0;var i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var o=Fi(i);if(!o)return i;if(this._leaving)return qi(e,i);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:s(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var u=(o.data||(o.data={})).transition=Wi(this),c=this._vnode,l=Fi(c);if(o.data.directives&&o.data.directives.some(Ui)&&(o.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,l)&&!lt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=D({},u);if("out-in"===r)return this._leaving=!0,ot(f,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),qi(e,i);if("in-out"===r){if(lt(o))return c;var p,d=function(){p()};ot(u,"afterEnter",d),ot(u,"enterCancelled",d),ot(f,"delayLeave",function(e){p=e})}}return i}}},zi=D({tag:String,moveClass:String},Mi);function Ki(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Gi(e){e.data.newPos=e.elm.getBoundingClientRect()}function Xi(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete zi.mode;var Qi={Transition:Vi,TransitionGroup:{props:zi,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var i=bt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Wi(this),s=0;s<i.length;s++){var u=i[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var c=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?c.push(p):l.push(p)}this.kept=e(t,null,c),this.removed=l}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ki),e.forEach(Gi),e.forEach(Xi),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;gi(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(fi,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(fi,e),n._moveCb=null,mi(n,t))})}}))},methods:{hasMove:function(e,t){if(!si)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){ii(n,e)}),ri(n,t),n.style.display="none",this.$el.appendChild(n);var r=bi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};hn.config.mustUseProp=xn,hn.config.isReservedTag=Hn,hn.config.isReservedAttr=Tn,hn.config.getTagNamespace=Mn,hn.config.isUnknownElement=function(e){if(!V)return!0;if(Hn(e))return!1;if(e=e.toLowerCase(),null!=Fn[e])return Fn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Fn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Fn[e]=/HTMLUnknownElement/.test(t.toString())},D(hn.options.directives,Hi),D(hn.options.components,Qi),hn.prototype.__patch__=V?Oi:k,hn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=ve),Et(e,"beforeMount"),r=function(){e._update(e._render(),n)},new Nt(e,r,k,{before:function(){e._isMounted&&!e._isDestroyed&&Et(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Et(e,"mounted")),e}(this,e=e&&V?qn(e):void 0,t)},V&&setTimeout(function(){F.devtools&&re&&re.emit("init",hn)},0);var Yi=/\{\{((?:.|\r?\n)+?)\}\}/g,Ji=/[-.*+?^${}()|[\]\/\\]/g,Zi=w(function(e){var t=e[0].replace(Ji,"\\$&"),n=e[1].replace(Ji,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});var eo={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Ar(e,"class");n&&(e.staticClass=JSON.stringify(n));var r=Cr(e,"class",!1);r&&(e.classBinding=r)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var to,no={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Ar(e,"style");n&&(e.staticStyle=JSON.stringify(Vr(n)));var r=Cr(e,"style",!1);r&&(e.styleBinding=r)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},ro=function(e){return(to=to||document.createElement("div")).innerHTML=e,to.textContent},io=v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),oo=v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ao=v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),so=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,uo="[a-zA-Z_][\\w\\-\\.]*",co="((?:"+uo+"\\:)?"+uo+")",lo=new RegExp("^<"+co),fo=/^\s*(\/?)>/,po=new RegExp("^<\\/"+co+"[^>]*>"),ho=/^<!DOCTYPE [^>]+>/i,vo=/^<!\--/,go=/^<!\[/,mo=v("script,style,textarea",!0),yo={},_o={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t"},bo=/&(?:lt|gt|quot|amp);/g,wo=/&(?:lt|gt|quot|amp|#10|#9);/g,To=v("pre,textarea",!0),Eo=function(e,t){return e&&To(e)&&"\n"===t[0]};function xo(e,t){var n=t?wo:bo;return e.replace(n,function(e){return _o[e]})}var Co,Ao,So,Oo,Do,Io,ko,No,Lo=/^@|^v-on:/,jo=/^v-|^@|^:/,Po=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ro=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,$o=/^\(|\)$/g,Ho=/:(.*)$/,Mo=/^:|^v-bind:/,Fo=/\.[^.]+/g,Wo=w(ro);function qo(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:Go(t),parent:n,children:[]}}function Bo(e,t){Co=t.warn||yr,Io=t.isPreTag||N,ko=t.mustUseProp||N,No=t.getTagNamespace||N,So=_r(t.modules,"transformNode"),Oo=_r(t.modules,"preTransformNode"),Do=_r(t.modules,"postTransformNode"),Ao=t.delimiters;var n,r,i=[],o=!1!==t.preserveWhitespace,a=!1,s=!1;function u(e){e.pre&&(a=!1),Io(e.tag)&&(s=!1);for(var n=0;n<Do.length;n++)Do[n](e,t)}return function(e,t){for(var n,r,i=[],o=t.expectHTML,a=t.isUnaryTag||N,s=t.canBeLeftOpenTag||N,u=0;e;){if(n=e,r&&mo(r)){var c=0,l=r.toLowerCase(),f=yo[l]||(yo[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),p=e.replace(f,function(e,n,r){return c=r.length,mo(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Eo(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});u+=e.length-p.length,e=p,A(l,u-c,u)}else{var d=e.indexOf("<");if(0===d){if(vo.test(e)){var h=e.indexOf("--\x3e");if(h>=0){t.shouldKeepComment&&t.comment(e.substring(4,h)),E(h+3);continue}}if(go.test(e)){var v=e.indexOf("]>");if(v>=0){E(v+2);continue}}var g=e.match(ho);if(g){E(g[0].length);continue}var m=e.match(po);if(m){var y=u;E(m[0].length),A(m[1],y,u);continue}var _=x();if(_){C(_),Eo(_.tagName,e)&&E(1);continue}}var b=void 0,w=void 0,T=void 0;if(d>=0){for(w=e.slice(d);!(po.test(w)||lo.test(w)||vo.test(w)||go.test(w)||(T=w.indexOf("<",1))<0);)d+=T,w=e.slice(d);b=e.substring(0,d),E(d)}d<0&&(b=e,e=""),t.chars&&b&&t.chars(b)}if(e===n){t.chars&&t.chars(e);break}}function E(t){u+=t,e=e.substring(t)}function x(){var t=e.match(lo);if(t){var n,r,i={tagName:t[1],attrs:[],start:u};for(E(t[0].length);!(n=e.match(fo))&&(r=e.match(so));)E(r[0].length),i.attrs.push(r);if(n)return i.unarySlash=n[1],E(n[0].length),i.end=u,i}}function C(e){var n=e.tagName,u=e.unarySlash;o&&("p"===r&&ao(n)&&A(r),s(n)&&r===n&&A(n));for(var c=a(n)||!!u,l=e.attrs.length,f=new Array(l),p=0;p<l;p++){var d=e.attrs[p],h=d[3]||d[4]||d[5]||"",v="a"===n&&"href"===d[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[p]={name:d[1],value:xo(h,v)}}c||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f}),r=n),t.start&&t.start(n,f,c,e.start,e.end)}function A(e,n,o){var a,s;if(null==n&&(n=u),null==o&&(o=u),e)for(s=e.toLowerCase(),a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var c=i.length-1;c>=a;c--)t.end&&t.end(i[c].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,o):"p"===s&&(t.start&&t.start(e,[],!1,n,o),t.end&&t.end(e,n,o))}A()}(e,{warn:Co,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,start:function(e,o,c){var l=r&&r.ns||No(e);X&&"svg"===l&&(o=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];Xo.test(r.name)||(r.name=r.name.replace(Qo,""),t.push(r))}return t}(o));var f,p=qo(e,o,r);l&&(p.ns=l),"style"!==(f=p).tag&&("script"!==f.tag||f.attrsMap.type&&"text/javascript"!==f.attrsMap.type)||ne()||(p.forbidden=!0);for(var d=0;d<Oo.length;d++)p=Oo[d](p,t)||p;function h(e){0}if(a||(!function(e){null!=Ar(e,"v-pre")&&(e.pre=!0)}(p),p.pre&&(a=!0)),Io(p.tag)&&(s=!0),a?function(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}(p):p.processed||(Vo(p),function(e){var t=Ar(e,"v-if");if(t)e.if=t,zo(e,{exp:t,block:e});else{null!=Ar(e,"v-else")&&(e.else=!0);var n=Ar(e,"v-else-if");n&&(e.elseif=n)}}(p),function(e){null!=Ar(e,"v-once")&&(e.once=!0)}(p),Uo(p,t)),n?i.length||n.if&&(p.elseif||p.else)&&(h(),zo(n,{exp:p.elseif,block:p})):(n=p,h()),r&&!p.forbidden)if(p.elseif||p.else)!function(e,t){var n=function(e){var t=e.length;for(;t--;){if(1===e[t].type)return e[t];e.pop()}}(t.children);n&&n.if&&zo(n,{exp:e.elseif,block:e})}(p,r);else if(p.slotScope){r.plain=!1;var v=p.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[v]=p}else r.children.push(p),p.parent=r;c?u(p):(r=p,i.push(p))},end:function(){var e=i[i.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&!s&&e.children.pop(),i.length-=1,r=i[i.length-1],u(e)},chars:function(e){if(r&&(!X||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var t,n,i=r.children;if(e=s||e.trim()?"script"===(t=r).tag||"style"===t.tag?e:Wo(e):o&&i.length?" ":"")!a&&" "!==e&&(n=function(e,t){var n=t?Zi(t):Yi;if(n.test(e)){for(var r,i,o,a=[],s=[],u=n.lastIndex=0;r=n.exec(e);){(i=r.index)>u&&(s.push(o=e.slice(u,i)),a.push(JSON.stringify(o)));var c=gr(r[1].trim());a.push("_s("+c+")"),s.push({"@binding":c}),u=i+r[0].length}return u<e.length&&(s.push(o=e.slice(u)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}(e,Ao))?i.push({type:2,expression:n.expression,tokens:n.tokens,text:e}):" "===e&&i.length&&" "===i[i.length-1].text||i.push({type:3,text:e})}},comment:function(e){r.children.push({type:3,text:e,isComment:!0})}}),n}function Uo(e,t){var n,r;!function(e){var t=Cr(e,"key");if(t){e.key=t}}(e),e.plain=!e.key&&!e.attrsList.length,(r=Cr(n=e,"ref"))&&(n.ref=r,n.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(n)),function(e){if("slot"===e.tag)e.slotName=Cr(e,"name");else{var t;"template"===e.tag?(t=Ar(e,"scope"),e.slotScope=t||Ar(e,"slot-scope")):(t=Ar(e,"slot-scope"))&&(e.slotScope=t);var n=Cr(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,"template"===e.tag||e.slotScope||wr(e,"slot",n))}}(e),function(e){var t;(t=Cr(e,"is"))&&(e.component=t);null!=Ar(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var i=0;i<So.length;i++)e=So[i](e,t)||e;!function(e){var t,n,r,i,o,a,s,u=e.attrsList;for(t=0,n=u.length;t<n;t++){if(r=i=u[t].name,o=u[t].value,jo.test(r))if(e.hasBindings=!0,(a=Ko(r))&&(r=r.replace(Fo,"")),Mo.test(r))r=r.replace(Mo,""),o=gr(o),s=!1,a&&(a.prop&&(s=!0,"innerHtml"===(r=E(r))&&(r="innerHTML")),a.camel&&(r=E(r)),a.sync&&xr(e,"update:"+E(r),Or(o,"$event"))),s||!e.component&&ko(e.tag,e.attrsMap.type,r)?br(e,r,o):wr(e,r,o);else if(Lo.test(r))r=r.replace(Lo,""),xr(e,r,o,a,!1);else{var c=(r=r.replace(jo,"")).match(Ho),l=c&&c[1];l&&(r=r.slice(0,-(l.length+1))),Er(e,r,i,o,l,a)}else wr(e,r,JSON.stringify(o)),!e.component&&"muted"===r&&ko(e.tag,e.attrsMap.type,r)&&br(e,r,"true")}}(e)}function Vo(e){var t;if(t=Ar(e,"v-for")){var n=function(e){var t=e.match(Po);if(!t)return;var n={};n.for=t[2].trim();var r=t[1].trim().replace($o,""),i=r.match(Ro);i?(n.alias=r.replace(Ro,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(t);n&&D(e,n)}}function zo(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Ko(e){var t=e.match(Fo);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function Go(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}var Xo=/^xmlns:NS\d+/,Qo=/^NS\d+:/;function Yo(e){return qo(e.tag,e.attrsList.slice(),e.parent)}var Jo=[eo,no,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Cr(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=Ar(e,"v-if",!0),o=i?"&&("+i+")":"",a=null!=Ar(e,"v-else",!0),s=Ar(e,"v-else-if",!0),u=Yo(e);Vo(u),Tr(u,"type","checkbox"),Uo(u,t),u.processed=!0,u.if="("+n+")==='checkbox'"+o,zo(u,{exp:u.if,block:u});var c=Yo(e);Ar(c,"v-for",!0),Tr(c,"type","radio"),Uo(c,t),zo(u,{exp:"("+n+")==='radio'"+o,block:c});var l=Yo(e);return Ar(l,"v-for",!0),Tr(l,":type",n),Uo(l,t),zo(u,{exp:i,block:l}),a?u.else=!0:s&&(u.elseif=s),u}}}}];var Zo,ea,ta={expectHTML:!0,modules:Jo,directives:{model:function(e,t,n){n;var r=t.value,i=t.modifiers,o=e.tag,a=e.attrsMap.type;if(e.component)return Sr(e,r,i),!1;if("select"===o)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Or(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),xr(e,"change",r,null,!0)}(e,r,i);else if("input"===o&&"checkbox"===a)!function(e,t,n){var r=n&&n.number,i=Cr(e,"value")||"null",o=Cr(e,"true-value")||"true",a=Cr(e,"false-value")||"false";br(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===o?":("+t+")":":_q("+t+","+o+")")),xr(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Or(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Or(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Or(t,"$$c")+"}",null,!0)}(e,r,i);else if("input"===o&&"radio"===a)!function(e,t,n){var r=n&&n.number,i=Cr(e,"value")||"null";br(e,"checked","_q("+t+","+(i=r?"_n("+i+")":i)+")"),xr(e,"change",Or(t,i),null,!0)}(e,r,i);else if("input"===o||"textarea"===o)!function(e,t,n){var r=e.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,u=!o&&"range"!==r,c=o?"change":"range"===r?Pr:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var f=Or(t,l);u&&(f="if($event.target.composing)return;"+f),br(e,"value","("+t+")"),xr(e,c,f,null,!0),(s||a)&&xr(e,"blur","$forceUpdate()")}(e,r,i);else if(!F.isReservedTag(o))return Sr(e,r,i),!1;return!0},text:function(e,t){t.value&&br(e,"textContent","_s("+t.value+")")},html:function(e,t){t.value&&br(e,"innerHTML","_s("+t.value+")")}},isPreTag:function(e){return"pre"===e},isUnaryTag:io,mustUseProp:xn,canBeLeftOpenTag:oo,isReservedTag:Hn,getTagNamespace:Mn,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}(Jo)},na=w(function(e){return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))});function ra(e,t){e&&(Zo=na(t.staticKeys||""),ea=t.isReservedTag||N,function e(t){t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||g(e.tag)||!ea(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Zo)))}(t);if(1===t.type){if(!ea(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,r=t.children.length;n<r;n++){var i=t.children[n];e(i),i.static||(t.static=!1)}if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++){var s=t.ifConditions[o].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var r=0,i=t.children.length;r<i;r++)e(t.children[r],n||!!t.for);if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++)e(t.ifConditions[o].block,n)}}(e,!1))}var ia=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,oa=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,aa={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},sa={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},ua=function(e){return"if("+e+")return null;"},ca={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ua("$event.target !== $event.currentTarget"),ctrl:ua("!$event.ctrlKey"),shift:ua("!$event.shiftKey"),alt:ua("!$event.altKey"),meta:ua("!$event.metaKey"),left:ua("'button' in $event && $event.button !== 0"),middle:ua("'button' in $event && $event.button !== 1"),right:ua("'button' in $event && $event.button !== 2")};function la(e,t){var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+fa(r,e[r])+",";return n.slice(0,-1)+"}"}function fa(e,t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return fa(e,t)}).join(",")+"]";var n=oa.test(t.value),r=ia.test(t.value);if(t.modifiers){var i="",o="",a=[];for(var s in t.modifiers)if(ca[s])o+=ca[s],aa[s]&&a.push(s);else if("exact"===s){var u=t.modifiers;o+=ua(["ctrl","shift","alt","meta"].filter(function(e){return!u[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else a.push(s);return a.length&&(i+=function(e){return"if(!('button' in $event)&&"+e.map(pa).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(n?"return "+t.value+"($event)":r?"return ("+t.value+")($event)":t.value)+"}"}return n||r?t.value:"function($event){"+t.value+"}"}function pa(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=aa[e],r=sa[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var da={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:k},ha=function(e){this.options=e,this.warn=e.warn||yr,this.transforms=_r(e.modules,"transformCode"),this.dataGenFns=_r(e.modules,"genData"),this.directives=D(D({},da),e.directives);var t=e.isReservedTag||N;this.maybeComponent=function(e){return!(t(e.tag)&&!e.component)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function va(e,t){var n=new ha(t);return{render:"with(this){return "+(e?ga(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function ga(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return ma(e,t);if(e.once&&!e.onceProcessed)return ya(e,t);if(e.for&&!e.forProcessed)return function(e,t,n,r){var i=e.for,o=e.alias,a=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";0;return e.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||ga)(e,t)+"})"}(e,t);if(e.if&&!e.ifProcessed)return _a(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=Ta(e,t),i="_t("+n+(r?","+r:""),o=e.attrs&&"{"+e.attrs.map(function(e){return E(e.name)+":"+e.value}).join(",")+"}",a=e.attrsMap["v-bind"];!o&&!a||r||(i+=",null");o&&(i+=","+o);a&&(i+=(o?"":",null")+","+a);return i+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:Ta(t,n,!0);return"_c("+e+","+ba(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=ba(e,t));var i=e.inlineTemplate?null:Ta(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<t.transforms.length;o++)n=t.transforms[o](e,n);return n}return Ta(e,t)||"void 0"}function ma(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+ga(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function ya(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return _a(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+ga(e,t)+","+t.onceId+++","+n+")":ga(e,t)}return ma(e,t)}function _a(e,t,n,r){return e.ifProcessed=!0,function e(t,n,r,i){if(!t.length)return i||"_e()";var o=t.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+e(t,n,r,i):""+a(o.block);function a(e){return r?r(e,n):e.once?ya(e,n):ga(e,n)}}(e.ifConditions.slice(),t,n,r)}function ba(e,t){var n="{",r=function(e,t){var n=e.directives;if(!n)return;var r,i,o,a,s="directives:[",u=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var c=t.directives[o.name];c&&(a=!!c(e,o,t.warn)),a&&(u=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?',arg:"'+o.arg+'"':"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(u)return s.slice(0,-1)+"]"}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:{"+Ca(e.attrs)+"},"),e.props&&(n+="domProps:{"+Ca(e.props)+"},"),e.events&&(n+=la(e.events,!1)+","),e.nativeEvents&&(n+=la(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t){return"scopedSlots:_u(["+Object.keys(e).map(function(n){return wa(n,e[n],t)}).join(",")+"])"}(e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var o=function(e,t){var n=e.children[0];0;if(1===n.type){var r=va(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}(e,t);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function wa(e,t,n){return t.for&&!t.forProcessed?function(e,t,n){var r=t.for,i=t.alias,o=t.iterator1?","+t.iterator1:"",a=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,"_l(("+r+"),function("+i+o+a+"){return "+wa(e,t,n)+"})"}(e,t,n):"{key:"+e+",fn:"+("function("+String(t.slotScope)+"){return "+("template"===t.tag?t.if?"("+t.if+")?"+(Ta(t,n)||"undefined")+":undefined":Ta(t,n)||"undefined":ga(t,n))+"}")+"}"}function Ta(e,t,n,r,i){var o=e.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?t.maybeComponent(a)?",1":",0":"";return""+(r||ga)(a,t)+s}var u=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var i=e[r];if(1===i.type){if(Ea(i)||i.ifConditions&&i.ifConditions.some(function(e){return Ea(e.block)})){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}(o,t.maybeComponent):0,c=i||xa;return"["+o.map(function(e){return c(e,t)}).join(",")+"]"+(u?","+u:"")}}function Ea(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function xa(e,t){return 1===e.type?ga(e,t):3===e.type&&e.isComment?(r=e,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=e).type?n.expression:Aa(JSON.stringify(n.text)))+")";var n,r}function Ca(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+Aa(r.value)+","}return t.slice(0,-1)}function Aa(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function Sa(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),k}}function Oa(e){var t=Object.create(null);return function(n,r,i){(r=D({},r)).warn;delete r.warn;var o=r.delimiters?String(r.delimiters)+n:n;if(t[o])return t[o];var a=e(n,r);var s={},u=[];return s.render=Sa(a.render,u),s.staticRenderFns=a.staticRenderFns.map(function(e){return Sa(e,u)}),t[o]=s}}var Da,Ia,ka=(Da=function(e,t){var n=Bo(e.trim(),t);!1!==t.optimize&&ra(n,t);var r=va(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(e){function t(t,n){var r=Object.create(e),i=[],o=[];if(r.warn=function(e,t){(t?o:i).push(e)},n)for(var a in n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=D(Object.create(e.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(r[a]=n[a]);var s=Da(t,r);return s.errors=i,s.tips=o,s}return{compile:t,compileToFunctions:Oa(t)}})(ta),Na=(ka.compile,ka.compileToFunctions);function La(e){return(Ia=Ia||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Ia.innerHTML.indexOf("&#10;")>0}var ja=!!V&&La(!1),Pa=!!V&&La(!0),Ra=w(function(e){var t=qn(e);return t&&t.innerHTML}),$a=hn.prototype.$mount;hn.prototype.$mount=function(e,t){if((e=e&&qn(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=Ra(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){0;var i=Na(r,{shouldDecodeNewlines:ja,shouldDecodeNewlinesForHref:Pa,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return $a.call(this,e,t)},hn.compile=Na,e.exports=hn}).call(this,n(1),n(37).setImmediate)},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(38),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,a,s,u=1,c={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){o.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return c[u]=i,r(u),u++},p.clearImmediate=d}function d(e){delete c[e]}function h(e){if(l)setTimeout(h,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(1),n(6))},function(e,t,n){"use strict";n.r(t);var r=function(e,t,n,r,i,o,a,s){var u,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},c._ssrRegister=u):i&&(u=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),u)if(c.functional){c._injectStyles=u;var l=c.render;c.render=function(e,t){return u.call(t),l(e,t)}}else{var f=c.beforeCreate;c.beforeCreate=f?[].concat(f,u):[u]}return{exports:e,options:c}}({mounted:function(){console.log("Component mounted.")}},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"container"},[t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-md-8"},[t("div",{staticClass:"card"},[t("div",{staticClass:"card-header"},[this._v("Example Component")]),this._v(" "),t("div",{staticClass:"card-body"},[this._v("\n                    I'm an example component.\n                ")])])])])])}],!1,null,null,null);r.options.__file="ExampleComponent.vue";t.default=r.exports},function(e,t){}]);
Index: laravel58/public/css/app.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/public/css/app.css	(date 1592582522775)
+++ laravel58/public/css/app.css	(date 1592582522775)
@@ -0,0 +1,8 @@
+@import url(https://fonts.googleapis.com/css?family=Nunito);
+
+/*!
+ * Bootstrap v4.1.3 (https://getbootstrap.com/)
+ * Copyright 2011-2018 The Bootstrap Authors
+ * Copyright 2011-2018 Twitter, Inc.
+ * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
+ */:root{--blue:#3490dc;--indigo:#6574cd;--purple:#9561e2;--pink:#f66d9b;--red:#e3342f;--orange:#f6993f;--yellow:#ffed4a;--green:#38c172;--teal:#4dc0b5;--cyan:#6cb2eb;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#3490dc;--secondary:#6c757d;--success:#38c172;--info:#6cb2eb;--warning:#ffed4a;--danger:#e3342f;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:"Nunito",sans-serif;--font-family-monospace:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace}*,:after,:before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0)}@-ms-viewport{width:device-width}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:Nunito,sans-serif;font-size:.9rem;font-weight:400;line-height:1.6;color:#212529;text-align:left;background-color:#f8fafc}[tabindex="-1"]:focus{outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{font-style:normal;line-height:inherit}address,dl,ol,ul{margin-bottom:1rem}dl,ol,ul{margin-top:0}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#3490dc;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#1d68a7;text-decoration:underline}a:not([href]):not([tabindex]),a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{border-style:none}img,svg{vertical-align:middle}svg{overflow:hidden}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}.h1,h1{font-size:2.25rem}.h2,h2{font-size:1.8rem}.h3,h3{font-size:1.575rem}.h4,h4{font-size:1.35rem}.h5,h5{font-size:1.125rem}.h6,h6{font-size:.9rem}.lead{font-size:1.125rem;font-weight:300}.display-1{font-size:6rem}.display-1,.display-2{font-weight:300;line-height:1.2}.display-2{font-size:5.5rem}.display-3{font-size:4.5rem}.display-3,.display-4{font-weight:300;line-height:1.2}.display-4{font-size:3.5rem}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-inline,.list-unstyled{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.125rem}.blockquote-footer{display:block;font-size:80%;color:#6c757d}.blockquote-footer:before{content:"\2014\A0"}.img-fluid,.img-thumbnail{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#f8fafc;border:1px solid #dee2e6;border-radius:.25rem}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#6c757d}code{font-size:87.5%;color:#f66d9b;word-break:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container{max-width:540px}}@media (min-width:768px){.container{max-width:720px}}@media (min-width:992px){.container{max-width:960px}}@media (min-width:1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-12,.col-auto,.col-lg,.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-auto,.col-md,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-md-auto,.col-sm,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-auto{position:relative;width:100%;min-height:1px;padding-right:15px;padding-left:15px}.col{flex-basis:0;flex-grow:1;max-width:100%}.col-auto{flex:0 0 auto;width:auto;max-width:none}.col-1{flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-2{flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-3{flex:0 0 25%;max-width:25%}.col-4{flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-5{flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-6{flex:0 0 50%;max-width:50%}.col-7{flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-8{flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-9{flex:0 0 75%;max-width:75%}.col-10{flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-11{flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-12{flex:0 0 100%;max-width:100%}.order-first{order:-1}.order-last{order:13}.order-0{order:0}.order-1{order:1}.order-2{order:2}.order-3{order:3}.order-4{order:4}.order-5{order:5}.order-6{order:6}.order-7{order:7}.order-8{order:8}.order-9{order:9}.order-10{order:10}.order-11{order:11}.order-12{order:12}.offset-1{margin-left:8.3333333333%}.offset-2{margin-left:16.6666666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.3333333333%}.offset-5{margin-left:41.6666666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.3333333333%}.offset-8{margin-left:66.6666666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.3333333333%}.offset-11{margin-left:91.6666666667%}@media (min-width:576px){.col-sm{flex-basis:0;flex-grow:1;max-width:100%}.col-sm-auto{flex:0 0 auto;width:auto;max-width:none}.col-sm-1{flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-sm-2{flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-sm-3{flex:0 0 25%;max-width:25%}.col-sm-4{flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-sm-5{flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-sm-6{flex:0 0 50%;max-width:50%}.col-sm-7{flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-sm-8{flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-sm-9{flex:0 0 75%;max-width:75%}.col-sm-10{flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-sm-11{flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-sm-12{flex:0 0 100%;max-width:100%}.order-sm-first{order:-1}.order-sm-last{order:13}.order-sm-0{order:0}.order-sm-1{order:1}.order-sm-2{order:2}.order-sm-3{order:3}.order-sm-4{order:4}.order-sm-5{order:5}.order-sm-6{order:6}.order-sm-7{order:7}.order-sm-8{order:8}.order-sm-9{order:9}.order-sm-10{order:10}.order-sm-11{order:11}.order-sm-12{order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.3333333333%}.offset-sm-2{margin-left:16.6666666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.3333333333%}.offset-sm-5{margin-left:41.6666666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.3333333333%}.offset-sm-8{margin-left:66.6666666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.3333333333%}.offset-sm-11{margin-left:91.6666666667%}}@media (min-width:768px){.col-md{flex-basis:0;flex-grow:1;max-width:100%}.col-md-auto{flex:0 0 auto;width:auto;max-width:none}.col-md-1{flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-md-2{flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-md-3{flex:0 0 25%;max-width:25%}.col-md-4{flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-md-5{flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-md-6{flex:0 0 50%;max-width:50%}.col-md-7{flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-md-8{flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-md-9{flex:0 0 75%;max-width:75%}.col-md-10{flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-md-11{flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-md-12{flex:0 0 100%;max-width:100%}.order-md-first{order:-1}.order-md-last{order:13}.order-md-0{order:0}.order-md-1{order:1}.order-md-2{order:2}.order-md-3{order:3}.order-md-4{order:4}.order-md-5{order:5}.order-md-6{order:6}.order-md-7{order:7}.order-md-8{order:8}.order-md-9{order:9}.order-md-10{order:10}.order-md-11{order:11}.order-md-12{order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.3333333333%}.offset-md-2{margin-left:16.6666666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.3333333333%}.offset-md-5{margin-left:41.6666666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.3333333333%}.offset-md-8{margin-left:66.6666666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.3333333333%}.offset-md-11{margin-left:91.6666666667%}}@media (min-width:992px){.col-lg{flex-basis:0;flex-grow:1;max-width:100%}.col-lg-auto{flex:0 0 auto;width:auto;max-width:none}.col-lg-1{flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-lg-2{flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-lg-3{flex:0 0 25%;max-width:25%}.col-lg-4{flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-lg-5{flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-lg-6{flex:0 0 50%;max-width:50%}.col-lg-7{flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-lg-8{flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-lg-9{flex:0 0 75%;max-width:75%}.col-lg-10{flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-lg-11{flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-lg-12{flex:0 0 100%;max-width:100%}.order-lg-first{order:-1}.order-lg-last{order:13}.order-lg-0{order:0}.order-lg-1{order:1}.order-lg-2{order:2}.order-lg-3{order:3}.order-lg-4{order:4}.order-lg-5{order:5}.order-lg-6{order:6}.order-lg-7{order:7}.order-lg-8{order:8}.order-lg-9{order:9}.order-lg-10{order:10}.order-lg-11{order:11}.order-lg-12{order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.3333333333%}.offset-lg-2{margin-left:16.6666666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.3333333333%}.offset-lg-5{margin-left:41.6666666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.3333333333%}.offset-lg-8{margin-left:66.6666666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.3333333333%}.offset-lg-11{margin-left:91.6666666667%}}@media (min-width:1200px){.col-xl{flex-basis:0;flex-grow:1;max-width:100%}.col-xl-auto{flex:0 0 auto;width:auto;max-width:none}.col-xl-1{flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-xl-2{flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-xl-3{flex:0 0 25%;max-width:25%}.col-xl-4{flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-xl-5{flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-xl-6{flex:0 0 50%;max-width:50%}.col-xl-7{flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-xl-8{flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-xl-9{flex:0 0 75%;max-width:75%}.col-xl-10{flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-xl-11{flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-xl-12{flex:0 0 100%;max-width:100%}.order-xl-first{order:-1}.order-xl-last{order:13}.order-xl-0{order:0}.order-xl-1{order:1}.order-xl-2{order:2}.order-xl-3{order:3}.order-xl-4{order:4}.order-xl-5{order:5}.order-xl-6{order:6}.order-xl-7{order:7}.order-xl-8{order:8}.order-xl-9{order:9}.order-xl-10{order:10}.order-xl-11{order:11}.order-xl-12{order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.3333333333%}.offset-xl-2{margin-left:16.6666666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.3333333333%}.offset-xl-5{margin-left:41.6666666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.3333333333%}.offset-xl-8{margin-left:66.6666666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.3333333333%}.offset-xl-11{margin-left:91.6666666667%}}.table{width:100%;margin-bottom:1rem;background-color:transparent}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table .table{background-color:#f8fafc}.table-sm td,.table-sm th{padding:.3rem}.table-bordered,.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-borderless tbody+tbody,.table-borderless td,.table-borderless th,.table-borderless thead th{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#c6e0f5}.table-hover .table-primary:hover,.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#b0d4f1}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#d6d8db}.table-hover .table-secondary:hover,.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#c8cbcf}.table-success,.table-success>td,.table-success>th{background-color:#c7eed8}.table-hover .table-success:hover,.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b3e8ca}.table-info,.table-info>td,.table-info>th{background-color:#d6e9f9}.table-hover .table-info:hover,.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#c0ddf6}.table-warning,.table-warning>td,.table-warning>th{background-color:#fffacc}.table-hover .table-warning:hover,.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#fff8b3}.table-danger,.table-danger>td,.table-danger>th{background-color:#f7c6c5}.table-hover .table-danger:hover,.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f4b0af}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-hover .table-light:hover,.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-hover .table-dark:hover,.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th,.table-hover .table-active:hover,.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#f8fafc;background-color:#212529;border-color:#32383e}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#f8fafc;background-color:#212529}.table-dark td,.table-dark th,.table-dark thead th{border-color:#32383e}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:hsla(0,0%,100%,.05)}.table-dark.table-hover tbody tr:hover{background-color:hsla(0,0%,100%,.075)}@media (max-width:575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(2.19rem + 2px);padding:.375rem .75rem;font-size:.9rem;line-height:1.6;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media screen and (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#a1cbef;outline:0;box-shadow:0 0 0 .2rem rgba(52,144,220,.25)}.form-control::-webkit-input-placeholder{color:#6c757d;opacity:1}.form-control:-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.6}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:1.125rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:.7875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:.375rem;padding-bottom:.375rem;margin-bottom:0;line-height:1.6;color:#212529;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.68125rem + 2px);padding:.25rem .5rem;font-size:.7875rem;line-height:1.5;border-radius:.2rem}.form-control-lg{height:calc(2.6875rem + 2px);padding:.5rem 1rem;font-size:1.125rem;line-height:1.5;border-radius:.3rem}select.form-control[multiple],select.form-control[size],textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:flex;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label{color:#6c757d}.form-check-label{margin-bottom:0}.form-check-inline{display:inline-flex;align-items:center;padding-left:0;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#38c172}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.7875rem;line-height:1.6;color:#fff;background-color:rgba(56,193,114,.9);border-radius:.25rem}.custom-select.is-valid,.form-control.is-valid,.was-validated .custom-select:valid,.was-validated .form-control:valid{border-color:#38c172}.custom-select.is-valid:focus,.form-control.is-valid:focus,.was-validated .custom-select:valid:focus,.was-validated .form-control:valid:focus{border-color:#38c172;box-shadow:0 0 0 .2rem rgba(56,193,114,.25)}.custom-select.is-valid~.valid-feedback,.custom-select.is-valid~.valid-tooltip,.form-control-file.is-valid~.valid-feedback,.form-control-file.is-valid~.valid-tooltip,.form-control.is-valid~.valid-feedback,.form-control.is-valid~.valid-tooltip,.was-validated .custom-select:valid~.valid-feedback,.was-validated .custom-select:valid~.valid-tooltip,.was-validated .form-control-file:valid~.valid-feedback,.was-validated .form-control-file:valid~.valid-tooltip,.was-validated .form-control:valid~.valid-feedback,.was-validated .form-control:valid~.valid-tooltip{display:block}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#38c172}.form-check-input.is-valid~.valid-feedback,.form-check-input.is-valid~.valid-tooltip,.was-validated .form-check-input:valid~.valid-feedback,.was-validated .form-check-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#38c172}.custom-control-input.is-valid~.custom-control-label:before,.was-validated .custom-control-input:valid~.custom-control-label:before{background-color:#98e1b7}.custom-control-input.is-valid~.valid-feedback,.custom-control-input.is-valid~.valid-tooltip,.was-validated .custom-control-input:valid~.valid-feedback,.was-validated .custom-control-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid:checked~.custom-control-label:before,.was-validated .custom-control-input:valid:checked~.custom-control-label:before{background-color:#5cd08d}.custom-control-input.is-valid:focus~.custom-control-label:before,.was-validated .custom-control-input:valid:focus~.custom-control-label:before{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(56,193,114,.25)}.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#38c172}.custom-file-input.is-valid~.custom-file-label:after,.was-validated .custom-file-input:valid~.custom-file-label:after{border-color:inherit}.custom-file-input.is-valid~.valid-feedback,.custom-file-input.is-valid~.valid-tooltip,.was-validated .custom-file-input:valid~.valid-feedback,.was-validated .custom-file-input:valid~.valid-tooltip{display:block}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(56,193,114,.25)}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#e3342f}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.7875rem;line-height:1.6;color:#fff;background-color:rgba(227,52,47,.9);border-radius:.25rem}.custom-select.is-invalid,.form-control.is-invalid,.was-validated .custom-select:invalid,.was-validated .form-control:invalid{border-color:#e3342f}.custom-select.is-invalid:focus,.form-control.is-invalid:focus,.was-validated .custom-select:invalid:focus,.was-validated .form-control:invalid:focus{border-color:#e3342f;box-shadow:0 0 0 .2rem rgba(227,52,47,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.form-control-file.is-invalid~.invalid-feedback,.form-control-file.is-invalid~.invalid-tooltip,.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip,.was-validated .form-control-file:invalid~.invalid-feedback,.was-validated .form-control-file:invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#e3342f}.form-check-input.is-invalid~.invalid-feedback,.form-check-input.is-invalid~.invalid-tooltip,.was-validated .form-check-input:invalid~.invalid-feedback,.was-validated .form-check-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#e3342f}.custom-control-input.is-invalid~.custom-control-label:before,.was-validated .custom-control-input:invalid~.custom-control-label:before{background-color:#f2a29f}.custom-control-input.is-invalid~.invalid-feedback,.custom-control-input.is-invalid~.invalid-tooltip,.was-validated .custom-control-input:invalid~.invalid-feedback,.was-validated .custom-control-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid:checked~.custom-control-label:before,.was-validated .custom-control-input:invalid:checked~.custom-control-label:before{background-color:#e9605c}.custom-control-input.is-invalid:focus~.custom-control-label:before,.was-validated .custom-control-input:invalid:focus~.custom-control-label:before{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(227,52,47,.25)}.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#e3342f}.custom-file-input.is-invalid~.custom-file-label:after,.was-validated .custom-file-input:invalid~.custom-file-label:after{border-color:inherit}.custom-file-input.is-invalid~.invalid-feedback,.custom-file-input.is-invalid~.invalid-tooltip,.was-validated .custom-file-input:invalid~.invalid-feedback,.was-validated .custom-file-input:invalid~.invalid-tooltip{display:block}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(227,52,47,.25)}.form-inline{display:flex;flex-flow:row wrap;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{justify-content:center}.form-inline .form-group,.form-inline label{display:flex;align-items:center;margin-bottom:0}.form-inline .form-group{flex:0 0 auto;flex-flow:row wrap}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .custom-select,.form-inline .input-group{width:auto}.form-inline .form-check{display:flex;align-items:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{align-items:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.375rem .75rem;font-size:.9rem;line-height:1.6;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media screen and (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:focus,.btn:hover{text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(52,144,220,.25)}.btn.disabled,.btn:disabled{opacity:.65}.btn:not(:disabled):not(.disabled){cursor:pointer}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#3490dc;border-color:#3490dc}.btn-primary:hover{color:#fff;background-color:#227dc7;border-color:#2176bd}.btn-primary.focus,.btn-primary:focus{box-shadow:0 0 0 .2rem rgba(52,144,220,.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#3490dc;border-color:#3490dc}.btn-primary:not(:disabled):not(.disabled).active,.btn-primary:not(:disabled):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#2176bd;border-color:#1f6fb2}.btn-primary:not(:disabled):not(.disabled).active:focus,.btn-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,144,220,.5)}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5a6268;border-color:#545b62}.btn-secondary.focus,.btn-secondary:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:not(:disabled):not(.disabled).active,.btn-secondary:not(:disabled):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#545b62;border-color:#4e555b}.btn-secondary:not(:disabled):not(.disabled).active:focus,.btn-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-success{color:#fff;background-color:#38c172;border-color:#38c172}.btn-success:hover{color:#fff;background-color:#2fa360;border-color:#2d995b}.btn-success.focus,.btn-success:focus{box-shadow:0 0 0 .2rem rgba(56,193,114,.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#38c172;border-color:#38c172}.btn-success:not(:disabled):not(.disabled).active,.btn-success:not(:disabled):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#2d995b;border-color:#2a9055}.btn-success:not(:disabled):not(.disabled).active:focus,.btn-success:not(:disabled):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(56,193,114,.5)}.btn-info{color:#212529;background-color:#6cb2eb;border-color:#6cb2eb}.btn-info:hover{color:#fff;background-color:#4aa0e6;border-color:#3f9ae5}.btn-info.focus,.btn-info:focus{box-shadow:0 0 0 .2rem rgba(108,178,235,.5)}.btn-info.disabled,.btn-info:disabled{color:#212529;background-color:#6cb2eb;border-color:#6cb2eb}.btn-info:not(:disabled):not(.disabled).active,.btn-info:not(:disabled):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#3f9ae5;border-color:#3495e3}.btn-info:not(:disabled):not(.disabled).active:focus,.btn-info:not(:disabled):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,178,235,.5)}.btn-warning{color:#212529;background-color:#ffed4a;border-color:#ffed4a}.btn-warning:hover{color:#212529;background-color:#ffe924;border-color:#ffe817}.btn-warning.focus,.btn-warning:focus{box-shadow:0 0 0 .2rem rgba(255,237,74,.5)}.btn-warning.disabled,.btn-warning:disabled{color:#212529;background-color:#ffed4a;border-color:#ffed4a}.btn-warning:not(:disabled):not(.disabled).active,.btn-warning:not(:disabled):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#ffe817;border-color:#ffe70a}.btn-warning:not(:disabled):not(.disabled).active:focus,.btn-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,237,74,.5)}.btn-danger{color:#fff;background-color:#e3342f;border-color:#e3342f}.btn-danger:hover{color:#fff;background-color:#d0211c;border-color:#c51f1a}.btn-danger.focus,.btn-danger:focus{box-shadow:0 0 0 .2rem rgba(227,52,47,.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#e3342f;border-color:#e3342f}.btn-danger:not(:disabled):not(.disabled).active,.btn-danger:not(:disabled):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#c51f1a;border-color:#b91d19}.btn-danger:not(:disabled):not(.disabled).active:focus,.btn-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(227,52,47,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled).active,.btn-light:not(:disabled):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled).active:focus,.btn-light:not(:disabled):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled).active,.btn-dark:not(:disabled):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled).active:focus,.btn-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-primary{color:#3490dc;background-color:transparent;background-image:none;border-color:#3490dc}.btn-outline-primary:hover{color:#fff;background-color:#3490dc;border-color:#3490dc}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(52,144,220,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#3490dc;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled).active,.btn-outline-primary:not(:disabled):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#3490dc;border-color:#3490dc}.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,144,220,.5)}.btn-outline-secondary{color:#6c757d;background-color:transparent;background-image:none;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#6c757d;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled).active,.btn-outline-secondary:not(:disabled):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-success{color:#38c172;background-color:transparent;background-image:none;border-color:#38c172}.btn-outline-success:hover{color:#fff;background-color:#38c172;border-color:#38c172}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(56,193,114,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#38c172;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled).active,.btn-outline-success:not(:disabled):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#38c172;border-color:#38c172}.btn-outline-success:not(:disabled):not(.disabled).active:focus,.btn-outline-success:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(56,193,114,.5)}.btn-outline-info{color:#6cb2eb;background-color:transparent;background-image:none;border-color:#6cb2eb}.btn-outline-info:hover{color:#212529;background-color:#6cb2eb;border-color:#6cb2eb}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(108,178,235,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#6cb2eb;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled).active,.btn-outline-info:not(:disabled):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#212529;background-color:#6cb2eb;border-color:#6cb2eb}.btn-outline-info:not(:disabled):not(.disabled).active:focus,.btn-outline-info:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,178,235,.5)}.btn-outline-warning{color:#ffed4a;background-color:transparent;background-image:none;border-color:#ffed4a}.btn-outline-warning:hover{color:#212529;background-color:#ffed4a;border-color:#ffed4a}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,237,74,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffed4a;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled).active,.btn-outline-warning:not(:disabled):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffed4a;border-color:#ffed4a}.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,237,74,.5)}.btn-outline-danger{color:#e3342f;background-color:transparent;background-image:none;border-color:#e3342f}.btn-outline-danger:hover{color:#fff;background-color:#e3342f;border-color:#e3342f}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(227,52,47,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#e3342f;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled).active,.btn-outline-danger:not(:disabled):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#e3342f;border-color:#e3342f}.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(227,52,47,.5)}.btn-outline-light{color:#f8f9fa;background-color:transparent;background-image:none;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled).active,.btn-outline-light:not(:disabled):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled).active:focus,.btn-outline-light:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;background-color:transparent;background-image:none;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled).active,.btn-outline-dark:not(:disabled):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#3490dc;background-color:transparent}.btn-link:hover{color:#1d68a7;background-color:transparent}.btn-link.focus,.btn-link:focus,.btn-link:hover{text-decoration:underline;border-color:transparent}.btn-link.focus,.btn-link:focus{box-shadow:none}.btn-link.disabled,.btn-link:disabled{color:#6c757d;pointer-events:none}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.125rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.7875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{transition:opacity .15s linear}@media screen and (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;transition:height .35s ease}@media screen and (prefers-reduced-motion:reduce){.collapsing{transition:none}}.dropdown,.dropleft,.dropright,.dropup{position:relative}.dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:.9rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-right{right:0;left:auto}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:"";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:"";display:none}.dropleft .dropdown-toggle:before{display:inline-block;width:0;height:0;margin-right:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=top]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#3490dc}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.7875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;flex:0 1 auto}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-group-vertical .btn+.btn,.btn-group-vertical .btn+.btn-group,.btn-group-vertical .btn-group+.btn,.btn-group-vertical .btn-group+.btn-group,.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split:after,.dropright .dropdown-toggle-split:after,.dropup .dropdown-toggle-split:after{margin-left:0}.dropleft .dropdown-toggle-split:before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical .btn,.btn-group-vertical .btn-group{width:100%}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio],.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.custom-file,.input-group>.custom-select,.input-group>.form-control{position:relative;flex:1 1 auto;width:1%;margin-bottom:0}.input-group>.custom-file+.custom-file,.input-group>.custom-file+.custom-select,.input-group>.custom-file+.form-control,.input-group>.custom-select+.custom-file,.input-group>.custom-select+.custom-select,.input-group>.custom-select+.form-control,.input-group>.form-control+.custom-file,.input-group>.form-control+.custom-select,.input-group>.form-control+.form-control{margin-left:-1px}.input-group>.custom-file .custom-file-input:focus~.custom-file-label,.input-group>.custom-select:focus,.input-group>.form-control:focus{z-index:3}.input-group>.custom-file .custom-file-input:focus{z-index:4}.input-group>.custom-select:not(:last-child),.input-group>.form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-select:not(:first-child),.input-group>.form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-file{display:flex;align-items:center}.input-group>.custom-file:not(:last-child) .custom-file-label,.input-group>.custom-file:not(:last-child) .custom-file-label:after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-append,.input-group-prepend{display:flex}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;margin-bottom:0;font-size:.9rem;font-weight:400;line-height:1.6;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{height:calc(2.6875rem + 2px);padding:.5rem 1rem;font-size:1.125rem;line-height:1.5;border-radius:.3rem}.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{height:calc(1.68125rem + 2px);padding:.25rem .5rem;font-size:.7875rem;line-height:1.5;border-radius:.2rem}.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-append:not(:last-child)>.btn,.input-group>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.44rem;padding-left:1.5rem}.custom-control-inline{display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-label:before{color:#fff;background-color:#3490dc}.custom-control-input:focus~.custom-control-label:before{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(52,144,220,.25)}.custom-control-input:active~.custom-control-label:before{color:#fff;background-color:#cce3f6}.custom-control-input:disabled~.custom-control-label{color:#6c757d}.custom-control-input:disabled~.custom-control-label:before{background-color:#e9ecef}.custom-control-label{position:relative;margin-bottom:0}.custom-control-label:before{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#dee2e6}.custom-control-label:after,.custom-control-label:before{position:absolute;top:.22rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:""}.custom-control-label:after{background-repeat:no-repeat;background-position:50%;background-size:50% 50%}.custom-checkbox .custom-control-label:before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label:before{background-color:#3490dc}.custom-checkbox .custom-control-input:checked~.custom-control-label:after{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:before{background-color:#3490dc}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:after{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E")}.custom-checkbox .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(52,144,220,.5)}.custom-checkbox .custom-control-input:disabled:indeterminate~.custom-control-label:before{background-color:rgba(52,144,220,.5)}.custom-radio .custom-control-label:before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label:before{background-color:#3490dc}.custom-radio .custom-control-input:checked~.custom-control-label:after{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E")}.custom-radio .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(52,144,220,.5)}.custom-select{display:inline-block;width:100%;height:calc(2.19rem + 2px);padding:.375rem 1.75rem .375rem .75rem;line-height:1.6;color:#495057;vertical-align:middle;background:#fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E") no-repeat right .75rem center;background-size:8px 10px;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#a1cbef;outline:0;box-shadow:0 0 0 .2rem rgba(161,203,239,.5)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size="1"]){height:auto;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#6c757d;background-color:#e9ecef}.custom-select::-ms-expand{opacity:0}.custom-select-sm{height:calc(1.68125rem + 2px);font-size:75%}.custom-select-lg,.custom-select-sm{padding-top:.375rem;padding-bottom:.375rem}.custom-select-lg{height:calc(2.6875rem + 2px);font-size:125%}.custom-file{display:inline-block;margin-bottom:0}.custom-file,.custom-file-input{position:relative;width:100%;height:calc(2.19rem + 2px)}.custom-file-input{z-index:2;margin:0;opacity:0}.custom-file-input:focus~.custom-file-label{border-color:#a1cbef;box-shadow:0 0 0 .2rem rgba(52,144,220,.25)}.custom-file-input:focus~.custom-file-label:after{border-color:#a1cbef}.custom-file-input:disabled~.custom-file-label{background-color:#e9ecef}.custom-file-input:lang(en)~.custom-file-label:after{content:"Browse"}.custom-file-label{left:0;z-index:1;height:calc(2.19rem + 2px);background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label,.custom-file-label:after{position:absolute;top:0;right:0;padding:.375rem .75rem;line-height:1.6;color:#495057}.custom-file-label:after{bottom:0;z-index:3;display:block;height:2.19rem;content:"Browse";background-color:#e9ecef;border-left:1px solid #ced4da;border-radius:0 .25rem .25rem 0}.custom-range{width:100%;padding-left:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:none}.custom-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(52,144,220,.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(52,144,220,.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #f8fafc,0 0 0 .2rem rgba(52,144,220,.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;background-color:#3490dc;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;appearance:none}@media screen and (prefers-reduced-motion:reduce){.custom-range::-webkit-slider-thumb{transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#cce3f6}.custom-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#3490dc;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-moz-appearance:none;appearance:none}@media screen and (prefers-reduced-motion:reduce){.custom-range::-moz-range-thumb{transition:none}}.custom-range::-moz-range-thumb:active{background-color:#cce3f6}.custom-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:.2rem;margin-left:.2rem;background-color:#3490dc;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media screen and (prefers-reduced-motion:reduce){.custom-range::-ms-thumb{transition:none}}.custom-range::-ms-thumb:active{background-color:#cce3f6}.custom-range::-ms-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:.5rem}.custom-range::-ms-fill-lower,.custom-range::-ms-fill-upper{background-color:#dee2e6;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px}.custom-control-label:before,.custom-file-label,.custom-select{transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media screen and (prefers-reduced-motion:reduce){.custom-control-label:before,.custom-file-label,.custom-select{transition:none}}.nav{display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#6c757d}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#f8fafc;border-color:#dee2e6 #dee2e6 #f8fafc}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#3490dc}.nav-fill .nav-item{flex:1 1 auto;text-align:center}.nav-justified .nav-item{flex-basis:0;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;padding:.5rem 1rem}.navbar,.navbar>.container,.navbar>.container-fluid{display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.32rem;padding-bottom:.32rem;margin-right:1rem;font-size:1.125rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.125rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler:not(:disabled):not(.disabled){cursor:pointer}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:"";background:no-repeat 50%;background-size:100% 100%}@media (max-width:575.98px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width:767.98px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width:991.98px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width:1199.98px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand,.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a,.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand,.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:hsla(0,0%,100%,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:hsla(0,0%,100%,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:hsla(0,0%,100%,.5);border-color:hsla(0,0%,100%,.1)}.navbar-dark .navbar-toggler-icon{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E")}.navbar-dark .navbar-text{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-text a,.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:flex;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-body{flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem}.card-subtitle,.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-bottom:-.75rem;border-bottom:0}.card-header-pills,.card-header-tabs{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck{display:flex;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:flex;flex:1 0 0%;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:flex;flex-direction:column}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:first-child .card-header,.card-group>.card:first-child .card-img-top{border-top-right-radius:0}.card-group>.card:first-child .card-footer,.card-group>.card:first-child .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:last-child .card-header,.card-group>.card:last-child .card-img-top{border-top-left-radius:0}.card-group>.card:last-child .card-footer,.card-group>.card:last-child .card-img-bottom{border-bottom-left-radius:0}.card-group>.card:only-child{border-radius:.25rem}.card-group>.card:only-child .card-header,.card-group>.card:only-child .card-img-top{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card-group>.card:only-child .card-footer,.card-group>.card:only-child .card-img-bottom{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-group>.card:not(:first-child):not(:last-child):not(:only-child),.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-footer,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-header,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-top{border-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-webkit-column-count:3;column-count:3;-webkit-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion .card:not(:first-of-type):not(:last-of-type){border-bottom:0;border-radius:0}.accordion .card:not(:first-of-type) .card-header:first-child{border-radius:0}.accordion .card:first-of-type{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion .card:last-of-type{border-top-left-radius:0;border-top-right-radius:0}.breadcrumb{display:flex;flex-wrap:wrap;padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:.5rem}.breadcrumb-item+.breadcrumb-item:before{display:inline-block;padding-right:.5rem;color:#6c757d;content:"/"}.breadcrumb-item+.breadcrumb-item:hover:before{text-decoration:underline;text-decoration:none}.breadcrumb-item.active{color:#6c757d}.pagination{display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#3490dc;background-color:#fff;border:1px solid #dee2e6}.page-link:hover{z-index:2;color:#1d68a7;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:2;outline:0;box-shadow:0 0 0 .2rem rgba(52,144,220,.25)}.page-link:not(:disabled):not(.disabled){cursor:pointer}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#3490dc;border-color:#3490dc}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.125rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.7875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#3490dc}.badge-primary[href]:focus,.badge-primary[href]:hover{color:#fff;text-decoration:none;background-color:#2176bd}.badge-secondary{color:#fff;background-color:#6c757d}.badge-secondary[href]:focus,.badge-secondary[href]:hover{color:#fff;text-decoration:none;background-color:#545b62}.badge-success{color:#fff;background-color:#38c172}.badge-success[href]:focus,.badge-success[href]:hover{color:#fff;text-decoration:none;background-color:#2d995b}.badge-info{color:#212529;background-color:#6cb2eb}.badge-info[href]:focus,.badge-info[href]:hover{color:#212529;text-decoration:none;background-color:#3f9ae5}.badge-warning{color:#212529;background-color:#ffed4a}.badge-warning[href]:focus,.badge-warning[href]:hover{color:#212529;text-decoration:none;background-color:#ffe817}.badge-danger{color:#fff;background-color:#e3342f}.badge-danger[href]:focus,.badge-danger[href]:hover{color:#fff;text-decoration:none;background-color:#c51f1a}.badge-light{color:#212529;background-color:#f8f9fa}.badge-light[href]:focus,.badge-light[href]:hover{color:#212529;text-decoration:none;background-color:#dae0e5}.badge-dark{color:#fff;background-color:#343a40}.badge-dark[href]:focus,.badge-dark[href]:hover{color:#fff;text-decoration:none;background-color:#1d2124}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:3.85rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#1b4b72;background-color:#d6e9f8;border-color:#c6e0f5}.alert-primary hr{border-top-color:#b0d4f1}.alert-primary .alert-link{color:#113049}.alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}.alert-secondary hr{border-top-color:#c8cbcf}.alert-secondary .alert-link{color:#202326}.alert-success{color:#1d643b;background-color:#d7f3e3;border-color:#c7eed8}.alert-success hr{border-top-color:#b3e8ca}.alert-success .alert-link{color:#123c24}.alert-info{color:#385d7a;background-color:#e2f0fb;border-color:#d6e9f9}.alert-info hr{border-top-color:#c0ddf6}.alert-info .alert-link{color:#284257}.alert-warning{color:#857b26;background-color:#fffbdb;border-color:#fffacc}.alert-warning hr{border-top-color:#fff8b3}.alert-warning .alert-link{color:#5d561b}.alert-danger{color:#761b18;background-color:#f9d6d5;border-color:#f7c6c5}.alert-danger hr{border-top-color:#f4b0af}.alert-danger .alert-link{color:#4c110f}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{0%{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{0%{background-position:1rem 0}to{background-position:0 0}}.progress{display:flex;height:1rem;overflow:hidden;font-size:.675rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:flex;flex-direction:column;justify-content:center;color:#fff;text-align:center;white-space:nowrap;background-color:#3490dc;transition:width .6s ease}@media screen and (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}.media{display:flex;align-items:flex-start}.media-body{flex:1}.list-group{display:flex;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-item:focus,.list-group-item:hover{z-index:1;text-decoration:none}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#3490dc;border-color:#3490dc}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{border-bottom:0}.list-group-item-primary{color:#1b4b72;background-color:#c6e0f5}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{color:#1b4b72;background-color:#b0d4f1}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#1b4b72;border-color:#1b4b72}.list-group-item-secondary{color:#383d41;background-color:#d6d8db}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{color:#383d41;background-color:#c8cbcf}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#383d41;border-color:#383d41}.list-group-item-success{color:#1d643b;background-color:#c7eed8}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{color:#1d643b;background-color:#b3e8ca}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#1d643b;border-color:#1d643b}.list-group-item-info{color:#385d7a;background-color:#d6e9f9}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{color:#385d7a;background-color:#c0ddf6}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#385d7a;border-color:#385d7a}.list-group-item-warning{color:#857b26;background-color:#fffacc}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{color:#857b26;background-color:#fff8b3}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#857b26;border-color:#857b26}.list-group-item-danger{color:#761b18;background-color:#f7c6c5}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{color:#761b18;background-color:#f4b0af}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#761b18;border-color:#761b18}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.35rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:not(:disabled):not(.disabled){cursor:pointer}.close:not(:disabled):not(.disabled):focus,.close:not(:disabled):not(.disabled):hover{color:#000;text-decoration:none;opacity:.75}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out;-webkit-transform:translateY(-25%);transform:translateY(-25%)}@media screen and (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{-webkit-transform:translate(0);transform:translate(0)}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - 1rem)}.modal-dialog-centered:before{display:block;height:calc(100vh - 1rem);content:""}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:flex;align-items:flex-start;justify-content:space-between;padding:1rem;border-bottom:1px solid #e9ecef;border-top-left-radius:.3rem;border-top-right-radius:.3rem}.modal-header .close{padding:1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.6}.modal-body{position:relative;flex:1 1 auto;padding:1rem}.modal-footer{display:flex;align-items:center;justify-content:flex-end;padding:1rem;border-top:1px solid #e9ecef}.modal-footer>:not(:first-child){margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-dialog-centered:before{height:calc(100vh - 3.5rem)}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg{max-width:800px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:Nunito,sans-serif;font-style:normal;font-weight:400;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.7875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .arrow:before{position:absolute;content:"";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow:before,.bs-tooltip-top .arrow:before{top:0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow:before,.bs-tooltip-right .arrow:before{right:0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.bs-tooltip-bottom .arrow:before{bottom:0;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow:before,.bs-tooltip-left .arrow:before{left:0;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{top:0;left:0;z-index:1060;max-width:276px;font-family:Nunito,sans-serif;font-style:normal;font-weight:400;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.7875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover,.popover .arrow{position:absolute;display:block}.popover .arrow{width:1rem;height:.5rem;margin:0 .3rem}.popover .arrow:after,.popover .arrow:before{position:absolute;display:block;content:"";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:.5rem}.bs-popover-auto[x-placement^=top] .arrow,.bs-popover-top .arrow{bottom:calc(-.5rem + -1px)}.bs-popover-auto[x-placement^=top] .arrow:after,.bs-popover-auto[x-placement^=top] .arrow:before,.bs-popover-top .arrow:after,.bs-popover-top .arrow:before{border-width:.5rem .5rem 0}.bs-popover-auto[x-placement^=top] .arrow:before,.bs-popover-top .arrow:before{bottom:0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top] .arrow:after,.bs-popover-top .arrow:after{bottom:1px;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:.5rem}.bs-popover-auto[x-placement^=right] .arrow,.bs-popover-right .arrow{left:calc(-.5rem + -1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=right] .arrow:after,.bs-popover-auto[x-placement^=right] .arrow:before,.bs-popover-right .arrow:after,.bs-popover-right .arrow:before{border-width:.5rem .5rem .5rem 0}.bs-popover-auto[x-placement^=right] .arrow:before,.bs-popover-right .arrow:before{left:0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right] .arrow:after,.bs-popover-right .arrow:after{left:1px;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:.5rem}.bs-popover-auto[x-placement^=bottom] .arrow,.bs-popover-bottom .arrow{top:calc(-.5rem + -1px)}.bs-popover-auto[x-placement^=bottom] .arrow:after,.bs-popover-auto[x-placement^=bottom] .arrow:before,.bs-popover-bottom .arrow:after,.bs-popover-bottom .arrow:before{border-width:0 .5rem .5rem}.bs-popover-auto[x-placement^=bottom] .arrow:before,.bs-popover-bottom .arrow:before{top:0;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom] .arrow:after,.bs-popover-bottom .arrow:after{top:1px;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header:before,.bs-popover-bottom .popover-header:before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:"";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:.5rem}.bs-popover-auto[x-placement^=left] .arrow,.bs-popover-left .arrow{right:calc(-.5rem + -1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=left] .arrow:after,.bs-popover-auto[x-placement^=left] .arrow:before,.bs-popover-left .arrow:after,.bs-popover-left .arrow:before{border-width:.5rem 0 .5rem .5rem}.bs-popover-auto[x-placement^=left] .arrow:before,.bs-popover-left .arrow:before{right:0;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left] .arrow:after,.bs-popover-left .arrow:after{right:1px;border-left-color:#fff}.popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:.9rem;color:inherit;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-item{position:relative;display:none;align-items:center;width:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block;transition:-webkit-transform .6s ease;transition:transform .6s ease;transition:transform .6s ease,-webkit-transform .6s ease}@media screen and (prefers-reduced-motion:reduce){.carousel-item-next,.carousel-item-prev,.carousel-item.active{transition:none}}.carousel-item-next,.carousel-item-prev{position:absolute;top:0}.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translateX(0);transform:translateX(0)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translateZ(0);transform:translateZ(0)}}.active.carousel-item-right,.carousel-item-next{-webkit-transform:translateX(100%);transform:translateX(100%)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.active.carousel-item-right,.carousel-item-next{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}}.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translateX(-100%);transform:translateX(-100%)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}}.carousel-fade .carousel-item{opacity:0;transition-duration:.6s;transition-property:opacity}.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right,.carousel-fade .carousel-item.active{opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{opacity:0}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-prev,.carousel-fade .carousel-item-next,.carousel-fade .carousel-item-prev,.carousel-fade .carousel-item.active{-webkit-transform:translateX(0);transform:translateX(0)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-prev,.carousel-fade .carousel-item-next,.carousel-fade .carousel-item-prev,.carousel-fade .carousel-item.active{-webkit-transform:translateZ(0);transform:translateZ(0)}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;display:flex;align-items:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:transparent no-repeat 50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E")}.carousel-control-next-icon{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E")}.carousel-indicators{position:absolute;right:0;bottom:10px;left:0;z-index:15;display:flex;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{position:relative;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:hsla(0,0%,100%,.5)}.carousel-indicators li:before{top:-10px}.carousel-indicators li:after,.carousel-indicators li:before{position:absolute;left:0;display:inline-block;width:100%;height:10px;content:""}.carousel-indicators li:after{bottom:-10px}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#3490dc!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#2176bd!important}.bg-secondary{background-color:#6c757d!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#545b62!important}.bg-success{background-color:#38c172!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#2d995b!important}.bg-info{background-color:#6cb2eb!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#3f9ae5!important}.bg-warning{background-color:#ffed4a!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#ffe817!important}.bg-danger{background-color:#e3342f!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#c51f1a!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #dee2e6!important}.border-top{border-top:1px solid #dee2e6!important}.border-right{border-right:1px solid #dee2e6!important}.border-bottom{border-bottom:1px solid #dee2e6!important}.border-left{border-left:1px solid #dee2e6!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#3490dc!important}.border-secondary{border-color:#6c757d!important}.border-success{border-color:#38c172!important}.border-info{border-color:#6cb2eb!important}.border-warning{border-color:#ffed4a!important}.border-danger{border-color:#e3342f!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important}.rounded-right,.rounded-top{border-top-right-radius:.25rem!important}.rounded-bottom,.rounded-right{border-bottom-right-radius:.25rem!important}.rounded-bottom,.rounded-left{border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important}.rounded-circle{border-radius:50%!important}.rounded-0{border-radius:0!important}.clearfix:after{display:block;clear:both;content:""}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}}@media print{.d-print-none{display:none!important}.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive:before{display:block;content:""}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9:before{padding-top:42.8571428571%}.embed-responsive-16by9:before{padding-top:56.25%}.embed-responsive-4by3:before{padding-top:75%}.embed-responsive-1by1:before{padding-top:100%}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-fill{flex:1 1 auto!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}@media (min-width:576px){.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}}@media (min-width:768px){.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}@supports ((position:-webkit-sticky) or (position:sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075)!important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175)!important}.shadow-none{box-shadow:none!important}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:.25rem!important}.mt-1,.my-1{margin-top:.25rem!important}.mr-1,.mx-1{margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:.25rem!important}.m-2{margin:.5rem!important}.mt-2,.my-2{margin-top:.5rem!important}.mr-2,.mx-2{margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:.5rem!important}.m-3{margin:1rem!important}.mt-3,.my-3{margin-top:1rem!important}.mr-3,.mx-3{margin-right:1rem!important}.mb-3,.my-3{margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:1rem!important}.m-4{margin:1.5rem!important}.mt-4,.my-4{margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:1.5rem!important}.m-5{margin:3rem!important}.mt-5,.my-5{margin-top:3rem!important}.mr-5,.mx-5{margin-right:3rem!important}.mb-5,.my-5{margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:.25rem!important}.pt-1,.py-1{padding-top:.25rem!important}.pr-1,.px-1{padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:.25rem!important}.p-2{padding:.5rem!important}.pt-2,.py-2{padding-top:.5rem!important}.pr-2,.px-2{padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:.5rem!important}.p-3{padding:1rem!important}.pt-3,.py-3{padding-top:1rem!important}.pr-3,.px-3{padding-right:1rem!important}.pb-3,.py-3{padding-bottom:1rem!important}.pl-3,.px-3{padding-left:1rem!important}.p-4{padding:1.5rem!important}.pt-4,.py-4{padding-top:1.5rem!important}.pr-4,.px-4{padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:1.5rem!important}.p-5{padding:3rem!important}.pt-5,.py-5{padding-top:3rem!important}.pr-5,.px-5{padding-right:3rem!important}.pb-5,.py-5{padding-bottom:3rem!important}.pl-5,.px-5{padding-left:3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.text-monospace{font-family:SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}.text-justify{text-align:justify!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#3490dc!important}a.text-primary:focus,a.text-primary:hover{color:#2176bd!important}.text-secondary{color:#6c757d!important}a.text-secondary:focus,a.text-secondary:hover{color:#545b62!important}.text-success{color:#38c172!important}a.text-success:focus,a.text-success:hover{color:#2d995b!important}.text-info{color:#6cb2eb!important}a.text-info:focus,a.text-info:hover{color:#3f9ae5!important}.text-warning{color:#ffed4a!important}a.text-warning:focus,a.text-warning:hover{color:#ffe817!important}.text-danger{color:#e3342f!important}a.text-danger:focus,a.text-danger:hover{color:#c51f1a!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#dae0e5!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#1d2124!important}.text-body{color:#212529!important}.text-muted{color:#6c757d!important}.text-black-50{color:rgba(0,0,0,.5)!important}.text-white-50{color:hsla(0,0%,100%,.5)!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,:after,:before{text-shadow:none!important;box-shadow:none!important}a:not(.btn){text-decoration:underline}abbr[title]:after{content:" (" attr(title) ")"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #adb5bd;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}.container,body{min-width:992px!important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #dee2e6!important}.table-dark{color:inherit}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#dee2e6}.table .thead-dark th{color:inherit;border-color:#dee2e6}}.navbar-laravel{background-color:#fff;box-shadow:0 2px 4px rgba(0,0,0,.04)}
\ No newline at end of file
Index: laravel58/bootstrap/cache/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/bootstrap/cache/.gitignore	(date 1592582522758)
+++ laravel58/bootstrap/cache/.gitignore	(date 1592582522758)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/bootstrap/app.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/bootstrap/app.php	(date 1592582522757)
+++ laravel58/bootstrap/app.php	(date 1592582522757)
@@ -0,0 +1,55 @@
+<?php
+
+/*
+|--------------------------------------------------------------------------
+| Create The Application
+|--------------------------------------------------------------------------
+|
+| The first thing we will do is create a new Laravel application instance
+| which serves as the "glue" for all the components of Laravel, and is
+| the IoC container for the system binding all of the various parts.
+|
+*/
+
+$app = new Illuminate\Foundation\Application(
+    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
+);
+
+/*
+|--------------------------------------------------------------------------
+| Bind Important Interfaces
+|--------------------------------------------------------------------------
+|
+| Next, we need to bind some important interfaces into the container so
+| we will be able to resolve them when needed. The kernels serve the
+| incoming requests to this application from both the web and CLI.
+|
+*/
+
+$app->singleton(
+    Illuminate\Contracts\Http\Kernel::class,
+    App\Http\Kernel::class
+);
+
+$app->singleton(
+    Illuminate\Contracts\Console\Kernel::class,
+    App\Console\Kernel::class
+);
+
+$app->singleton(
+    Illuminate\Contracts\Debug\ExceptionHandler::class,
+    App\Exceptions\Handler::class
+);
+
+/*
+|--------------------------------------------------------------------------
+| Return The Application
+|--------------------------------------------------------------------------
+|
+| This script returns the application instance. The instance is given to
+| the calling script so we can separate the building of the instances
+| from the actual running of the application and sending responses.
+|
+*/
+
+return $app;
Index: laravel58/app/User.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/User.php	(date 1592582522756)
+++ laravel58/app/User.php	(date 1592582522756)
@@ -0,0 +1,39 @@
+<?php
+
+namespace App;
+
+use Illuminate\Notifications\Notifiable;
+use Illuminate\Contracts\Auth\MustVerifyEmail;
+use Illuminate\Foundation\Auth\User as Authenticatable;
+
+class User extends Authenticatable
+{
+    use Notifiable;
+
+    /**
+     * The attributes that are mass assignable.
+     *
+     * @var array
+     */
+    protected $fillable = [
+        'name', 'email', 'password',
+    ];
+
+    /**
+     * The attributes that should be hidden for arrays.
+     *
+     * @var array
+     */
+    protected $hidden = [
+        'password', 'remember_token',
+    ];
+
+    /**
+     * The attributes that should be cast to native types.
+     *
+     * @var array
+     */
+    protected $casts = [
+        'email_verified_at' => 'datetime',
+    ];
+}
Index: laravel58/storage/framework/cache/data/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/cache/data/.gitignore	(date 1592582522796)
+++ laravel58/storage/framework/cache/data/.gitignore	(date 1592582522796)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/storage/framework/sessions/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/sessions/.gitignore	(date 1592582522797)
+++ laravel58/storage/framework/sessions/.gitignore	(date 1592582522797)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/app/Http/Kernel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Kernel.php	(date 1591080725290)
+++ laravel58/app/Http/Kernel.php	(date 1591080725290)
@@ -0,0 +1,80 @@
+<?php
+
+namespace App\Http;
+
+use Illuminate\Foundation\Http\Kernel as HttpKernel;
+
+class Kernel extends HttpKernel
+{
+    /**
+     * The application's global HTTP middleware stack.
+     *
+     * These middleware are run during every request to your application.
+     *
+     * @var array
+     */
+    protected $middleware = [
+        \App\Http\Middleware\CheckForMaintenanceMode::class,
+        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
+        \App\Http\Middleware\TrimStrings::class,
+        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
+        \App\Http\Middleware\TrustProxies::class,
+    ];
+
+    /**
+     * The application's route middleware groups.
+     *
+     * @var array
+     */
+    protected $middlewareGroups = [
+        'web' => [
+            \App\Http\Middleware\EncryptCookies::class,
+            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
+            \Illuminate\Session\Middleware\StartSession::class,
+            // \Illuminate\Session\Middleware\AuthenticateSession::class,
+            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
+            \App\Http\Middleware\VerifyCsrfToken::class,
+            \Illuminate\Routing\Middleware\SubstituteBindings::class,
+        ],
+
+        'api' => [
+            'throttle:60,1',
+            'bindings',
+        ],
+    ];
+
+    /**
+     * The application's route middleware.
+     *
+     * These middleware may be assigned to groups or used individually.
+     *
+     * @var array
+     */
+    protected $routeMiddleware = [
+        'auth' => \App\Http\Middleware\Authenticate::class,
+        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
+        'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
+        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
+        'can' => \Illuminate\Auth\Middleware\Authorize::class,
+        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
+        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
+        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
+        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
+    ];
+
+    /**
+     * The priority-sorted list of middleware.
+     *
+     * This forces non-global middleware to always be in the given order.
+     *
+     * @var array
+     */
+    protected $middlewarePriority = [
+        \Illuminate\Session\Middleware\StartSession::class,
+        \Illuminate\View\Middleware\ShareErrorsFromSession::class,
+        \App\Http\Middleware\Authenticate::class,
+        \Illuminate\Session\Middleware\AuthenticateSession::class,
+        \Illuminate\Routing\Middleware\SubstituteBindings::class,
+        \Illuminate\Auth\Middleware\Authorize::class,
+    ];
+}
Index: laravel58/storage/framework/testing/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/testing/.gitignore	(date 1592582522797)
+++ laravel58/storage/framework/testing/.gitignore	(date 1592582522797)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/storage/framework/views/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/views/.gitignore	(date 1592582522799)
+++ laravel58/storage/framework/views/.gitignore	(date 1592582522799)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/app/Console/Kernel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Console/Kernel.php	(date 1591080725284)
+++ laravel58/app/Console/Kernel.php	(date 1591080725284)
@@ -0,0 +1,42 @@
+<?php
+
+namespace App\Console;
+
+use Illuminate\Console\Scheduling\Schedule;
+use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
+
+class Kernel extends ConsoleKernel
+{
+    /**
+     * The Artisan commands provided by your application.
+     *
+     * @var array
+     */
+    protected $commands = [
+        //
+    ];
+
+    /**
+     * Define the application's command schedule.
+     *
+     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
+     * @return void
+     */
+    protected function schedule(Schedule $schedule)
+    {
+        // $schedule->command('inspire')
+        //          ->hourly();
+    }
+
+    /**
+     * Register the commands for the application.
+     *
+     * @return void
+     */
+    protected function commands()
+    {
+        $this->load(__DIR__.'/Commands');
+
+        require base_path('routes/console.php');
+    }
+}
Index: laravel58/app/Providers/AppServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Providers/AppServiceProvider.php	(date 1592754238920)
+++ laravel58/app/Providers/AppServiceProvider.php	(date 1592754238920)
@@ -0,0 +1,33 @@
+<?php
+
+namespace App\Providers;
+
+use App\Models\BlogCategory;
+use App\Models\BlogPost;
+use App\Observers\BlogCategoryObserver;
+use App\Observers\BlogPostObserver;
+use Illuminate\Support\ServiceProvider;
+
+class AppServiceProvider extends ServiceProvider
+{
+    /**
+     * Register any application services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        //
+    }
+
+    /**
+     * Bootstrap any application services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        BlogPost::observe(BlogPostObserver::class);
+        BlogCategory::observe(BlogCategoryObserver::class);
+    }
+}
Index: laravel58/storage/framework/cache/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/cache/.gitignore	(date 1592582522795)
+++ laravel58/storage/framework/cache/.gitignore	(date 1592582522795)
@@ -0,0 +1,3 @@
+*
+!data/
+!.gitignore
Index: laravel58/app/Providers/AuthServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Providers/AuthServiceProvider.php	(date 1591080725294)
+++ laravel58/app/Providers/AuthServiceProvider.php	(date 1591080725294)
@@ -0,0 +1,30 @@
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Support\Facades\Gate;
+use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
+
+class AuthServiceProvider extends ServiceProvider
+{
+    /**
+     * The policy mappings for the application.
+     *
+     * @var array
+     */
+    protected $policies = [
+        'App\Model' => 'App\Policies\ModelPolicy',
+    ];
+
+    /**
+     * Register any authentication / authorization services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        $this->registerPolicies();
+
+        //
+    }
+}
Index: laravel58/storage/app/public/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/app/public/.gitignore	(date 1592582522793)
+++ laravel58/storage/app/public/.gitignore	(date 1592582522793)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/app/Providers/BroadcastServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Providers/BroadcastServiceProvider.php	(date 1591080725295)
+++ laravel58/app/Providers/BroadcastServiceProvider.php	(date 1591080725295)
@@ -0,0 +1,21 @@
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Support\ServiceProvider;
+use Illuminate\Support\Facades\Broadcast;
+
+class BroadcastServiceProvider extends ServiceProvider
+{
+    /**
+     * Bootstrap any application services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        Broadcast::routes();
+
+        require base_path('routes/channels.php');
+    }
+}
Index: laravel58/app/Providers/EventServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Providers/EventServiceProvider.php	(date 1591080725295)
+++ laravel58/app/Providers/EventServiceProvider.php	(date 1591080725295)
@@ -0,0 +1,34 @@
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Support\Facades\Event;
+use Illuminate\Auth\Events\Registered;
+use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
+use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
+
+class EventServiceProvider extends ServiceProvider
+{
+    /**
+     * The event listener mappings for the application.
+     *
+     * @var array
+     */
+    protected $listen = [
+        Registered::class => [
+            SendEmailVerificationNotification::class,
+        ],
+    ];
+
+    /**
+     * Register any events for your application.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        parent::boot();
+
+        //
+    }
+}
Index: laravel58/app/Providers/RouteServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Providers/RouteServiceProvider.php	(date 1591080725295)
+++ laravel58/app/Providers/RouteServiceProvider.php	(date 1591080725295)
@@ -0,0 +1,73 @@
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Support\Facades\Route;
+use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
+
+class RouteServiceProvider extends ServiceProvider
+{
+    /**
+     * This namespace is applied to your controller routes.
+     *
+     * In addition, it is set as the URL generator's root namespace.
+     *
+     * @var string
+     */
+    protected $namespace = 'App\Http\Controllers';
+
+    /**
+     * Define your route model bindings, pattern filters, etc.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        //
+
+        parent::boot();
+    }
+
+    /**
+     * Define the routes for the application.
+     *
+     * @return void
+     */
+    public function map()
+    {
+        $this->mapApiRoutes();
+
+        $this->mapWebRoutes();
+
+        //
+    }
+
+    /**
+     * Define the "web" routes for the application.
+     *
+     * These routes all receive session state, CSRF protection, etc.
+     *
+     * @return void
+     */
+    protected function mapWebRoutes()
+    {
+        Route::middleware('web')
+             ->namespace($this->namespace)
+             ->group(base_path('routes/web.php'));
+    }
+
+    /**
+     * Define the "api" routes for the application.
+     *
+     * These routes are typically stateless.
+     *
+     * @return void
+     */
+    protected function mapApiRoutes()
+    {
+        Route::prefix('api')
+             ->middleware('api')
+             ->namespace($this->namespace)
+             ->group(base_path('routes/api.php'));
+    }
+}
Index: laravel58/app/Exceptions/Handler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Exceptions/Handler.php	(date 1591080725285)
+++ laravel58/app/Exceptions/Handler.php	(date 1591080725285)
@@ -0,0 +1,51 @@
+<?php
+
+namespace App\Exceptions;
+
+use Exception;
+use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
+
+class Handler extends ExceptionHandler
+{
+    /**
+     * A list of the exception types that are not reported.
+     *
+     * @var array
+     */
+    protected $dontReport = [
+        //
+    ];
+
+    /**
+     * A list of the inputs that are never flashed for validation exceptions.
+     *
+     * @var array
+     */
+    protected $dontFlash = [
+        'password',
+        'password_confirmation',
+    ];
+
+    /**
+     * Report or log an exception.
+     *
+     * @param  \Exception  $exception
+     * @return void
+     */
+    public function report(Exception $exception)
+    {
+        parent::report($exception);
+    }
+
+    /**
+     * Render an exception into an HTTP response.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Exception  $exception
+     * @return \Illuminate\Http\Response
+     */
+    public function render($request, Exception $exception)
+    {
+        return parent::render($request, $exception);
+    }
+}
Index: laravel58/app/Http/Middleware/Authenticate.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/Authenticate.php	(date 1591080725290)
+++ laravel58/app/Http/Middleware/Authenticate.php	(date 1591080725290)
@@ -0,0 +1,21 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Auth\Middleware\Authenticate as Middleware;
+
+class Authenticate extends Middleware
+{
+    /**
+     * Get the path the user should be redirected to when they are not authenticated.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @return string
+     */
+    protected function redirectTo($request)
+    {
+        if (! $request->expectsJson()) {
+            return route('login');
+        }
+    }
+}
Index: laravel58/storage/framework/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/framework/.gitignore	(date 1592582522794)
+++ laravel58/storage/framework/.gitignore	(date 1592582522794)
@@ -0,0 +1,8 @@
+config.php
+routes.php
+schedule-*
+compiled.php
+services.json
+events.scanned.php
+routes.scanned.php
+down
Index: laravel58/app/Http/Middleware/CheckForMaintenanceMode.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/CheckForMaintenanceMode.php	(date 1591080725291)
+++ laravel58/app/Http/Middleware/CheckForMaintenanceMode.php	(date 1591080725291)
@@ -0,0 +1,17 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode as Middleware;
+
+class CheckForMaintenanceMode extends Middleware
+{
+    /**
+     * The URIs that should be reachable while maintenance mode is enabled.
+     *
+     * @var array
+     */
+    protected $except = [
+        //
+    ];
+}
Index: laravel58/storage/logs/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/logs/.gitignore	(date 1592582522800)
+++ laravel58/storage/logs/.gitignore	(date 1592582522800)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/app/Http/Middleware/EncryptCookies.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/EncryptCookies.php	(date 1591080725291)
+++ laravel58/app/Http/Middleware/EncryptCookies.php	(date 1591080725291)
@@ -0,0 +1,17 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;
+
+class EncryptCookies extends Middleware
+{
+    /**
+     * The names of the cookies that should not be encrypted.
+     *
+     * @var array
+     */
+    protected $except = [
+        //
+    ];
+}
Index: laravel58/app/Http/Middleware/RedirectIfAuthenticated.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/RedirectIfAuthenticated.php	(date 1591080725292)
+++ laravel58/app/Http/Middleware/RedirectIfAuthenticated.php	(date 1591080725292)
@@ -0,0 +1,26 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Closure;
+use Illuminate\Support\Facades\Auth;
+
+class RedirectIfAuthenticated
+{
+    /**
+     * Handle an incoming request.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     * @param  string|null  $guard
+     * @return mixed
+     */
+    public function handle($request, Closure $next, $guard = null)
+    {
+        if (Auth::guard($guard)->check()) {
+            return redirect('/home');
+        }
+
+        return $next($request);
+    }
+}
Index: laravel58/storage/app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/app/.gitignore	(date 1592582522792)
+++ laravel58/storage/app/.gitignore	(date 1592582522792)
@@ -0,0 +1,3 @@
+*
+!public/
+!.gitignore
Index: laravel58/app/Http/Middleware/TrimStrings.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/TrimStrings.php	(date 1591080725292)
+++ laravel58/app/Http/Middleware/TrimStrings.php	(date 1591080725292)
@@ -0,0 +1,18 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;
+
+class TrimStrings extends Middleware
+{
+    /**
+     * The names of the attributes that should not be trimmed.
+     *
+     * @var array
+     */
+    protected $except = [
+        'password',
+        'password_confirmation',
+    ];
+}
Index: laravel58/app/Http/Middleware/TrustProxies.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/TrustProxies.php	(date 1591080725292)
+++ laravel58/app/Http/Middleware/TrustProxies.php	(date 1591080725292)
@@ -0,0 +1,23 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Http\Request;
+use Fideloper\Proxy\TrustProxies as Middleware;
+
+class TrustProxies extends Middleware
+{
+    /**
+     * The trusted proxies for this application.
+     *
+     * @var array
+     */
+    protected $proxies;
+
+    /**
+     * The headers that should be used to detect proxies.
+     *
+     * @var int
+     */
+    protected $headers = Request::HEADER_X_FORWARDED_ALL;
+}
Index: laravel58/app/Http/Middleware/VerifyCsrfToken.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Middleware/VerifyCsrfToken.php	(date 1591080725293)
+++ laravel58/app/Http/Middleware/VerifyCsrfToken.php	(date 1591080725293)
@@ -0,0 +1,24 @@
+<?php
+
+namespace App\Http\Middleware;
+
+use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
+
+class VerifyCsrfToken extends Middleware
+{
+    /**
+     * Indicates whether the XSRF-TOKEN cookie should be set on the response.
+     *
+     * @var bool
+     */
+    protected $addHttpCookie = true;
+
+    /**
+     * The URIs that should be excluded from CSRF verification.
+     *
+     * @var array
+     */
+    protected $except = [
+        //
+    ];
+}
Index: laravel58/app/Http/Controllers/Controller.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Controller.php	(date 1591080725289)
+++ laravel58/app/Http/Controllers/Controller.php	(date 1591080725289)
@@ -0,0 +1,13 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Foundation\Bus\DispatchesJobs;
+use Illuminate\Routing\Controller as BaseController;
+use Illuminate\Foundation\Validation\ValidatesRequests;
+use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
+
+class Controller extends BaseController
+{
+    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;
+}
Index: laravel58/tests/Feature/ExampleTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/tests/Feature/ExampleTest.php	(date 1592582522801)
+++ laravel58/tests/Feature/ExampleTest.php	(date 1592582522801)
@@ -0,0 +1,21 @@
+<?php
+
+namespace Tests\Feature;
+
+use Tests\TestCase;
+use Illuminate\Foundation\Testing\RefreshDatabase;
+
+class ExampleTest extends TestCase
+{
+    /**
+     * A basic test example.
+     *
+     * @return void
+     */
+    public function testBasicTest()
+    {
+        $response = $this->get('/');
+
+        $response->assertStatus(200);
+    }
+}
Index: laravel58/tests/Unit/ExampleTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/tests/Unit/ExampleTest.php	(date 1592582522803)
+++ laravel58/tests/Unit/ExampleTest.php	(date 1592582522803)
@@ -0,0 +1,19 @@
+<?php
+
+namespace Tests\Unit;
+
+use Tests\TestCase;
+use Illuminate\Foundation\Testing\RefreshDatabase;
+
+class ExampleTest extends TestCase
+{
+    /**
+     * A basic test example.
+     *
+     * @return void
+     */
+    public function testBasicTest()
+    {
+        $this->assertTrue(true);
+    }
+}
Index: laravel58/app/Http/Controllers/Auth/ForgotPasswordController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Auth/ForgotPasswordController.php	(date 1591080725286)
+++ laravel58/app/Http/Controllers/Auth/ForgotPasswordController.php	(date 1591080725286)
@@ -0,0 +1,32 @@
+<?php
+
+namespace App\Http\Controllers\Auth;
+
+use App\Http\Controllers\Controller;
+use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
+
+class ForgotPasswordController extends Controller
+{
+    /*
+    |--------------------------------------------------------------------------
+    | Password Reset Controller
+    |--------------------------------------------------------------------------
+    |
+    | This controller is responsible for handling password reset emails and
+    | includes a trait which assists in sending these notifications from
+    | your application to your users. Feel free to explore this trait.
+    |
+    */
+
+    use SendsPasswordResetEmails;
+
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('guest');
+    }
+}
Index: laravel58/app/Http/Controllers/Auth/LoginController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Auth/LoginController.php	(date 1591080725287)
+++ laravel58/app/Http/Controllers/Auth/LoginController.php	(date 1591080725287)
@@ -0,0 +1,39 @@
+<?php
+
+namespace App\Http\Controllers\Auth;
+
+use App\Http\Controllers\Controller;
+use Illuminate\Foundation\Auth\AuthenticatesUsers;
+
+class LoginController extends Controller
+{
+    /*
+    |--------------------------------------------------------------------------
+    | Login Controller
+    |--------------------------------------------------------------------------
+    |
+    | This controller handles authenticating users for the application and
+    | redirecting them to your home screen. The controller uses a trait
+    | to conveniently provide its functionality to your applications.
+    |
+    */
+
+    use AuthenticatesUsers;
+
+    /**
+     * Where to redirect users after login.
+     *
+     * @var string
+     */
+    protected $redirectTo = '/home';
+
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('guest')->except('logout');
+    }
+}
Index: laravel58/app/Http/Controllers/Auth/RegisterController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Auth/RegisterController.php	(date 1591080725288)
+++ laravel58/app/Http/Controllers/Auth/RegisterController.php	(date 1591080725288)
@@ -0,0 +1,72 @@
+<?php
+
+namespace App\Http\Controllers\Auth;
+
+use App\User;
+use App\Http\Controllers\Controller;
+use Illuminate\Support\Facades\Hash;
+use Illuminate\Support\Facades\Validator;
+use Illuminate\Foundation\Auth\RegistersUsers;
+
+class RegisterController extends Controller
+{
+    /*
+    |--------------------------------------------------------------------------
+    | Register Controller
+    |--------------------------------------------------------------------------
+    |
+    | This controller handles the registration of new users as well as their
+    | validation and creation. By default this controller uses a trait to
+    | provide this functionality without requiring any additional code.
+    |
+    */
+
+    use RegistersUsers;
+
+    /**
+     * Where to redirect users after registration.
+     *
+     * @var string
+     */
+    protected $redirectTo = '/home';
+
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('guest');
+    }
+
+    /**
+     * Get a validator for an incoming registration request.
+     *
+     * @param  array  $data
+     * @return \Illuminate\Contracts\Validation\Validator
+     */
+    protected function validator(array $data)
+    {
+        return Validator::make($data, [
+            'name' => ['required', 'string', 'max:255'],
+            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
+            'password' => ['required', 'string', 'min:6', 'confirmed'],
+        ]);
+    }
+
+    /**
+     * Create a new user instance after a valid registration.
+     *
+     * @param  array  $data
+     * @return \App\User
+     */
+    protected function create(array $data)
+    {
+        return User::create([
+            'name' => $data['name'],
+            'email' => $data['email'],
+            'password' => Hash::make($data['password']),
+        ]);
+    }
+}
Index: laravel58/tests/TestCase.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/tests/TestCase.php	(date 1592582522802)
+++ laravel58/tests/TestCase.php	(date 1592582522802)
@@ -0,0 +1,10 @@
+<?php
+
+namespace Tests;
+
+use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
+
+abstract class TestCase extends BaseTestCase
+{
+    use CreatesApplication;
+}
Index: laravel58/app/Http/Controllers/Auth/ResetPasswordController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Auth/ResetPasswordController.php	(date 1591080725288)
+++ laravel58/app/Http/Controllers/Auth/ResetPasswordController.php	(date 1591080725288)
@@ -0,0 +1,39 @@
+<?php
+
+namespace App\Http\Controllers\Auth;
+
+use App\Http\Controllers\Controller;
+use Illuminate\Foundation\Auth\ResetsPasswords;
+
+class ResetPasswordController extends Controller
+{
+    /*
+    |--------------------------------------------------------------------------
+    | Password Reset Controller
+    |--------------------------------------------------------------------------
+    |
+    | This controller is responsible for handling password reset requests
+    | and uses a simple trait to include this behavior. You're free to
+    | explore this trait and override any methods you wish to tweak.
+    |
+    */
+
+    use ResetsPasswords;
+
+    /**
+     * Where to redirect users after resetting their password.
+     *
+     * @var string
+     */
+    protected $redirectTo = '/home';
+
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('guest');
+    }
+}
Index: laravel58/tests/CreatesApplication.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/tests/CreatesApplication.php	(date 1592582522800)
+++ laravel58/tests/CreatesApplication.php	(date 1592582522800)
@@ -0,0 +1,22 @@
+<?php
+
+namespace Tests;
+
+use Illuminate\Contracts\Console\Kernel;
+
+trait CreatesApplication
+{
+    /**
+     * Creates the application.
+     *
+     * @return \Illuminate\Foundation\Application
+     */
+    public function createApplication()
+    {
+        $app = require __DIR__.'/../bootstrap/app.php';
+
+        $app->make(Kernel::class)->bootstrap();
+
+        return $app;
+    }
+}
Index: laravel58/app/Http/Controllers/Auth/VerificationController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Auth/VerificationController.php	(date 1591080725289)
+++ laravel58/app/Http/Controllers/Auth/VerificationController.php	(date 1591080725289)
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Http\Controllers\Auth;
+
+use App\Http\Controllers\Controller;
+use Illuminate\Foundation\Auth\VerifiesEmails;
+
+class VerificationController extends Controller
+{
+    /*
+    |--------------------------------------------------------------------------
+    | Email Verification Controller
+    |--------------------------------------------------------------------------
+    |
+    | This controller is responsible for handling email verification for any
+    | user that recently registered with the application. Emails may also
+    | be re-sent if the user didn't receive the original email message.
+    |
+    */
+
+    use VerifiesEmails;
+
+    /**
+     * Where to redirect users after verification.
+     *
+     * @var string
+     */
+    protected $redirectTo = '/home';
+
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('auth');
+        $this->middleware('signed')->only('verify');
+        $this->middleware('throttle:6,1')->only('verify', 'resend');
+    }
+}
Index: laravel58/config/app.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/app.php	(date 1592582522759)
+++ laravel58/config/app.php	(date 1592582522759)
@@ -0,0 +1,231 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Name
+    |--------------------------------------------------------------------------
+    |
+    | This value is the name of your application. This value is used when the
+    | framework needs to place the application's name in a notification or
+    | any other location as required by the application or its packages.
+    |
+    */
+
+    'name' => env('APP_NAME', 'Laravel'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Environment
+    |--------------------------------------------------------------------------
+    |
+    | This value determines the "environment" your application is currently
+    | running in. This may determine how you prefer to configure various
+    | services the application utilizes. Set this in your ".env" file.
+    |
+    */
+
+    'env' => env('APP_ENV', 'production'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Debug Mode
+    |--------------------------------------------------------------------------
+    |
+    | When your application is in debug mode, detailed error messages with
+    | stack traces will be shown on every error that occurs within your
+    | application. If disabled, a simple generic error page is shown.
+    |
+    */
+
+    'debug' => env('APP_DEBUG', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application URL
+    |--------------------------------------------------------------------------
+    |
+    | This URL is used by the console to properly generate URLs when using
+    | the Artisan command line tool. You should set this to the root of
+    | your application so that it is used when running Artisan tasks.
+    |
+    */
+
+    'url' => env('APP_URL', 'http://localhost'),
+
+    'asset_url' => env('ASSET_URL', null),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Timezone
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the default timezone for your application, which
+    | will be used by the PHP date and date-time functions. We have gone
+    | ahead and set this to a sensible default for you out of the box.
+    |
+    */
+
+    'timezone' => 'UTC',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Locale Configuration
+    |--------------------------------------------------------------------------
+    |
+    | The application locale determines the default locale that will be used
+    | by the translation service provider. You are free to set this value
+    | to any of the locales which will be supported by the application.
+    |
+    */
+
+    'locale' => 'en',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Fallback Locale
+    |--------------------------------------------------------------------------
+    |
+    | The fallback locale determines the locale to use when the current one
+    | is not available. You may change the value to correspond to any of
+    | the language folders that are provided through your application.
+    |
+    */
+
+    'fallback_locale' => 'en',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Faker Locale
+    |--------------------------------------------------------------------------
+    |
+    | This locale will be used by the Faker PHP library when generating fake
+    | data for your database seeds. For example, this will be used to get
+    | localized telephone numbers, street address information and more.
+    |
+    */
+
+    'faker_locale' => 'en_US',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Encryption Key
+    |--------------------------------------------------------------------------
+    |
+    | This key is used by the Illuminate encrypter service and should be set
+    | to a random, 32 character string, otherwise these encrypted strings
+    | will not be safe. Please do this before deploying an application!
+    |
+    */
+
+    'key' => env('APP_KEY'),
+
+    'cipher' => 'AES-256-CBC',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Autoloaded Service Providers
+    |--------------------------------------------------------------------------
+    |
+    | The service providers listed here will be automatically loaded on the
+    | request to your application. Feel free to add your own services to
+    | this array to grant expanded functionality to your applications.
+    |
+    */
+
+    'providers' => [
+
+        /*
+         * Laravel Framework Service Providers...
+         */
+        Illuminate\Auth\AuthServiceProvider::class,
+        Illuminate\Broadcasting\BroadcastServiceProvider::class,
+        Illuminate\Bus\BusServiceProvider::class,
+        Illuminate\Cache\CacheServiceProvider::class,
+        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
+        Illuminate\Cookie\CookieServiceProvider::class,
+        Illuminate\Database\DatabaseServiceProvider::class,
+        Illuminate\Encryption\EncryptionServiceProvider::class,
+        Illuminate\Filesystem\FilesystemServiceProvider::class,
+        Illuminate\Foundation\Providers\FoundationServiceProvider::class,
+        Illuminate\Hashing\HashServiceProvider::class,
+        Illuminate\Mail\MailServiceProvider::class,
+        Illuminate\Notifications\NotificationServiceProvider::class,
+        Illuminate\Pagination\PaginationServiceProvider::class,
+        Illuminate\Pipeline\PipelineServiceProvider::class,
+        Illuminate\Queue\QueueServiceProvider::class,
+        Illuminate\Redis\RedisServiceProvider::class,
+        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
+        Illuminate\Session\SessionServiceProvider::class,
+        Illuminate\Translation\TranslationServiceProvider::class,
+        Illuminate\Validation\ValidationServiceProvider::class,
+        Illuminate\View\ViewServiceProvider::class,
+
+        /*
+         * Package Service Providers...
+         */
+
+        /*
+         * Application Service Providers...
+         */
+        App\Providers\AppServiceProvider::class,
+        App\Providers\AuthServiceProvider::class,
+        // App\Providers\BroadcastServiceProvider::class,
+        App\Providers\EventServiceProvider::class,
+        App\Providers\RouteServiceProvider::class,
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Class Aliases
+    |--------------------------------------------------------------------------
+    |
+    | This array of class aliases will be registered when this application
+    | is started. However, feel free to register as many as you wish as
+    | the aliases are "lazy" loaded so they don't hinder performance.
+    |
+    */
+
+    'aliases' => [
+
+        'App' => Illuminate\Support\Facades\App::class,
+        'Arr' => Illuminate\Support\Arr::class,
+        'Artisan' => Illuminate\Support\Facades\Artisan::class,
+        'Auth' => Illuminate\Support\Facades\Auth::class,
+        'Blade' => Illuminate\Support\Facades\Blade::class,
+        'Broadcast' => Illuminate\Support\Facades\Broadcast::class,
+        'Bus' => Illuminate\Support\Facades\Bus::class,
+        'Cache' => Illuminate\Support\Facades\Cache::class,
+        'Config' => Illuminate\Support\Facades\Config::class,
+        'Cookie' => Illuminate\Support\Facades\Cookie::class,
+        'Crypt' => Illuminate\Support\Facades\Crypt::class,
+        'DB' => Illuminate\Support\Facades\DB::class,
+        'Eloquent' => Illuminate\Database\Eloquent\Model::class,
+        'Event' => Illuminate\Support\Facades\Event::class,
+        'File' => Illuminate\Support\Facades\File::class,
+        'Gate' => Illuminate\Support\Facades\Gate::class,
+        'Hash' => Illuminate\Support\Facades\Hash::class,
+        'Lang' => Illuminate\Support\Facades\Lang::class,
+        'Log' => Illuminate\Support\Facades\Log::class,
+        'Mail' => Illuminate\Support\Facades\Mail::class,
+        'Notification' => Illuminate\Support\Facades\Notification::class,
+        'Password' => Illuminate\Support\Facades\Password::class,
+        'Queue' => Illuminate\Support\Facades\Queue::class,
+        'Redirect' => Illuminate\Support\Facades\Redirect::class,
+        'Redis' => Illuminate\Support\Facades\Redis::class,
+        'Request' => Illuminate\Support\Facades\Request::class,
+        'Response' => Illuminate\Support\Facades\Response::class,
+        'Route' => Illuminate\Support\Facades\Route::class,
+        'Schema' => Illuminate\Support\Facades\Schema::class,
+        'Session' => Illuminate\Support\Facades\Session::class,
+        'Storage' => Illuminate\Support\Facades\Storage::class,
+        'Str' => Illuminate\Support\Str::class,
+        'URL' => Illuminate\Support\Facades\URL::class,
+        'Validator' => Illuminate\Support\Facades\Validator::class,
+        'View' => Illuminate\Support\Facades\View::class,
+
+    ],
+
+];
Index: laravel58/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/readme.md	(date 1592582522780)
+++ laravel58/readme.md	(date 1592582522780)
@@ -0,0 +1,72 @@
+<p align="center"><img src="https://res.cloudinary.com/dtfbvvkyp/image/upload/v1566331377/laravel-logolockup-cmyk-red.svg" width="400"></p>
+
+<p align="center">
+<a href="https://travis-ci.org/laravel/framework"><img src="https://travis-ci.org/laravel/framework.svg" alt="Build Status"></a>
+<a href="https://packagist.org/packages/laravel/framework"><img src="https://poser.pugx.org/laravel/framework/d/total.svg" alt="Total Downloads"></a>
+<a href="https://packagist.org/packages/laravel/framework"><img src="https://poser.pugx.org/laravel/framework/v/stable.svg" alt="Latest Stable Version"></a>
+<a href="https://packagist.org/packages/laravel/framework"><img src="https://poser.pugx.org/laravel/framework/license.svg" alt="License"></a>
+</p>
+
+## About Laravel
+
+Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:
+
+- [Simple, fast routing engine](https://laravel.com/docs/routing).
+- [Powerful dependency injection container](https://laravel.com/docs/container).
+- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
+- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
+- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
+- [Robust background job processing](https://laravel.com/docs/queues).
+- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).
+
+Laravel is accessible, powerful, and provides tools required for large, robust applications.
+
+## Learning Laravel
+
+Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.
+
+If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.
+
+## Laravel Sponsors
+
+We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).
+
+- **[Vehikl](https://vehikl.com/)**
+- **[Tighten Co.](https://tighten.co)**
+- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
+- **[64 Robots](https://64robots.com)**
+- **[Cubet Techno Labs](https://cubettech.com)**
+- **[Cyber-Duck](https://cyber-duck.co.uk)**
+- **[British Software Development](https://www.britishsoftware.co)**
+- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
+- **[DevSquad](https://devsquad.com)**
+- [UserInsights](https://userinsights.com)
+- [Fragrantica](https://www.fragrantica.com)
+- [SOFTonSOFA](https://softonsofa.com/)
+- [User10](https://user10.com)
+- [Soumettre.fr](https://soumettre.fr/)
+- [CodeBrisk](https://codebrisk.com)
+- [1Forge](https://1forge.com)
+- [TECPRESSO](https://tecpresso.co.jp/)
+- [Runtime Converter](http://runtimeconverter.com/)
+- [WebL'Agence](https://weblagence.com/)
+- [Invoice Ninja](https://www.invoiceninja.com)
+- [iMi digital](https://www.imi-digital.de/)
+- [Earthlink](https://www.earthlink.ro/)
+- [Steadfast Collective](https://steadfastcollective.com/)
+- [We Are The Robots Inc.](https://watr.mx/)
+- [Understand.io](https://www.understand.io/)
+- [Abdel Elrafa](https://abdelelrafa.com)
+- [Hyper Host](https://hyper.host)
+
+## Contributing
+
+Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).
+
+## Security Vulnerabilities
+
+If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.
+
+## License
+
+The Laravel framework is open-source software licensed under the [MIT license](https://opensource.org/licenses/MIT).
Index: laravel58/.editorconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.editorconfig	(date 1592582522737)
+++ laravel58/.editorconfig	(date 1592582522737)
@@ -0,0 +1,15 @@
+root = true
+
+[*]
+charset = utf-8
+end_of_line = lf
+insert_final_newline = true
+indent_style = space
+indent_size = 4
+trim_trailing_whitespace = true
+
+[*.md]
+trim_trailing_whitespace = false
+
+[*.yml]
+indent_size = 2
Index: laravel58/config/auth.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/auth.php	(date 1592582522760)
+++ laravel58/config/auth.php	(date 1592582522760)
@@ -0,0 +1,103 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Authentication Defaults
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default authentication "guard" and password
+    | reset options for your application. You may change these defaults
+    | as required, but they're a perfect start for most applications.
+    |
+    */
+
+    'defaults' => [
+        'guard' => 'web',
+        'passwords' => 'users',
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Authentication Guards
+    |--------------------------------------------------------------------------
+    |
+    | Next, you may define every authentication guard for your application.
+    | Of course, a great default configuration has been defined for you
+    | here which uses session storage and the Eloquent user provider.
+    |
+    | All authentication drivers have a user provider. This defines how the
+    | users are actually retrieved out of your database or other storage
+    | mechanisms used by this application to persist your user's data.
+    |
+    | Supported: "session", "token"
+    |
+    */
+
+    'guards' => [
+        'web' => [
+            'driver' => 'session',
+            'provider' => 'users',
+        ],
+
+        'api' => [
+            'driver' => 'token',
+            'provider' => 'users',
+            'hash' => false,
+        ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | User Providers
+    |--------------------------------------------------------------------------
+    |
+    | All authentication drivers have a user provider. This defines how the
+    | users are actually retrieved out of your database or other storage
+    | mechanisms used by this application to persist your user's data.
+    |
+    | If you have multiple user tables or models you may configure multiple
+    | sources which represent each model / table. These sources may then
+    | be assigned to any extra authentication guards you have defined.
+    |
+    | Supported: "database", "eloquent"
+    |
+    */
+
+    'providers' => [
+        'users' => [
+            'driver' => 'eloquent',
+            'model' => App\User::class,
+        ],
+
+        // 'users' => [
+        //     'driver' => 'database',
+        //     'table' => 'users',
+        // ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Resetting Passwords
+    |--------------------------------------------------------------------------
+    |
+    | You may specify multiple password reset configurations if you have more
+    | than one user table or model in the application and you want to have
+    | separate password reset settings based on the specific user types.
+    |
+    | The expire time is the number of minutes that the reset token should be
+    | considered valid. This security feature keeps tokens short-lived so
+    | they have less time to be guessed. You may change this as needed.
+    |
+    */
+
+    'passwords' => [
+        'users' => [
+            'provider' => 'users',
+            'table' => 'password_resets',
+            'expire' => 60,
+        ],
+    ],
+
+];
Index: laravel58/config/broadcasting.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/broadcasting.php	(date 1592582522760)
+++ laravel58/config/broadcasting.php	(date 1592582522760)
@@ -0,0 +1,59 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Broadcaster
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default broadcaster that will be used by the
+    | framework when an event needs to be broadcast. You may set this to
+    | any of the connections defined in the "connections" array below.
+    |
+    | Supported: "pusher", "redis", "log", "null"
+    |
+    */
+
+    'default' => env('BROADCAST_DRIVER', 'null'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Broadcast Connections
+    |--------------------------------------------------------------------------
+    |
+    | Here you may define all of the broadcast connections that will be used
+    | to broadcast events to other systems or over websockets. Samples of
+    | each available type of connection are provided inside this array.
+    |
+    */
+
+    'connections' => [
+
+        'pusher' => [
+            'driver' => 'pusher',
+            'key' => env('PUSHER_APP_KEY'),
+            'secret' => env('PUSHER_APP_SECRET'),
+            'app_id' => env('PUSHER_APP_ID'),
+            'options' => [
+                'cluster' => env('PUSHER_APP_CLUSTER'),
+                'useTLS' => true,
+            ],
+        ],
+
+        'redis' => [
+            'driver' => 'redis',
+            'connection' => 'default',
+        ],
+
+        'log' => [
+            'driver' => 'log',
+        ],
+
+        'null' => [
+            'driver' => 'null',
+        ],
+
+    ],
+
+];
Index: laravel58/config/cache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/cache.php	(date 1592582522761)
+++ laravel58/config/cache.php	(date 1592582522761)
@@ -0,0 +1,103 @@
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Cache Store
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default cache connection that gets used while
+    | using this caching library. This connection is used when another is
+    | not explicitly specified when executing a given caching function.
+    |
+    | Supported: "apc", "array", "database", "file",
+    |            "memcached", "redis", "dynamodb"
+    |
+    */
+
+    'default' => env('CACHE_DRIVER', 'file'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Cache Stores
+    |--------------------------------------------------------------------------
+    |
+    | Here you may define all of the cache "stores" for your application as
+    | well as their drivers. You may even define multiple stores for the
+    | same cache driver to group types of items stored in your caches.
+    |
+    */
+
+    'stores' => [
+
+        'apc' => [
+            'driver' => 'apc',
+        ],
+
+        'array' => [
+            'driver' => 'array',
+        ],
+
+        'database' => [
+            'driver' => 'database',
+            'table' => 'cache',
+            'connection' => null,
+        ],
+
+        'file' => [
+            'driver' => 'file',
+            'path' => storage_path('framework/cache/data'),
+        ],
+
+        'memcached' => [
+            'driver' => 'memcached',
+            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
+            'sasl' => [
+                env('MEMCACHED_USERNAME'),
+                env('MEMCACHED_PASSWORD'),
+            ],
+            'options' => [
+                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
+            ],
+            'servers' => [
+                [
+                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
+                    'port' => env('MEMCACHED_PORT', 11211),
+                    'weight' => 100,
+                ],
+            ],
+        ],
+
+        'redis' => [
+            'driver' => 'redis',
+            'connection' => 'cache',
+        ],
+
+        'dynamodb' => [
+            'driver' => 'dynamodb',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
+            'endpoint' => env('DYNAMODB_ENDPOINT'),
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Cache Key Prefix
+    |--------------------------------------------------------------------------
+    |
+    | When utilizing a RAM based store such as APC or Memcached, there might
+    | be other applications utilizing the same cache. So, we'll specify a
+    | value to get prefixed to all our keys so we can avoid collisions.
+    |
+    */
+
+    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache'),
+
+];
Index: laravel58/config/database.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/database.php	(date 1592582522761)
+++ laravel58/config/database.php	(date 1592582522761)
@@ -0,0 +1,147 @@
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Database Connection Name
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify which of the database connections below you wish
+    | to use as your default connection for all database work. Of course
+    | you may use many connections at once using the Database library.
+    |
+    */
+
+    'default' => env('DB_CONNECTION', 'mysql'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Database Connections
+    |--------------------------------------------------------------------------
+    |
+    | Here are each of the database connections setup for your application.
+    | Of course, examples of configuring each database platform that is
+    | supported by Laravel is shown below to make development simple.
+    |
+    |
+    | All database work in Laravel is done through the PHP PDO facilities
+    | so make sure you have the driver for your particular database of
+    | choice installed on your machine before you begin development.
+    |
+    */
+
+    'connections' => [
+
+        'sqlite' => [
+            'driver' => 'sqlite',
+            'url' => env('DATABASE_URL'),
+            'database' => env('DB_DATABASE', database_path('database.sqlite')),
+            'prefix' => '',
+            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
+        ],
+
+        'mysql' => [
+            'driver' => 'mysql',
+            'url' => env('DATABASE_URL'),
+            'host' => env('DB_HOST', '127.0.0.1'),
+            'port' => env('DB_PORT', '3306'),
+            'database' => env('DB_DATABASE', 'forge'),
+            'username' => env('DB_USERNAME', 'forge'),
+            'password' => env('DB_PASSWORD', ''),
+            'unix_socket' => env('DB_SOCKET', ''),
+            'charset' => 'utf8mb4',
+            'collation' => 'utf8mb4_unicode_ci',
+            'prefix' => '',
+            'prefix_indexes' => true,
+            'strict' => true,
+            'engine' => null,
+            'options' => extension_loaded('pdo_mysql') ? array_filter([
+                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
+            ]) : [],
+        ],
+
+        'pgsql' => [
+            'driver' => 'pgsql',
+            'url' => env('DATABASE_URL'),
+            'host' => env('DB_HOST', '127.0.0.1'),
+            'port' => env('DB_PORT', '5432'),
+            'database' => env('DB_DATABASE', 'forge'),
+            'username' => env('DB_USERNAME', 'forge'),
+            'password' => env('DB_PASSWORD', ''),
+            'charset' => 'utf8',
+            'prefix' => '',
+            'prefix_indexes' => true,
+            'schema' => 'public',
+            'sslmode' => 'prefer',
+        ],
+
+        'sqlsrv' => [
+            'driver' => 'sqlsrv',
+            'url' => env('DATABASE_URL'),
+            'host' => env('DB_HOST', 'localhost'),
+            'port' => env('DB_PORT', '1433'),
+            'database' => env('DB_DATABASE', 'forge'),
+            'username' => env('DB_USERNAME', 'forge'),
+            'password' => env('DB_PASSWORD', ''),
+            'charset' => 'utf8',
+            'prefix' => '',
+            'prefix_indexes' => true,
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Migration Repository Table
+    |--------------------------------------------------------------------------
+    |
+    | This table keeps track of all the migrations that have already run for
+    | your application. Using this information, we can determine which of
+    | the migrations on disk haven't actually been run in the database.
+    |
+    */
+
+    'migrations' => 'migrations',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Redis Databases
+    |--------------------------------------------------------------------------
+    |
+    | Redis is an open source, fast, and advanced key-value store that also
+    | provides a richer body of commands than a typical key-value system
+    | such as APC or Memcached. Laravel makes it easy to dig right in.
+    |
+    */
+
+    'redis' => [
+
+        'client' => env('REDIS_CLIENT', 'predis'),
+
+        'options' => [
+            'cluster' => env('REDIS_CLUSTER', 'predis'),
+            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
+        ],
+
+        'default' => [
+            'url' => env('REDIS_URL'),
+            'host' => env('REDIS_HOST', '127.0.0.1'),
+            'password' => env('REDIS_PASSWORD', null),
+            'port' => env('REDIS_PORT', 6379),
+            'database' => env('REDIS_DB', 0),
+        ],
+
+        'cache' => [
+            'url' => env('REDIS_URL'),
+            'host' => env('REDIS_HOST', '127.0.0.1'),
+            'password' => env('REDIS_PASSWORD', null),
+            'port' => env('REDIS_PORT', 6379),
+            'database' => env('REDIS_CACHE_DB', 1),
+        ],
+
+    ],
+
+];
Index: laravel58/artisan
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/artisan	(date 1592582522756)
+++ laravel58/artisan	(date 1592582522756)
@@ -0,0 +1,53 @@
+#!/usr/bin/env php
+<?php
+
+define('LARAVEL_START', microtime(true));
+
+/*
+|--------------------------------------------------------------------------
+| Register The Auto Loader
+|--------------------------------------------------------------------------
+|
+| Composer provides a convenient, automatically generated class loader
+| for our application. We just need to utilize it! We'll require it
+| into the script here so that we do not have to worry about the
+| loading of any our classes "manually". Feels great to relax.
+|
+*/
+
+require __DIR__.'/vendor/autoload.php';
+
+$app = require_once __DIR__.'/bootstrap/app.php';
+
+/*
+|--------------------------------------------------------------------------
+| Run The Artisan Application
+|--------------------------------------------------------------------------
+|
+| When we run the console application, the current CLI command will be
+| executed in this console and the response sent back to a terminal
+| or another output device for the developers. Here goes nothing!
+|
+*/
+
+$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
+
+$status = $kernel->handle(
+    $input = new Symfony\Component\Console\Input\ArgvInput,
+    new Symfony\Component\Console\Output\ConsoleOutput
+);
+
+/*
+|--------------------------------------------------------------------------
+| Shutdown The Application
+|--------------------------------------------------------------------------
+|
+| Once Artisan has finished running, we will fire off the shutdown events
+| so that any final work may be done by the application before we shut
+| down the process. This is the last thing to happen to the request.
+|
+*/
+
+$kernel->terminate($input, $status);
+
+exit($status);
Index: laravel58/config/filesystems.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/filesystems.php	(date 1592582522762)
+++ laravel58/config/filesystems.php	(date 1592582522762)
@@ -0,0 +1,69 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Filesystem Disk
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the default filesystem disk that should be used
+    | by the framework. The "local" disk, as well as a variety of cloud
+    | based disks are available to your application. Just store away!
+    |
+    */
+
+    'default' => env('FILESYSTEM_DRIVER', 'local'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Cloud Filesystem Disk
+    |--------------------------------------------------------------------------
+    |
+    | Many applications store files both locally and in the cloud. For this
+    | reason, you may specify a default "cloud" driver here. This driver
+    | will be bound as the Cloud disk implementation in the container.
+    |
+    */
+
+    'cloud' => env('FILESYSTEM_CLOUD', 's3'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Filesystem Disks
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure as many filesystem "disks" as you wish, and you
+    | may even configure multiple disks of the same driver. Defaults have
+    | been setup for each driver as an example of the required options.
+    |
+    | Supported Drivers: "local", "ftp", "sftp", "s3", "rackspace"
+    |
+    */
+
+    'disks' => [
+
+        'local' => [
+            'driver' => 'local',
+            'root' => storage_path('app'),
+        ],
+
+        'public' => [
+            'driver' => 'local',
+            'root' => storage_path('app/public'),
+            'url' => env('APP_URL').'/storage',
+            'visibility' => 'public',
+        ],
+
+        's3' => [
+            'driver' => 's3',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'region' => env('AWS_DEFAULT_REGION'),
+            'bucket' => env('AWS_BUCKET'),
+            'url' => env('AWS_URL'),
+        ],
+
+    ],
+
+];
Index: laravel58/_ide_helper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/_ide_helper.php	(date 1599913451712)
+++ laravel58/_ide_helper.php	(date 1599913451712)
@@ -0,0 +1,18874 @@
+<?php
+// @formatter:off
+
+/**
+ * A helper file for Laravel, to provide autocomplete information to your IDE
+ * Generated for Laravel 6.18.22 on 2020-09-12 12:24:11.
+ *
+ * This file should not be included in your code, only analyzed by your IDE!
+ *
+ * @author Barry vd. Heuvel <barryvdh@gmail.com>
+ * @see https://github.com/barryvdh/laravel-ide-helper
+ */
+
+namespace Illuminate\Support\Facades { 
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Contracts\Foundation\Application
+     */ 
+    class App {
+        
+        /**
+         * Get the version number of the application.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function version()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->version();
+        }
+        
+        /**
+         * Run the given array of bootstrap classes.
+         *
+         * @param string[] $bootstrappers
+         * @return void 
+         * @static 
+         */ 
+        public static function bootstrapWith($bootstrappers)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bootstrapWith($bootstrappers);
+        }
+        
+        /**
+         * Register a callback to run after loading the environment.
+         *
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function afterLoadingEnvironment($callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterLoadingEnvironment($callback);
+        }
+        
+        /**
+         * Register a callback to run before a bootstrapper.
+         *
+         * @param string $bootstrapper
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function beforeBootstrapping($bootstrapper, $callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->beforeBootstrapping($bootstrapper, $callback);
+        }
+        
+        /**
+         * Register a callback to run after a bootstrapper.
+         *
+         * @param string $bootstrapper
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function afterBootstrapping($bootstrapper, $callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterBootstrapping($bootstrapper, $callback);
+        }
+        
+        /**
+         * Determine if the application has been bootstrapped before.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasBeenBootstrapped()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->hasBeenBootstrapped();
+        }
+        
+        /**
+         * Set the base path for the application.
+         *
+         * @param string $basePath
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function setBasePath($basePath)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->setBasePath($basePath);
+        }
+        
+        /**
+         * Get the path to the application "app" directory.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function path($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->path($path);
+        }
+        
+        /**
+         * Set the application directory.
+         *
+         * @param string $path
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function useAppPath($path)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useAppPath($path);
+        }
+        
+        /**
+         * Get the base path of the Laravel installation.
+         *
+         * @param string $path Optionally, a path to append to the base path
+         * @return string 
+         * @static 
+         */ 
+        public static function basePath($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->basePath($path);
+        }
+        
+        /**
+         * Get the path to the bootstrap directory.
+         *
+         * @param string $path Optionally, a path to append to the bootstrap path
+         * @return string 
+         * @static 
+         */ 
+        public static function bootstrapPath($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->bootstrapPath($path);
+        }
+        
+        /**
+         * Get the path to the application configuration files.
+         *
+         * @param string $path Optionally, a path to append to the config path
+         * @return string 
+         * @static 
+         */ 
+        public static function configPath($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->configPath($path);
+        }
+        
+        /**
+         * Get the path to the database directory.
+         *
+         * @param string $path Optionally, a path to append to the database path
+         * @return string 
+         * @static 
+         */ 
+        public static function databasePath($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->databasePath($path);
+        }
+        
+        /**
+         * Set the database directory.
+         *
+         * @param string $path
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function useDatabasePath($path)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useDatabasePath($path);
+        }
+        
+        /**
+         * Get the path to the language files.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function langPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->langPath();
+        }
+        
+        /**
+         * Get the path to the public / web directory.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function publicPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->publicPath();
+        }
+        
+        /**
+         * Get the path to the storage directory.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function storagePath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->storagePath();
+        }
+        
+        /**
+         * Set the storage directory.
+         *
+         * @param string $path
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function useStoragePath($path)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useStoragePath($path);
+        }
+        
+        /**
+         * Get the path to the resources directory.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function resourcePath($path = '')
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resourcePath($path);
+        }
+        
+        /**
+         * Get the path to the environment file directory.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function environmentPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentPath();
+        }
+        
+        /**
+         * Set the directory for the environment file.
+         *
+         * @param string $path
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function useEnvironmentPath($path)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useEnvironmentPath($path);
+        }
+        
+        /**
+         * Set the environment file to be loaded during bootstrapping.
+         *
+         * @param string $file
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function loadEnvironmentFrom($file)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->loadEnvironmentFrom($file);
+        }
+        
+        /**
+         * Get the environment file the application is using.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function environmentFile()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentFile();
+        }
+        
+        /**
+         * Get the fully qualified path to the environment file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function environmentFilePath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentFilePath();
+        }
+        
+        /**
+         * Get or check the current application environment.
+         *
+         * @param string|array $environments
+         * @return string|bool 
+         * @static 
+         */ 
+        public static function environment(...$environments)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environment(...$environments);
+        }
+        
+        /**
+         * Determine if application is in local environment.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isLocal()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isLocal();
+        }
+        
+        /**
+         * Determine if application is in production environment.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isProduction()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isProduction();
+        }
+        
+        /**
+         * Detect the application's current environment.
+         *
+         * @param \Closure $callback
+         * @return string 
+         * @static 
+         */ 
+        public static function detectEnvironment($callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->detectEnvironment($callback);
+        }
+        
+        /**
+         * Determine if the application is running in the console.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function runningInConsole()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->runningInConsole();
+        }
+        
+        /**
+         * Determine if the application is running unit tests.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function runningUnitTests()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->runningUnitTests();
+        }
+        
+        /**
+         * Register all of the configured providers.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function registerConfiguredProviders()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerConfiguredProviders();
+        }
+        
+        /**
+         * Register a service provider with the application.
+         *
+         * @param \Illuminate\Support\ServiceProvider|string $provider
+         * @param bool $force
+         * @return \Illuminate\Support\ServiceProvider 
+         * @static 
+         */ 
+        public static function register($provider, $force = false)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->register($provider, $force);
+        }
+        
+        /**
+         * Get the registered service provider instance if it exists.
+         *
+         * @param \Illuminate\Support\ServiceProvider|string $provider
+         * @return \Illuminate\Support\ServiceProvider|null 
+         * @static 
+         */ 
+        public static function getProvider($provider)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getProvider($provider);
+        }
+        
+        /**
+         * Get the registered service provider instances if any exist.
+         *
+         * @param \Illuminate\Support\ServiceProvider|string $provider
+         * @return array 
+         * @static 
+         */ 
+        public static function getProviders($provider)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getProviders($provider);
+        }
+        
+        /**
+         * Resolve a service provider instance from the class name.
+         *
+         * @param string $provider
+         * @return \Illuminate\Support\ServiceProvider 
+         * @static 
+         */ 
+        public static function resolveProvider($provider)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resolveProvider($provider);
+        }
+        
+        /**
+         * Load and boot all of the remaining deferred providers.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function loadDeferredProviders()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->loadDeferredProviders();
+        }
+        
+        /**
+         * Load the provider for a deferred service.
+         *
+         * @param string $service
+         * @return void 
+         * @static 
+         */ 
+        public static function loadDeferredProvider($service)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->loadDeferredProvider($service);
+        }
+        
+        /**
+         * Register a deferred provider and service.
+         *
+         * @param string $provider
+         * @param string|null $service
+         * @return void 
+         * @static 
+         */ 
+        public static function registerDeferredProvider($provider, $service = null)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerDeferredProvider($provider, $service);
+        }
+        
+        /**
+         * Resolve the given type from the container.
+         *
+         * @param string $abstract
+         * @param array $parameters
+         * @return mixed 
+         * @static 
+         */ 
+        public static function make($abstract, $parameters = [])
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->make($abstract, $parameters);
+        }
+        
+        /**
+         * Determine if the given abstract type has been bound.
+         *
+         * @param string $abstract
+         * @return bool 
+         * @static 
+         */ 
+        public static function bound($abstract)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->bound($abstract);
+        }
+        
+        /**
+         * Determine if the application has booted.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isBooted()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isBooted();
+        }
+        
+        /**
+         * Boot the application's service providers.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function boot()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->boot();
+        }
+        
+        /**
+         * Register a new boot listener.
+         *
+         * @param callable $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function booting($callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->booting($callback);
+        }
+        
+        /**
+         * Register a new "booted" listener.
+         *
+         * @param callable $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function booted($callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->booted($callback);
+        }
+        
+        /**
+         * {@inheritdoc}
+         *
+         * @static 
+         */ 
+        public static function handle($request, $type = 1, $catch = true)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->handle($request, $type, $catch);
+        }
+        
+        /**
+         * Determine if middleware has been disabled for the application.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function shouldSkipMiddleware()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->shouldSkipMiddleware();
+        }
+        
+        /**
+         * Get the path to the cached services.php file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCachedServicesPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedServicesPath();
+        }
+        
+        /**
+         * Get the path to the cached packages.php file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCachedPackagesPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedPackagesPath();
+        }
+        
+        /**
+         * Determine if the application configuration is cached.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function configurationIsCached()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->configurationIsCached();
+        }
+        
+        /**
+         * Get the path to the configuration cache file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCachedConfigPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedConfigPath();
+        }
+        
+        /**
+         * Determine if the application routes are cached.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function routesAreCached()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->routesAreCached();
+        }
+        
+        /**
+         * Get the path to the routes cache file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCachedRoutesPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedRoutesPath();
+        }
+        
+        /**
+         * Determine if the application events are cached.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function eventsAreCached()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->eventsAreCached();
+        }
+        
+        /**
+         * Get the path to the events cache file.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCachedEventsPath()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedEventsPath();
+        }
+        
+        /**
+         * Determine if the application is currently down for maintenance.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isDownForMaintenance()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isDownForMaintenance();
+        }
+        
+        /**
+         * Throw an HttpException with the given data.
+         *
+         * @param int $code
+         * @param string $message
+         * @param array $headers
+         * @return void 
+         * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+         * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+         * @static 
+         */ 
+        public static function abort($code, $message = '', $headers = [])
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->abort($code, $message, $headers);
+        }
+        
+        /**
+         * Register a terminating callback with the application.
+         *
+         * @param callable|string $callback
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function terminating($callback)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->terminating($callback);
+        }
+        
+        /**
+         * Terminate the application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function terminate()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->terminate();
+        }
+        
+        /**
+         * Get the service providers that have been loaded.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getLoadedProviders()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getLoadedProviders();
+        }
+        
+        /**
+         * Get the application's deferred services.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getDeferredServices()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getDeferredServices();
+        }
+        
+        /**
+         * Set the application's deferred services.
+         *
+         * @param array $services
+         * @return void 
+         * @static 
+         */ 
+        public static function setDeferredServices($services)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->setDeferredServices($services);
+        }
+        
+        /**
+         * Add an array of services to the application's deferred services.
+         *
+         * @param array $services
+         * @return void 
+         * @static 
+         */ 
+        public static function addDeferredServices($services)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->addDeferredServices($services);
+        }
+        
+        /**
+         * Determine if the given service is a deferred service.
+         *
+         * @param string $service
+         * @return bool 
+         * @static 
+         */ 
+        public static function isDeferredService($service)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isDeferredService($service);
+        }
+        
+        /**
+         * Configure the real-time facade namespace.
+         *
+         * @param string $namespace
+         * @return void 
+         * @static 
+         */ 
+        public static function provideFacades($namespace)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->provideFacades($namespace);
+        }
+        
+        /**
+         * Get the current application locale.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getLocale()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getLocale();
+        }
+        
+        /**
+         * Set the current application locale.
+         *
+         * @param string $locale
+         * @return void 
+         * @static 
+         */ 
+        public static function setLocale($locale)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->setLocale($locale);
+        }
+        
+        /**
+         * Determine if application locale is the given locale.
+         *
+         * @param string $locale
+         * @return bool 
+         * @static 
+         */ 
+        public static function isLocale($locale)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isLocale($locale);
+        }
+        
+        /**
+         * Register the core class aliases in the container.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function registerCoreContainerAliases()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerCoreContainerAliases();
+        }
+        
+        /**
+         * Flush the container of all bindings and resolved instances.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flush()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->flush();
+        }
+        
+        /**
+         * Get the application namespace.
+         *
+         * @return string 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function getNamespace()
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getNamespace();
+        }
+        
+        /**
+         * Define a contextual binding.
+         *
+         * @param array|string $concrete
+         * @return \Illuminate\Contracts\Container\ContextualBindingBuilder 
+         * @static 
+         */ 
+        public static function when($concrete)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->when($concrete);
+        }
+        
+        /**
+         * Returns true if the container can return an entry for the given identifier.
+         * 
+         * Returns false otherwise.
+         * 
+         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
+         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
+         *
+         * @param string $id Identifier of the entry to look for.
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($id)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->has($id);
+        }
+        
+        /**
+         * Determine if the given abstract type has been resolved.
+         *
+         * @param string $abstract
+         * @return bool 
+         * @static 
+         */ 
+        public static function resolved($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resolved($abstract);
+        }
+        
+        /**
+         * Determine if a given type is shared.
+         *
+         * @param string $abstract
+         * @return bool 
+         * @static 
+         */ 
+        public static function isShared($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isShared($abstract);
+        }
+        
+        /**
+         * Determine if a given string is an alias.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function isAlias($name)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isAlias($name);
+        }
+        
+        /**
+         * Register a binding with the container.
+         *
+         * @param string $abstract
+         * @param \Closure|string|null $concrete
+         * @param bool $shared
+         * @return void 
+         * @static 
+         */ 
+        public static function bind($abstract, $concrete = null, $shared = false)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bind($abstract, $concrete, $shared);
+        }
+        
+        /**
+         * Determine if the container has a method binding.
+         *
+         * @param string $method
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMethodBinding($method)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->hasMethodBinding($method);
+        }
+        
+        /**
+         * Bind a callback to resolve with Container::call.
+         *
+         * @param array|string $method
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function bindMethod($method, $callback)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bindMethod($method, $callback);
+        }
+        
+        /**
+         * Get the method binding for the given method.
+         *
+         * @param string $method
+         * @param mixed $instance
+         * @return mixed 
+         * @static 
+         */ 
+        public static function callMethodBinding($method, $instance)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->callMethodBinding($method, $instance);
+        }
+        
+        /**
+         * Add a contextual binding to the container.
+         *
+         * @param string $concrete
+         * @param string $abstract
+         * @param \Closure|string $implementation
+         * @return void 
+         * @static 
+         */ 
+        public static function addContextualBinding($concrete, $abstract, $implementation)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->addContextualBinding($concrete, $abstract, $implementation);
+        }
+        
+        /**
+         * Register a binding if it hasn't already been registered.
+         *
+         * @param string $abstract
+         * @param \Closure|string|null $concrete
+         * @param bool $shared
+         * @return void 
+         * @static 
+         */ 
+        public static function bindIf($abstract, $concrete = null, $shared = false)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bindIf($abstract, $concrete, $shared);
+        }
+        
+        /**
+         * Register a shared binding in the container.
+         *
+         * @param string $abstract
+         * @param \Closure|string|null $concrete
+         * @return void 
+         * @static 
+         */ 
+        public static function singleton($abstract, $concrete = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->singleton($abstract, $concrete);
+        }
+        
+        /**
+         * Register a shared binding if it hasn't already been registered.
+         *
+         * @param string $abstract
+         * @param \Closure|string|null $concrete
+         * @return void 
+         * @static 
+         */ 
+        public static function singletonIf($abstract, $concrete = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->singletonIf($abstract, $concrete);
+        }
+        
+        /**
+         * "Extend" an abstract type in the container.
+         *
+         * @param string $abstract
+         * @param \Closure $closure
+         * @return void 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function extend($abstract, $closure)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->extend($abstract, $closure);
+        }
+        
+        /**
+         * Register an existing instance as shared in the container.
+         *
+         * @param string $abstract
+         * @param mixed $instance
+         * @return mixed 
+         * @static 
+         */ 
+        public static function instance($abstract, $instance)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->instance($abstract, $instance);
+        }
+        
+        /**
+         * Assign a set of tags to a given binding.
+         *
+         * @param array|string $abstracts
+         * @param array|mixed $tags
+         * @return void 
+         * @static 
+         */ 
+        public static function tag($abstracts, $tags)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->tag($abstracts, $tags);
+        }
+        
+        /**
+         * Resolve all of the bindings for a given tag.
+         *
+         * @param string $tag
+         * @return \Illuminate\Container\iterable 
+         * @static 
+         */ 
+        public static function tagged($tag)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->tagged($tag);
+        }
+        
+        /**
+         * Alias a type to a different name.
+         *
+         * @param string $abstract
+         * @param string $alias
+         * @return void 
+         * @throws \LogicException
+         * @static 
+         */ 
+        public static function alias($abstract, $alias)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->alias($abstract, $alias);
+        }
+        
+        /**
+         * Bind a new callback to an abstract's rebind event.
+         *
+         * @param string $abstract
+         * @param \Closure $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function rebinding($abstract, $callback)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->rebinding($abstract, $callback);
+        }
+        
+        /**
+         * Refresh an instance on the given target and method.
+         *
+         * @param string $abstract
+         * @param mixed $target
+         * @param string $method
+         * @return mixed 
+         * @static 
+         */ 
+        public static function refresh($abstract, $target, $method)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->refresh($abstract, $target, $method);
+        }
+        
+        /**
+         * Wrap the given closure such that its dependencies will be injected when executed.
+         *
+         * @param \Closure $callback
+         * @param array $parameters
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function wrap($callback, $parameters = [])
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->wrap($callback, $parameters);
+        }
+        
+        /**
+         * Call the given Closure / class@method and inject its dependencies.
+         *
+         * @param callable|string $callback
+         * @param array $parameters
+         * @param string|null $defaultMethod
+         * @return mixed 
+         * @static 
+         */ 
+        public static function call($callback, $parameters = [], $defaultMethod = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->call($callback, $parameters, $defaultMethod);
+        }
+        
+        /**
+         * Get a closure to resolve the given type from the container.
+         *
+         * @param string $abstract
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function factory($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->factory($abstract);
+        }
+        
+        /**
+         * An alias function name for make().
+         *
+         * @param string $abstract
+         * @param array $parameters
+         * @return mixed 
+         * @static 
+         */ 
+        public static function makeWith($abstract, $parameters = [])
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->makeWith($abstract, $parameters);
+        }
+        
+        /**
+         * Finds an entry of the container by its identifier and returns it.
+         *
+         * @param string $id Identifier of the entry to look for.
+         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
+         * @throws ContainerExceptionInterface Error while retrieving the entry.
+         * @return mixed Entry.
+         * @static 
+         */ 
+        public static function get($id)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->get($id);
+        }
+        
+        /**
+         * Instantiate a concrete instance of the given type.
+         *
+         * @param string $concrete
+         * @return mixed 
+         * @throws \Illuminate\Contracts\Container\BindingResolutionException
+         * @static 
+         */ 
+        public static function build($concrete)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->build($concrete);
+        }
+        
+        /**
+         * Register a new resolving callback.
+         *
+         * @param \Closure|string $abstract
+         * @param \Closure|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function resolving($abstract, $callback = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->resolving($abstract, $callback);
+        }
+        
+        /**
+         * Register a new after resolving callback for all types.
+         *
+         * @param \Closure|string $abstract
+         * @param \Closure|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function afterResolving($abstract, $callback = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterResolving($abstract, $callback);
+        }
+        
+        /**
+         * Get the container's bindings.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getBindings()
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getBindings();
+        }
+        
+        /**
+         * Get the alias for an abstract if available.
+         *
+         * @param string $abstract
+         * @return string 
+         * @static 
+         */ 
+        public static function getAlias($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getAlias($abstract);
+        }
+        
+        /**
+         * Remove all of the extender callbacks for a given type.
+         *
+         * @param string $abstract
+         * @return void 
+         * @static 
+         */ 
+        public static function forgetExtenders($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetExtenders($abstract);
+        }
+        
+        /**
+         * Remove a resolved instance from the instance cache.
+         *
+         * @param string $abstract
+         * @return void 
+         * @static 
+         */ 
+        public static function forgetInstance($abstract)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetInstance($abstract);
+        }
+        
+        /**
+         * Clear all of the instances from the container.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function forgetInstances()
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetInstances();
+        }
+        
+        /**
+         * Get the globally available instance of the container.
+         *
+         * @return static 
+         * @static 
+         */ 
+        public static function getInstance()
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        return \Illuminate\Foundation\Application::getInstance();
+        }
+        
+        /**
+         * Set the shared instance of the container.
+         *
+         * @param \Illuminate\Contracts\Container\Container|null $container
+         * @return \Illuminate\Contracts\Container\Container|static 
+         * @static 
+         */ 
+        public static function setInstance($container = null)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        return \Illuminate\Foundation\Application::setInstance($container);
+        }
+        
+        /**
+         * Determine if a given offset exists.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function offsetExists($key)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->offsetExists($key);
+        }
+        
+        /**
+         * Get the value at a given offset.
+         *
+         * @param string $key
+         * @return mixed 
+         * @static 
+         */ 
+        public static function offsetGet($key)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->offsetGet($key);
+        }
+        
+        /**
+         * Set the value at a given offset.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetSet($key, $value)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->offsetSet($key, $value);
+        }
+        
+        /**
+         * Unset the value at a given offset.
+         *
+         * @param string $key
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetUnset($key)
+        {
+            //Method inherited from \Illuminate\Container\Container            
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->offsetUnset($key);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Contracts\Console\Kernel
+     */ 
+    class Artisan {
+        
+        /**
+         * Run the console application.
+         *
+         * @param \Symfony\Component\Console\Input\InputInterface $input
+         * @param \Symfony\Component\Console\Output\OutputInterface|null $output
+         * @return int 
+         * @static 
+         */ 
+        public static function handle($input, $output = null)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->handle($input, $output);
+        }
+        
+        /**
+         * Terminate the application.
+         *
+         * @param \Symfony\Component\Console\Input\InputInterface $input
+         * @param int $status
+         * @return void 
+         * @static 
+         */ 
+        public static function terminate($input, $status)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        $instance->terminate($input, $status);
+        }
+        
+        /**
+         * Register a Closure based command with the application.
+         *
+         * @param string $signature
+         * @param \Closure $callback
+         * @return \Illuminate\Foundation\Console\ClosureCommand 
+         * @static 
+         */ 
+        public static function command($signature, $callback)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->command($signature, $callback);
+        }
+        
+        /**
+         * Register the given command with the console application.
+         *
+         * @param \Symfony\Component\Console\Command\Command $command
+         * @return void 
+         * @static 
+         */ 
+        public static function registerCommand($command)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        $instance->registerCommand($command);
+        }
+        
+        /**
+         * Run an Artisan console command by name.
+         *
+         * @param string $command
+         * @param array $parameters
+         * @param \Symfony\Component\Console\Output\OutputInterface|null $outputBuffer
+         * @return int 
+         * @throws \Symfony\Component\Console\Exception\CommandNotFoundException
+         * @static 
+         */ 
+        public static function call($command, $parameters = [], $outputBuffer = null)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->call($command, $parameters, $outputBuffer);
+        }
+        
+        /**
+         * Queue the given console command.
+         *
+         * @param string $command
+         * @param array $parameters
+         * @return \Illuminate\Foundation\Bus\PendingDispatch 
+         * @static 
+         */ 
+        public static function queue($command, $parameters = [])
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->queue($command, $parameters);
+        }
+        
+        /**
+         * Get all of the commands registered with the console.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function all()
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->all();
+        }
+        
+        /**
+         * Get the output for the last run command.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function output()
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        return $instance->output();
+        }
+        
+        /**
+         * Bootstrap the application for artisan commands.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function bootstrap()
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        $instance->bootstrap();
+        }
+        
+        /**
+         * Set the Artisan application instance.
+         *
+         * @param \Illuminate\Console\Application $artisan
+         * @return void 
+         * @static 
+         */ 
+        public static function setArtisan($artisan)
+        {
+            //Method inherited from \Illuminate\Foundation\Console\Kernel            
+                        /** @var \App\Console\Kernel $instance */
+                        $instance->setArtisan($artisan);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Auth\AuthManager
+     * @see \Illuminate\Contracts\Auth\Factory
+     * @see \Illuminate\Contracts\Auth\Guard
+     * @see \Illuminate\Contracts\Auth\StatefulGuard
+     */ 
+    class Auth {
+        
+        /**
+         * Attempt to get the guard from the local cache.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard 
+         * @static 
+         */ 
+        public static function guard($name = null)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->guard($name);
+        }
+        
+        /**
+         * Create a session based authentication guard.
+         *
+         * @param string $name
+         * @param array $config
+         * @return \Illuminate\Auth\SessionGuard 
+         * @static 
+         */ 
+        public static function createSessionDriver($name, $config)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createSessionDriver($name, $config);
+        }
+        
+        /**
+         * Create a token based authentication guard.
+         *
+         * @param string $name
+         * @param array $config
+         * @return \Illuminate\Auth\TokenGuard 
+         * @static 
+         */ 
+        public static function createTokenDriver($name, $config)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createTokenDriver($name, $config);
+        }
+        
+        /**
+         * Get the default authentication driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default guard driver the factory should serve.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function shouldUse($name)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        $instance->shouldUse($name);
+        }
+        
+        /**
+         * Set the default authentication driver name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Register a new callback based request guard.
+         *
+         * @param string $driver
+         * @param callable $callback
+         * @return \Illuminate\Auth\AuthManager 
+         * @static 
+         */ 
+        public static function viaRequest($driver, $callback)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->viaRequest($driver, $callback);
+        }
+        
+        /**
+         * Get the user resolver callback.
+         *
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function userResolver()
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->userResolver();
+        }
+        
+        /**
+         * Set the callback to be used to resolve users.
+         *
+         * @param \Closure $userResolver
+         * @return \Illuminate\Auth\AuthManager 
+         * @static 
+         */ 
+        public static function resolveUsersUsing($userResolver)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->resolveUsersUsing($userResolver);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Auth\AuthManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Register a custom provider creator Closure.
+         *
+         * @param string $name
+         * @param \Closure $callback
+         * @return \Illuminate\Auth\AuthManager 
+         * @static 
+         */ 
+        public static function provider($name, $callback)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->provider($name, $callback);
+        }
+        
+        /**
+         * Determines if any guards have already been resolved.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasResolvedGuards()
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->hasResolvedGuards();
+        }
+        
+        /**
+         * Create the user provider implementation for the driver.
+         *
+         * @param string|null $provider
+         * @return \Illuminate\Contracts\Auth\UserProvider|null 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function createUserProvider($provider = null)
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createUserProvider($provider);
+        }
+        
+        /**
+         * Get the default user provider name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultUserProvider()
+        {
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->getDefaultUserProvider();
+        }
+        
+        /**
+         * Get the currently authenticated user.
+         *
+         * @return \App\User|null 
+         * @static 
+         */ 
+        public static function user()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->user();
+        }
+        
+        /**
+         * Get the ID for the currently authenticated user.
+         *
+         * @return int|null 
+         * @static 
+         */ 
+        public static function id()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->id();
+        }
+        
+        /**
+         * Log a user into the application without sessions or cookies.
+         *
+         * @param array $credentials
+         * @return bool 
+         * @static 
+         */ 
+        public static function once($credentials = [])
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->once($credentials);
+        }
+        
+        /**
+         * Log the given user ID into the application without sessions or cookies.
+         *
+         * @param mixed $id
+         * @return \App\User|false 
+         * @static 
+         */ 
+        public static function onceUsingId($id)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->onceUsingId($id);
+        }
+        
+        /**
+         * Validate a user's credentials.
+         *
+         * @param array $credentials
+         * @return bool 
+         * @static 
+         */ 
+        public static function validate($credentials = [])
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->validate($credentials);
+        }
+        
+        /**
+         * Attempt to authenticate using HTTP Basic Auth.
+         *
+         * @param string $field
+         * @param array $extraConditions
+         * @return \Symfony\Component\HttpFoundation\Response|null 
+         * @static 
+         */ 
+        public static function basic($field = 'email', $extraConditions = [])
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->basic($field, $extraConditions);
+        }
+        
+        /**
+         * Perform a stateless HTTP Basic login attempt.
+         *
+         * @param string $field
+         * @param array $extraConditions
+         * @return \Symfony\Component\HttpFoundation\Response|null 
+         * @static 
+         */ 
+        public static function onceBasic($field = 'email', $extraConditions = [])
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->onceBasic($field, $extraConditions);
+        }
+        
+        /**
+         * Attempt to authenticate a user using the given credentials.
+         *
+         * @param array $credentials
+         * @param bool $remember
+         * @return bool 
+         * @static 
+         */ 
+        public static function attempt($credentials = [], $remember = false)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->attempt($credentials, $remember);
+        }
+        
+        /**
+         * Log the given user ID into the application.
+         *
+         * @param mixed $id
+         * @param bool $remember
+         * @return \App\User|false 
+         * @static 
+         */ 
+        public static function loginUsingId($id, $remember = false)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->loginUsingId($id, $remember);
+        }
+        
+        /**
+         * Log a user into the application.
+         *
+         * @param \Illuminate\Contracts\Auth\Authenticatable $user
+         * @param bool $remember
+         * @return void 
+         * @static 
+         */ 
+        public static function login($user, $remember = false)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->login($user, $remember);
+        }
+        
+        /**
+         * Log the user out of the application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function logout()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->logout();
+        }
+        
+        /**
+         * Log the user out of the application on their current device only.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function logoutCurrentDevice()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->logoutCurrentDevice();
+        }
+        
+        /**
+         * Invalidate other sessions for the current user.
+         * 
+         * The application must be using the AuthenticateSession middleware.
+         *
+         * @param string $password
+         * @param string $attribute
+         * @return bool|null 
+         * @static 
+         */ 
+        public static function logoutOtherDevices($password, $attribute = 'password')
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->logoutOtherDevices($password, $attribute);
+        }
+        
+        /**
+         * Register an authentication attempt event listener.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function attempting($callback)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->attempting($callback);
+        }
+        
+        /**
+         * Get the last user we attempted to authenticate.
+         *
+         * @return \App\User 
+         * @static 
+         */ 
+        public static function getLastAttempted()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getLastAttempted();
+        }
+        
+        /**
+         * Get a unique identifier for the auth session value.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getName()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getName();
+        }
+        
+        /**
+         * Get the name of the cookie used to store the "recaller".
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getRecallerName()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getRecallerName();
+        }
+        
+        /**
+         * Determine if the user was authenticated via "remember me" cookie.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function viaRemember()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->viaRemember();
+        }
+        
+        /**
+         * Get the cookie creator instance used by the guard.
+         *
+         * @return \Illuminate\Contracts\Cookie\QueueingFactory 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function getCookieJar()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getCookieJar();
+        }
+        
+        /**
+         * Set the cookie creator instance used by the guard.
+         *
+         * @param \Illuminate\Contracts\Cookie\QueueingFactory $cookie
+         * @return void 
+         * @static 
+         */ 
+        public static function setCookieJar($cookie)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->setCookieJar($cookie);
+        }
+        
+        /**
+         * Get the event dispatcher instance.
+         *
+         * @return \Illuminate\Contracts\Events\Dispatcher 
+         * @static 
+         */ 
+        public static function getDispatcher()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getDispatcher();
+        }
+        
+        /**
+         * Set the event dispatcher instance.
+         *
+         * @param \Illuminate\Contracts\Events\Dispatcher $events
+         * @return void 
+         * @static 
+         */ 
+        public static function setDispatcher($events)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->setDispatcher($events);
+        }
+        
+        /**
+         * Get the session store used by the guard.
+         *
+         * @return \Illuminate\Contracts\Session\Session 
+         * @static 
+         */ 
+        public static function getSession()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getSession();
+        }
+        
+        /**
+         * Return the currently cached user.
+         *
+         * @return \App\User|null 
+         * @static 
+         */ 
+        public static function getUser()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getUser();
+        }
+        
+        /**
+         * Set the current user.
+         *
+         * @param \Illuminate\Contracts\Auth\Authenticatable $user
+         * @return \Illuminate\Auth\SessionGuard 
+         * @static 
+         */ 
+        public static function setUser($user)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->setUser($user);
+        }
+        
+        /**
+         * Get the current request instance.
+         *
+         * @return \Symfony\Component\HttpFoundation\Request 
+         * @static 
+         */ 
+        public static function getRequest()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getRequest();
+        }
+        
+        /**
+         * Set the current request instance.
+         *
+         * @param \Symfony\Component\HttpFoundation\Request $request
+         * @return \Illuminate\Auth\SessionGuard 
+         * @static 
+         */ 
+        public static function setRequest($request)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->setRequest($request);
+        }
+        
+        /**
+         * Determine if current user is authenticated. If not, throw an exception.
+         *
+         * @return \App\User 
+         * @throws \Illuminate\Auth\AuthenticationException
+         * @static 
+         */ 
+        public static function authenticate()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->authenticate();
+        }
+        
+        /**
+         * Determine if the guard has a user instance.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasUser()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->hasUser();
+        }
+        
+        /**
+         * Determine if the current user is authenticated.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function check()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->check();
+        }
+        
+        /**
+         * Determine if the current user is a guest.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function guest()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->guest();
+        }
+        
+        /**
+         * Get the user provider used by the guard.
+         *
+         * @return \Illuminate\Contracts\Auth\UserProvider 
+         * @static 
+         */ 
+        public static function getProvider()
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        return $instance->getProvider();
+        }
+        
+        /**
+         * Set the user provider used by the guard.
+         *
+         * @param \Illuminate\Contracts\Auth\UserProvider $provider
+         * @return void 
+         * @static 
+         */ 
+        public static function setProvider($provider)
+        {
+                        /** @var \Illuminate\Auth\SessionGuard $instance */
+                        $instance->setProvider($provider);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Auth\SessionGuard::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Auth\SessionGuard::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Auth\SessionGuard::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\View\Compilers\BladeCompiler
+     */ 
+    class Blade {
+        
+        /**
+         * Compile the view at the given path.
+         *
+         * @param string|null $path
+         * @return void 
+         * @static 
+         */ 
+        public static function compile($path = null)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->compile($path);
+        }
+        
+        /**
+         * Get the path currently being compiled.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getPath()
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getPath();
+        }
+        
+        /**
+         * Set the path currently being compiled.
+         *
+         * @param string $path
+         * @return void 
+         * @static 
+         */ 
+        public static function setPath($path)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->setPath($path);
+        }
+        
+        /**
+         * Compile the given Blade template contents.
+         *
+         * @param string $value
+         * @return string 
+         * @static 
+         */ 
+        public static function compileString($value)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->compileString($value);
+        }
+        
+        /**
+         * Strip the parentheses from the given expression.
+         *
+         * @param string $expression
+         * @return string 
+         * @static 
+         */ 
+        public static function stripParentheses($expression)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->stripParentheses($expression);
+        }
+        
+        /**
+         * Register a custom Blade compiler.
+         *
+         * @param callable $compiler
+         * @return void 
+         * @static 
+         */ 
+        public static function extend($compiler)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->extend($compiler);
+        }
+        
+        /**
+         * Get the extensions used by the compiler.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getExtensions()
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getExtensions();
+        }
+        
+        /**
+         * Register an "if" statement directive.
+         *
+         * @param string $name
+         * @param callable $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function if($name, $callback)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->if($name, $callback);
+        }
+        
+        /**
+         * Check the result of a condition.
+         *
+         * @param string $name
+         * @param array $parameters
+         * @return bool 
+         * @static 
+         */ 
+        public static function check($name, ...$parameters)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->check($name, ...$parameters);
+        }
+        
+        /**
+         * Register a component alias directive.
+         *
+         * @param string $path
+         * @param string|null $alias
+         * @return void 
+         * @static 
+         */ 
+        public static function component($path, $alias = null)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->component($path, $alias);
+        }
+        
+        /**
+         * Register an include alias directive.
+         *
+         * @param string $path
+         * @param string|null $alias
+         * @return void 
+         * @static 
+         */ 
+        public static function include($path, $alias = null)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->include($path, $alias);
+        }
+        
+        /**
+         * Register a handler for custom directives.
+         *
+         * @param string $name
+         * @param callable $handler
+         * @return void 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function directive($name, $handler)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->directive($name, $handler);
+        }
+        
+        /**
+         * Get the list of custom directives.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getCustomDirectives()
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getCustomDirectives();
+        }
+        
+        /**
+         * Set the echo format to be used by the compiler.
+         *
+         * @param string $format
+         * @return void 
+         * @static 
+         */ 
+        public static function setEchoFormat($format)
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->setEchoFormat($format);
+        }
+        
+        /**
+         * Set the "echo" format to double encode entities.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function withDoubleEncoding()
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->withDoubleEncoding();
+        }
+        
+        /**
+         * Set the "echo" format to not double encode entities.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function withoutDoubleEncoding()
+        {
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->withoutDoubleEncoding();
+        }
+        
+        /**
+         * Get the path to the compiled version of a view.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function getCompiledPath($path)
+        {
+            //Method inherited from \Illuminate\View\Compilers\Compiler            
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getCompiledPath($path);
+        }
+        
+        /**
+         * Determine if the view at the given path is expired.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function isExpired($path)
+        {
+            //Method inherited from \Illuminate\View\Compilers\Compiler            
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->isExpired($path);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @method static \Illuminate\Broadcasting\Broadcasters\Broadcaster channel(string $channel, callable|string  $callback, array $options = [])
+     * @method static mixed auth(\Illuminate\Http\Request $request)
+     * @see \Illuminate\Contracts\Broadcasting\Factory
+     */ 
+    class Broadcast {
+        
+        /**
+         * Register the routes for handling broadcast authentication and sockets.
+         *
+         * @param array|null $attributes
+         * @return void 
+         * @static 
+         */ 
+        public static function routes($attributes = null)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->routes($attributes);
+        }
+        
+        /**
+         * Get the socket ID for the given request.
+         *
+         * @param \Illuminate\Http\Request|null $request
+         * @return string|null 
+         * @static 
+         */ 
+        public static function socket($request = null)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->socket($request);
+        }
+        
+        /**
+         * Begin broadcasting an event.
+         *
+         * @param mixed|null $event
+         * @return \Illuminate\Broadcasting\PendingBroadcast|void 
+         * @static 
+         */ 
+        public static function event($event = null)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->event($event);
+        }
+        
+        /**
+         * Queue the given event for broadcast.
+         *
+         * @param mixed $event
+         * @return void 
+         * @static 
+         */ 
+        public static function queue($event)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->queue($event);
+        }
+        
+        /**
+         * Get a driver instance.
+         *
+         * @param string|null $driver
+         * @return mixed 
+         * @static 
+         */ 
+        public static function connection($driver = null)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->connection($driver);
+        }
+        
+        /**
+         * Get a driver instance.
+         *
+         * @param string|null $name
+         * @return mixed 
+         * @static 
+         */ 
+        public static function driver($name = null)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->driver($name);
+        }
+        
+        /**
+         * Get the default driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default driver name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Broadcasting\BroadcastManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Contracts\Bus\Dispatcher
+     */ 
+    class Bus {
+        
+        /**
+         * Dispatch a command to its appropriate handler.
+         *
+         * @param mixed $command
+         * @return mixed 
+         * @static 
+         */ 
+        public static function dispatch($command)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatch($command);
+        }
+        
+        /**
+         * Dispatch a command to its appropriate handler in the current process.
+         *
+         * @param mixed $command
+         * @param mixed $handler
+         * @return mixed 
+         * @static 
+         */ 
+        public static function dispatchNow($command, $handler = null)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatchNow($command, $handler);
+        }
+        
+        /**
+         * Determine if the given command has a handler.
+         *
+         * @param mixed $command
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasCommandHandler($command)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->hasCommandHandler($command);
+        }
+        
+        /**
+         * Retrieve the handler for a command.
+         *
+         * @param mixed $command
+         * @return bool|mixed 
+         * @static 
+         */ 
+        public static function getCommandHandler($command)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->getCommandHandler($command);
+        }
+        
+        /**
+         * Dispatch a command to its appropriate handler behind a queue.
+         *
+         * @param mixed $command
+         * @return mixed 
+         * @static 
+         */ 
+        public static function dispatchToQueue($command)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatchToQueue($command);
+        }
+        
+        /**
+         * Dispatch a command to its appropriate handler after the current process.
+         *
+         * @param mixed $command
+         * @param mixed $handler
+         * @return void 
+         * @static 
+         */ 
+        public static function dispatchAfterResponse($command, $handler = null)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        $instance->dispatchAfterResponse($command, $handler);
+        }
+        
+        /**
+         * Set the pipes through which commands should be piped before dispatching.
+         *
+         * @param array $pipes
+         * @return \Illuminate\Bus\Dispatcher 
+         * @static 
+         */ 
+        public static function pipeThrough($pipes)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->pipeThrough($pipes);
+        }
+        
+        /**
+         * Map a command to a handler.
+         *
+         * @param array $map
+         * @return \Illuminate\Bus\Dispatcher 
+         * @static 
+         */ 
+        public static function map($map)
+        {
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->map($map);
+        }
+        
+        /**
+         * Assert if a job was dispatched based on a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatched($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertDispatched($command, $callback);
+        }
+        
+        /**
+         * Assert if a job was pushed a number of times.
+         *
+         * @param string $command
+         * @param int $times
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatchedTimes($command, $times = 1)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertDispatchedTimes($command, $times);
+        }
+        
+        /**
+         * Determine if a job was dispatched based on a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotDispatched($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertNotDispatched($command, $callback);
+        }
+        
+        /**
+         * Assert if a job was dispatched after the response was sent based on a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatchedAfterResponse($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertDispatchedAfterResponse($command, $callback);
+        }
+        
+        /**
+         * Assert if a job was pushed after the response was sent a number of times.
+         *
+         * @param string $command
+         * @param int $times
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatchedAfterResponseTimes($command, $times = 1)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertDispatchedAfterResponseTimes($command, $times);
+        }
+        
+        /**
+         * Determine if a job was dispatched based on a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotDispatchedAfterResponse($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertNotDispatchedAfterResponse($command, $callback);
+        }
+        
+        /**
+         * Get all of the jobs matching a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function dispatched($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->dispatched($command, $callback);
+        }
+        
+        /**
+         * Get all of the jobs dispatched after the response was sent matching a truth-test callback.
+         *
+         * @param string $command
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function dispatchedAfterResponse($command, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->dispatchedAfterResponse($command, $callback);
+        }
+        
+        /**
+         * Determine if there are any stored commands for a given class.
+         *
+         * @param string $command
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasDispatched($command)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->hasDispatched($command);
+        }
+        
+        /**
+         * Determine if there are any stored commands for a given class.
+         *
+         * @param string $command
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasDispatchedAfterResponse($command)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->hasDispatchedAfterResponse($command);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Cache\CacheManager
+     * @see \Illuminate\Cache\Repository
+     */ 
+    class Cache {
+        
+        /**
+         * Get a cache store instance by name, wrapped in a repository.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Contracts\Cache\Repository 
+         * @static 
+         */ 
+        public static function store($name = null)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->store($name);
+        }
+        
+        /**
+         * Get a cache driver instance.
+         *
+         * @param string|null $driver
+         * @return \Illuminate\Contracts\Cache\Repository 
+         * @static 
+         */ 
+        public static function driver($driver = null)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->driver($driver);
+        }
+        
+        /**
+         * Create a new cache repository with the given implementation.
+         *
+         * @param \Illuminate\Contracts\Cache\Store $store
+         * @return \Illuminate\Cache\Repository 
+         * @static 
+         */ 
+        public static function repository($store)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->repository($store);
+        }
+        
+        /**
+         * Re-set the event dispatcher on all resolved cache repositories.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function refreshEventDispatcher()
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        $instance->refreshEventDispatcher();
+        }
+        
+        /**
+         * Get the default cache driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default cache driver name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Unset the given driver instances.
+         *
+         * @param array|string|null $name
+         * @return \Illuminate\Cache\CacheManager 
+         * @static 
+         */ 
+        public static function forgetDriver($name = null)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->forgetDriver($name);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Cache\CacheManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Determine if an item exists in the cache.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->has($key);
+        }
+        
+        /**
+         * Determine if an item doesn't exist in the cache.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function missing($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->missing($key);
+        }
+        
+        /**
+         * Retrieve an item from the cache by key.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function get($key, $default = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->get($key, $default);
+        }
+        
+        /**
+         * Retrieve multiple items from the cache by key.
+         * 
+         * Items not found in the cache will have a null value.
+         *
+         * @param array $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function many($keys)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->many($keys);
+        }
+        
+        /**
+         * Obtains multiple cache items by their unique keys.
+         *
+         * @param \Psr\SimpleCache\iterable $keys A list of keys that can obtained in a single operation.
+         * @param mixed $default Default value to return for keys that do not exist.
+         * @return \Psr\SimpleCache\iterable A list of key => value pairs. Cache keys that do not exist or are stale will have $default as value.
+         * @throws \Psr\SimpleCache\InvalidArgumentException
+         *   MUST be thrown if $keys is neither an array nor a Traversable,
+         *   or if any of the $keys are not a legal value.
+         * @static 
+         */ 
+        public static function getMultiple($keys, $default = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getMultiple($keys, $default);
+        }
+        
+        /**
+         * Retrieve an item from the cache and delete it.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function pull($key, $default = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->pull($key, $default);
+        }
+        
+        /**
+         * Store an item in the cache.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @return bool 
+         * @static 
+         */ 
+        public static function put($key, $value, $ttl = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->put($key, $value, $ttl);
+        }
+        
+        /**
+         * Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time.
+         *
+         * @param string $key The key of the item to store.
+         * @param mixed $value The value of the item to store, must be serializable.
+         * @param null|int|\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and
+         *                                      the driver supports TTL then the library may set a default value
+         *                                      for it or let the driver take care of that.
+         * @return bool True on success and false on failure.
+         * @throws \Psr\SimpleCache\InvalidArgumentException
+         *   MUST be thrown if the $key string is not a legal value.
+         * @static 
+         */ 
+        public static function set($key, $value, $ttl = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->set($key, $value, $ttl);
+        }
+        
+        /**
+         * Store multiple items in the cache for a given number of seconds.
+         *
+         * @param array $values
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @return bool 
+         * @static 
+         */ 
+        public static function putMany($values, $ttl = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->putMany($values, $ttl);
+        }
+        
+        /**
+         * Persists a set of key => value pairs in the cache, with an optional TTL.
+         *
+         * @param \Psr\SimpleCache\iterable $values A list of key => value pairs for a multiple-set operation.
+         * @param null|int|\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and
+         *                                       the driver supports TTL then the library may set a default value
+         *                                       for it or let the driver take care of that.
+         * @return bool True on success and false on failure.
+         * @throws \Psr\SimpleCache\InvalidArgumentException
+         *   MUST be thrown if $values is neither an array nor a Traversable,
+         *   or if any of the $values are not a legal value.
+         * @static 
+         */ 
+        public static function setMultiple($values, $ttl = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->setMultiple($values, $ttl);
+        }
+        
+        /**
+         * Store an item in the cache if the key does not exist.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @return bool 
+         * @static 
+         */ 
+        public static function add($key, $value, $ttl = null)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->add($key, $value, $ttl);
+        }
+        
+        /**
+         * Increment the value of an item in the cache.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return int|bool 
+         * @static 
+         */ 
+        public static function increment($key, $value = 1)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->increment($key, $value);
+        }
+        
+        /**
+         * Decrement the value of an item in the cache.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return int|bool 
+         * @static 
+         */ 
+        public static function decrement($key, $value = 1)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->decrement($key, $value);
+        }
+        
+        /**
+         * Store an item in the cache indefinitely.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return bool 
+         * @static 
+         */ 
+        public static function forever($key, $value)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->forever($key, $value);
+        }
+        
+        /**
+         * Get an item from the cache, or execute the given Closure and store the result.
+         *
+         * @param string $key
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @param \Closure $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function remember($key, $ttl, $callback)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->remember($key, $ttl, $callback);
+        }
+        
+        /**
+         * Get an item from the cache, or execute the given Closure and store the result forever.
+         *
+         * @param string $key
+         * @param \Closure $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function sear($key, $callback)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->sear($key, $callback);
+        }
+        
+        /**
+         * Get an item from the cache, or execute the given Closure and store the result forever.
+         *
+         * @param string $key
+         * @param \Closure $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function rememberForever($key, $callback)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->rememberForever($key, $callback);
+        }
+        
+        /**
+         * Remove an item from the cache.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function forget($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->forget($key);
+        }
+        
+        /**
+         * Delete an item from the cache by its unique key.
+         *
+         * @param string $key The unique cache key of the item to delete.
+         * @return bool True if the item was successfully removed. False if there was an error.
+         * @throws \Psr\SimpleCache\InvalidArgumentException
+         *   MUST be thrown if the $key string is not a legal value.
+         * @static 
+         */ 
+        public static function delete($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->delete($key);
+        }
+        
+        /**
+         * Deletes multiple cache items in a single operation.
+         *
+         * @param \Psr\SimpleCache\iterable $keys A list of string-based keys to be deleted.
+         * @return bool True if the items were successfully removed. False if there was an error.
+         * @throws \Psr\SimpleCache\InvalidArgumentException
+         *   MUST be thrown if $keys is neither an array nor a Traversable,
+         *   or if any of the $keys are not a legal value.
+         * @static 
+         */ 
+        public static function deleteMultiple($keys)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->deleteMultiple($keys);
+        }
+        
+        /**
+         * Wipes clean the entire cache's keys.
+         *
+         * @return bool True on success and false on failure.
+         * @static 
+         */ 
+        public static function clear()
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->clear();
+        }
+        
+        /**
+         * Begin executing a new tags operation if the store supports it.
+         *
+         * @param array|mixed $names
+         * @return \Illuminate\Cache\TaggedCache 
+         * @throws \BadMethodCallException
+         * @static 
+         */ 
+        public static function tags($names)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->tags($names);
+        }
+        
+        /**
+         * Get the default cache time.
+         *
+         * @return int|null 
+         * @static 
+         */ 
+        public static function getDefaultCacheTime()
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getDefaultCacheTime();
+        }
+        
+        /**
+         * Set the default cache time in seconds.
+         *
+         * @param int|null $seconds
+         * @return \Illuminate\Cache\Repository 
+         * @static 
+         */ 
+        public static function setDefaultCacheTime($seconds)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->setDefaultCacheTime($seconds);
+        }
+        
+        /**
+         * Get the cache store implementation.
+         *
+         * @return \Illuminate\Contracts\Cache\Store 
+         * @static 
+         */ 
+        public static function getStore()
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getStore();
+        }
+        
+        /**
+         * Get the event dispatcher instance.
+         *
+         * @return \Illuminate\Contracts\Events\Dispatcher 
+         * @static 
+         */ 
+        public static function getEventDispatcher()
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getEventDispatcher();
+        }
+        
+        /**
+         * Set the event dispatcher instance.
+         *
+         * @param \Illuminate\Contracts\Events\Dispatcher $events
+         * @return void 
+         * @static 
+         */ 
+        public static function setEventDispatcher($events)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->setEventDispatcher($events);
+        }
+        
+        /**
+         * Determine if a cached value exists.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function offsetExists($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->offsetExists($key);
+        }
+        
+        /**
+         * Retrieve an item from the cache by key.
+         *
+         * @param string $key
+         * @return mixed 
+         * @static 
+         */ 
+        public static function offsetGet($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->offsetGet($key);
+        }
+        
+        /**
+         * Store an item in the cache for the default time.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetSet($key, $value)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->offsetSet($key, $value);
+        }
+        
+        /**
+         * Remove an item from the cache.
+         *
+         * @param string $key
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetUnset($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->offsetUnset($key);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Cache\Repository::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Cache\Repository::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Cache\Repository::hasMacro($name);
+        }
+        
+        /**
+         * Dynamically handle calls to the class.
+         *
+         * @param string $method
+         * @param array $parameters
+         * @return mixed 
+         * @throws \BadMethodCallException
+         * @static 
+         */ 
+        public static function macroCall($method, $parameters)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->macroCall($method, $parameters);
+        }
+        
+        /**
+         * Remove all items from the cache.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function flush()
+        {
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->flush();
+        }
+        
+        /**
+         * Get the Filesystem instance.
+         *
+         * @return \Illuminate\Filesystem\Filesystem 
+         * @static 
+         */ 
+        public static function getFilesystem()
+        {
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getFilesystem();
+        }
+        
+        /**
+         * Get the working directory of the cache.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDirectory()
+        {
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getDirectory();
+        }
+        
+        /**
+         * Get the cache key prefix.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getPrefix()
+        {
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getPrefix();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Config\Repository
+     */ 
+    class Config {
+        
+        /**
+         * Determine if the given configuration value exists.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($key)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->has($key);
+        }
+        
+        /**
+         * Get the specified configuration value.
+         *
+         * @param array|string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function get($key, $default = null)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->get($key, $default);
+        }
+        
+        /**
+         * Get many configuration values.
+         *
+         * @param array $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function getMany($keys)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->getMany($keys);
+        }
+        
+        /**
+         * Set a given configuration value.
+         *
+         * @param array|string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function set($key, $value = null)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->set($key, $value);
+        }
+        
+        /**
+         * Prepend a value onto an array configuration value.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function prepend($key, $value)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->prepend($key, $value);
+        }
+        
+        /**
+         * Push a value onto an array configuration value.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function push($key, $value)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->push($key, $value);
+        }
+        
+        /**
+         * Get all of the configuration items for the application.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function all()
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->all();
+        }
+        
+        /**
+         * Determine if the given configuration option exists.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function offsetExists($key)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->offsetExists($key);
+        }
+        
+        /**
+         * Get a configuration option.
+         *
+         * @param string $key
+         * @return mixed 
+         * @static 
+         */ 
+        public static function offsetGet($key)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->offsetGet($key);
+        }
+        
+        /**
+         * Set a configuration option.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetSet($key, $value)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->offsetSet($key, $value);
+        }
+        
+        /**
+         * Unset a configuration option.
+         *
+         * @param string $key
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetUnset($key)
+        {
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->offsetUnset($key);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Cookie\CookieJar
+     */ 
+    class Cookie {
+        
+        /**
+         * Create a new cookie instance.
+         *
+         * @param string $name
+         * @param string $value
+         * @param int $minutes
+         * @param string|null $path
+         * @param string|null $domain
+         * @param bool|null $secure
+         * @param bool $httpOnly
+         * @param bool $raw
+         * @param string|null $sameSite
+         * @return \Symfony\Component\HttpFoundation\Cookie 
+         * @static 
+         */ 
+        public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
+        }
+        
+        /**
+         * Create a cookie that lasts "forever" (five years).
+         *
+         * @param string $name
+         * @param string $value
+         * @param string|null $path
+         * @param string|null $domain
+         * @param bool|null $secure
+         * @param bool $httpOnly
+         * @param bool $raw
+         * @param string|null $sameSite
+         * @return \Symfony\Component\HttpFoundation\Cookie 
+         * @static 
+         */ 
+        public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
+        }
+        
+        /**
+         * Expire the given cookie.
+         *
+         * @param string $name
+         * @param string|null $path
+         * @param string|null $domain
+         * @return \Symfony\Component\HttpFoundation\Cookie 
+         * @static 
+         */ 
+        public static function forget($name, $path = null, $domain = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->forget($name, $path, $domain);
+        }
+        
+        /**
+         * Determine if a cookie has been queued.
+         *
+         * @param string $key
+         * @param string|null $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasQueued($key, $path = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->hasQueued($key, $path);
+        }
+        
+        /**
+         * Get a queued cookie instance.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @param string|null $path
+         * @return \Symfony\Component\HttpFoundation\Cookie 
+         * @static 
+         */ 
+        public static function queued($key, $default = null, $path = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->queued($key, $default, $path);
+        }
+        
+        /**
+         * Queue a cookie to send with the next response.
+         *
+         * @param array $parameters
+         * @return void 
+         * @static 
+         */ 
+        public static function queue(...$parameters)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        $instance->queue(...$parameters);
+        }
+        
+        /**
+         * Remove a cookie from the queue.
+         *
+         * @param string $name
+         * @param string|null $path
+         * @return void 
+         * @static 
+         */ 
+        public static function unqueue($name, $path = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        $instance->unqueue($name, $path);
+        }
+        
+        /**
+         * Set the default path and domain for the jar.
+         *
+         * @param string $path
+         * @param string $domain
+         * @param bool $secure
+         * @param string|null $sameSite
+         * @return \Illuminate\Cookie\CookieJar 
+         * @static 
+         */ 
+        public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->setDefaultPathAndDomain($path, $domain, $secure, $sameSite);
+        }
+        
+        /**
+         * Get the cookies which have been queued for the next request.
+         *
+         * @return \Symfony\Component\HttpFoundation\Cookie[] 
+         * @static 
+         */ 
+        public static function getQueuedCookies()
+        {
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->getQueuedCookies();
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Cookie\CookieJar::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Cookie\CookieJar::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Cookie\CookieJar::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Encryption\Encrypter
+     */ 
+    class Crypt {
+        
+        /**
+         * Determine if the given key and cipher combination is valid.
+         *
+         * @param string $key
+         * @param string $cipher
+         * @return bool 
+         * @static 
+         */ 
+        public static function supported($key, $cipher)
+        {
+                        return \Illuminate\Encryption\Encrypter::supported($key, $cipher);
+        }
+        
+        /**
+         * Create a new encryption key for the given cipher.
+         *
+         * @param string $cipher
+         * @return string 
+         * @static 
+         */ 
+        public static function generateKey($cipher)
+        {
+                        return \Illuminate\Encryption\Encrypter::generateKey($cipher);
+        }
+        
+        /**
+         * Encrypt the given value.
+         *
+         * @param mixed $value
+         * @param bool $serialize
+         * @return string 
+         * @throws \Illuminate\Contracts\Encryption\EncryptException
+         * @static 
+         */ 
+        public static function encrypt($value, $serialize = true)
+        {
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->encrypt($value, $serialize);
+        }
+        
+        /**
+         * Encrypt a string without serialization.
+         *
+         * @param string $value
+         * @return string 
+         * @throws \Illuminate\Contracts\Encryption\EncryptException
+         * @static 
+         */ 
+        public static function encryptString($value)
+        {
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->encryptString($value);
+        }
+        
+        /**
+         * Decrypt the given value.
+         *
+         * @param string $payload
+         * @param bool $unserialize
+         * @return mixed 
+         * @throws \Illuminate\Contracts\Encryption\DecryptException
+         * @static 
+         */ 
+        public static function decrypt($payload, $unserialize = true)
+        {
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->decrypt($payload, $unserialize);
+        }
+        
+        /**
+         * Decrypt the given string without unserialization.
+         *
+         * @param string $payload
+         * @return string 
+         * @throws \Illuminate\Contracts\Encryption\DecryptException
+         * @static 
+         */ 
+        public static function decryptString($payload)
+        {
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->decryptString($payload);
+        }
+        
+        /**
+         * Get the encryption key.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getKey()
+        {
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->getKey();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Database\DatabaseManager
+     * @see \Illuminate\Database\Connection
+     */ 
+    class DB {
+        
+        /**
+         * Get a database connection instance.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Database\Connection 
+         * @static 
+         */ 
+        public static function connection($name = null)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->connection($name);
+        }
+        
+        /**
+         * Disconnect from the given database and remove from local cache.
+         *
+         * @param string|null $name
+         * @return void 
+         * @static 
+         */ 
+        public static function purge($name = null)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->purge($name);
+        }
+        
+        /**
+         * Disconnect from the given database.
+         *
+         * @param string|null $name
+         * @return void 
+         * @static 
+         */ 
+        public static function disconnect($name = null)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->disconnect($name);
+        }
+        
+        /**
+         * Reconnect to the given database.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Database\Connection 
+         * @static 
+         */ 
+        public static function reconnect($name = null)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->reconnect($name);
+        }
+        
+        /**
+         * Get the default connection name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultConnection()
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->getDefaultConnection();
+        }
+        
+        /**
+         * Set the default connection name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultConnection($name)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->setDefaultConnection($name);
+        }
+        
+        /**
+         * Get all of the support drivers.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function supportedDrivers()
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->supportedDrivers();
+        }
+        
+        /**
+         * Get all of the drivers that are actually available.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function availableDrivers()
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->availableDrivers();
+        }
+        
+        /**
+         * Register an extension connection resolver.
+         *
+         * @param string $name
+         * @param callable $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function extend($name, $resolver)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->extend($name, $resolver);
+        }
+        
+        /**
+         * Return all of the created connections.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getConnections()
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->getConnections();
+        }
+        
+        /**
+         * Set the database reconnector callback.
+         *
+         * @param callable $reconnector
+         * @return void 
+         * @static 
+         */ 
+        public static function setReconnector($reconnector)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->setReconnector($reconnector);
+        }
+        
+        /**
+         * Get a schema builder instance for the connection.
+         *
+         * @return \Illuminate\Database\Schema\MySqlBuilder 
+         * @static 
+         */ 
+        public static function getSchemaBuilder()
+        {
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getSchemaBuilder();
+        }
+        
+        /**
+         * Set the query grammar to the default implementation.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function useDefaultQueryGrammar()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultQueryGrammar();
+        }
+        
+        /**
+         * Set the schema grammar to the default implementation.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function useDefaultSchemaGrammar()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultSchemaGrammar();
+        }
+        
+        /**
+         * Set the query post processor to the default implementation.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function useDefaultPostProcessor()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultPostProcessor();
+        }
+        
+        /**
+         * Begin a fluent query against a database table.
+         *
+         * @param \Closure|\Illuminate\Database\Query\Builder|string $table
+         * @param string|null $as
+         * @return \Illuminate\Database\Query\Builder 
+         * @static 
+         */ 
+        public static function table($table, $as = null)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->table($table, $as);
+        }
+        
+        /**
+         * Get a new query builder instance.
+         *
+         * @return \Illuminate\Database\Query\Builder 
+         * @static 
+         */ 
+        public static function query()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->query();
+        }
+        
+        /**
+         * Run a select statement and return a single result.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @param bool $useReadPdo
+         * @return mixed 
+         * @static 
+         */ 
+        public static function selectOne($query, $bindings = [], $useReadPdo = true)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->selectOne($query, $bindings, $useReadPdo);
+        }
+        
+        /**
+         * Run a select statement against the database.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return array 
+         * @static 
+         */ 
+        public static function selectFromWriteConnection($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->selectFromWriteConnection($query, $bindings);
+        }
+        
+        /**
+         * Run a select statement against the database.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @param bool $useReadPdo
+         * @return array 
+         * @static 
+         */ 
+        public static function select($query, $bindings = [], $useReadPdo = true)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->select($query, $bindings, $useReadPdo);
+        }
+        
+        /**
+         * Run a select statement against the database and returns a generator.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @param bool $useReadPdo
+         * @return \Generator 
+         * @static 
+         */ 
+        public static function cursor($query, $bindings = [], $useReadPdo = true)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->cursor($query, $bindings, $useReadPdo);
+        }
+        
+        /**
+         * Run an insert statement against the database.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return bool 
+         * @static 
+         */ 
+        public static function insert($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->insert($query, $bindings);
+        }
+        
+        /**
+         * Run an update statement against the database.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return int 
+         * @static 
+         */ 
+        public static function update($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->update($query, $bindings);
+        }
+        
+        /**
+         * Run a delete statement against the database.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return int 
+         * @static 
+         */ 
+        public static function delete($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->delete($query, $bindings);
+        }
+        
+        /**
+         * Execute an SQL statement and return the boolean result.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return bool 
+         * @static 
+         */ 
+        public static function statement($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->statement($query, $bindings);
+        }
+        
+        /**
+         * Run an SQL statement and get the number of rows affected.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @return int 
+         * @static 
+         */ 
+        public static function affectingStatement($query, $bindings = [])
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->affectingStatement($query, $bindings);
+        }
+        
+        /**
+         * Run a raw, unprepared query against the PDO connection.
+         *
+         * @param string $query
+         * @return bool 
+         * @static 
+         */ 
+        public static function unprepared($query)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->unprepared($query);
+        }
+        
+        /**
+         * Execute the given callback in "dry run" mode.
+         *
+         * @param \Closure $callback
+         * @return array 
+         * @static 
+         */ 
+        public static function pretend($callback)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->pretend($callback);
+        }
+        
+        /**
+         * Bind values to their parameters in the given statement.
+         *
+         * @param \PDOStatement $statement
+         * @param array $bindings
+         * @return void 
+         * @static 
+         */ 
+        public static function bindValues($statement, $bindings)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->bindValues($statement, $bindings);
+        }
+        
+        /**
+         * Prepare the query bindings for execution.
+         *
+         * @param array $bindings
+         * @return array 
+         * @static 
+         */ 
+        public static function prepareBindings($bindings)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->prepareBindings($bindings);
+        }
+        
+        /**
+         * Log a query in the connection's query log.
+         *
+         * @param string $query
+         * @param array $bindings
+         * @param float|null $time
+         * @return void 
+         * @static 
+         */ 
+        public static function logQuery($query, $bindings, $time = null)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->logQuery($query, $bindings, $time);
+        }
+        
+        /**
+         * Register a database query listener with the connection.
+         *
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function listen($callback)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->listen($callback);
+        }
+        
+        /**
+         * Get a new raw query expression.
+         *
+         * @param mixed $value
+         * @return \Illuminate\Database\Query\Expression 
+         * @static 
+         */ 
+        public static function raw($value)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->raw($value);
+        }
+        
+        /**
+         * Indicate if any records have been modified.
+         *
+         * @param bool $value
+         * @return void 
+         * @static 
+         */ 
+        public static function recordsHaveBeenModified($value = true)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->recordsHaveBeenModified($value);
+        }
+        
+        /**
+         * Is Doctrine available?
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isDoctrineAvailable()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->isDoctrineAvailable();
+        }
+        
+        /**
+         * Get a Doctrine Schema Column instance.
+         *
+         * @param string $table
+         * @param string $column
+         * @return \Doctrine\DBAL\Schema\Column 
+         * @static 
+         */ 
+        public static function getDoctrineColumn($table, $column)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineColumn($table, $column);
+        }
+        
+        /**
+         * Get the Doctrine DBAL schema manager for the connection.
+         *
+         * @return \Doctrine\DBAL\Schema\AbstractSchemaManager 
+         * @static 
+         */ 
+        public static function getDoctrineSchemaManager()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineSchemaManager();
+        }
+        
+        /**
+         * Get the Doctrine DBAL database connection instance.
+         *
+         * @return \Doctrine\DBAL\Connection 
+         * @static 
+         */ 
+        public static function getDoctrineConnection()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineConnection();
+        }
+        
+        /**
+         * Get the current PDO connection.
+         *
+         * @return \PDO 
+         * @static 
+         */ 
+        public static function getPdo()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getPdo();
+        }
+        
+        /**
+         * Get the current PDO connection parameter without executing any reconnect logic.
+         *
+         * @return \PDO|\Closure|null 
+         * @static 
+         */ 
+        public static function getRawPdo()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getRawPdo();
+        }
+        
+        /**
+         * Get the current PDO connection used for reading.
+         *
+         * @return \PDO 
+         * @static 
+         */ 
+        public static function getReadPdo()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getReadPdo();
+        }
+        
+        /**
+         * Get the current read PDO connection parameter without executing any reconnect logic.
+         *
+         * @return \PDO|\Closure|null 
+         * @static 
+         */ 
+        public static function getRawReadPdo()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getRawReadPdo();
+        }
+        
+        /**
+         * Set the PDO connection.
+         *
+         * @param \PDO|\Closure|null $pdo
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setPdo($pdo)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setPdo($pdo);
+        }
+        
+        /**
+         * Set the PDO connection used for reading.
+         *
+         * @param \PDO|\Closure|null $pdo
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setReadPdo($pdo)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setReadPdo($pdo);
+        }
+        
+        /**
+         * Get the database connection name.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function getName()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getName();
+        }
+        
+        /**
+         * Get an option from the configuration options.
+         *
+         * @param string|null $option
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getConfig($option = null)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getConfig($option);
+        }
+        
+        /**
+         * Get the PDO driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDriverName()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDriverName();
+        }
+        
+        /**
+         * Get the query grammar used by the connection.
+         *
+         * @return \Illuminate\Database\Query\Grammars\Grammar 
+         * @static 
+         */ 
+        public static function getQueryGrammar()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getQueryGrammar();
+        }
+        
+        /**
+         * Set the query grammar used by the connection.
+         *
+         * @param \Illuminate\Database\Query\Grammars\Grammar $grammar
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setQueryGrammar($grammar)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setQueryGrammar($grammar);
+        }
+        
+        /**
+         * Get the schema grammar used by the connection.
+         *
+         * @return \Illuminate\Database\Schema\Grammars\Grammar 
+         * @static 
+         */ 
+        public static function getSchemaGrammar()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getSchemaGrammar();
+        }
+        
+        /**
+         * Set the schema grammar used by the connection.
+         *
+         * @param \Illuminate\Database\Schema\Grammars\Grammar $grammar
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setSchemaGrammar($grammar)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setSchemaGrammar($grammar);
+        }
+        
+        /**
+         * Get the query post processor used by the connection.
+         *
+         * @return \Illuminate\Database\Query\Processors\Processor 
+         * @static 
+         */ 
+        public static function getPostProcessor()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getPostProcessor();
+        }
+        
+        /**
+         * Set the query post processor used by the connection.
+         *
+         * @param \Illuminate\Database\Query\Processors\Processor $processor
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setPostProcessor($processor)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setPostProcessor($processor);
+        }
+        
+        /**
+         * Get the event dispatcher used by the connection.
+         *
+         * @return \Illuminate\Contracts\Events\Dispatcher 
+         * @static 
+         */ 
+        public static function getEventDispatcher()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getEventDispatcher();
+        }
+        
+        /**
+         * Set the event dispatcher instance on the connection.
+         *
+         * @param \Illuminate\Contracts\Events\Dispatcher $events
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setEventDispatcher($events)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setEventDispatcher($events);
+        }
+        
+        /**
+         * Unset the event dispatcher for this connection.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function unsetEventDispatcher()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->unsetEventDispatcher();
+        }
+        
+        /**
+         * Determine if the connection is in a "dry run".
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function pretending()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->pretending();
+        }
+        
+        /**
+         * Get the connection query log.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getQueryLog()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getQueryLog();
+        }
+        
+        /**
+         * Clear the query log.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushQueryLog()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->flushQueryLog();
+        }
+        
+        /**
+         * Enable the query log on the connection.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function enableQueryLog()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->enableQueryLog();
+        }
+        
+        /**
+         * Disable the query log on the connection.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function disableQueryLog()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->disableQueryLog();
+        }
+        
+        /**
+         * Determine whether we're logging queries.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function logging()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->logging();
+        }
+        
+        /**
+         * Get the name of the connected database.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDatabaseName()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDatabaseName();
+        }
+        
+        /**
+         * Set the name of the connected database.
+         *
+         * @param string $database
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setDatabaseName($database)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setDatabaseName($database);
+        }
+        
+        /**
+         * Get the table prefix for the connection.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getTablePrefix()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getTablePrefix();
+        }
+        
+        /**
+         * Set the table prefix in use by the connection.
+         *
+         * @param string $prefix
+         * @return \Illuminate\Database\MySqlConnection 
+         * @static 
+         */ 
+        public static function setTablePrefix($prefix)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setTablePrefix($prefix);
+        }
+        
+        /**
+         * Set the table prefix and return the grammar.
+         *
+         * @param \Illuminate\Database\Grammar $grammar
+         * @return \Illuminate\Database\Grammar 
+         * @static 
+         */ 
+        public static function withTablePrefix($grammar)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->withTablePrefix($grammar);
+        }
+        
+        /**
+         * Register a connection resolver.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function resolverFor($driver, $callback)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        \Illuminate\Database\MySqlConnection::resolverFor($driver, $callback);
+        }
+        
+        /**
+         * Get the connection resolver for the given driver.
+         *
+         * @param string $driver
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getResolver($driver)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        return \Illuminate\Database\MySqlConnection::getResolver($driver);
+        }
+        
+        /**
+         * Execute a Closure within a transaction.
+         *
+         * @param \Closure $callback
+         * @param int $attempts
+         * @return mixed 
+         * @throws \Exception|\Throwable
+         * @static 
+         */ 
+        public static function transaction($callback, $attempts = 1)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->transaction($callback, $attempts);
+        }
+        
+        /**
+         * Start a new database transaction.
+         *
+         * @return void 
+         * @throws \Exception
+         * @static 
+         */ 
+        public static function beginTransaction()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->beginTransaction();
+        }
+        
+        /**
+         * Commit the active database transaction.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function commit()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->commit();
+        }
+        
+        /**
+         * Rollback the active database transaction.
+         *
+         * @param int|null $toLevel
+         * @return void 
+         * @throws \Exception
+         * @static 
+         */ 
+        public static function rollBack($toLevel = null)
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->rollBack($toLevel);
+        }
+        
+        /**
+         * Get the number of active transactions.
+         *
+         * @return int 
+         * @static 
+         */ 
+        public static function transactionLevel()
+        {
+            //Method inherited from \Illuminate\Database\Connection            
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->transactionLevel();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Events\Dispatcher
+     */ 
+    class Event {
+        
+        /**
+         * Register an event listener with the dispatcher.
+         *
+         * @param string|array $events
+         * @param \Closure|string $listener
+         * @return void 
+         * @static 
+         */ 
+        public static function listen($events, $listener)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->listen($events, $listener);
+        }
+        
+        /**
+         * Determine if a given event has listeners.
+         *
+         * @param string $eventName
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasListeners($eventName)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->hasListeners($eventName);
+        }
+        
+        /**
+         * Determine if the given event has any wildcard listeners.
+         *
+         * @param string $eventName
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasWildcardListeners($eventName)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->hasWildcardListeners($eventName);
+        }
+        
+        /**
+         * Register an event and payload to be fired later.
+         *
+         * @param string $event
+         * @param array $payload
+         * @return void 
+         * @static 
+         */ 
+        public static function push($event, $payload = [])
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->push($event, $payload);
+        }
+        
+        /**
+         * Flush a set of pushed events.
+         *
+         * @param string $event
+         * @return void 
+         * @static 
+         */ 
+        public static function flush($event)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->flush($event);
+        }
+        
+        /**
+         * Register an event subscriber with the dispatcher.
+         *
+         * @param object|string $subscriber
+         * @return void 
+         * @static 
+         */ 
+        public static function subscribe($subscriber)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->subscribe($subscriber);
+        }
+        
+        /**
+         * Fire an event until the first non-null response is returned.
+         *
+         * @param string|object $event
+         * @param mixed $payload
+         * @return array|null 
+         * @static 
+         */ 
+        public static function until($event, $payload = [])
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->until($event, $payload);
+        }
+        
+        /**
+         * Fire an event and call the listeners.
+         *
+         * @param string|object $event
+         * @param mixed $payload
+         * @param bool $halt
+         * @return array|null 
+         * @static 
+         */ 
+        public static function dispatch($event, $payload = [], $halt = false)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->dispatch($event, $payload, $halt);
+        }
+        
+        /**
+         * Get all of the listeners for a given event name.
+         *
+         * @param string $eventName
+         * @return array 
+         * @static 
+         */ 
+        public static function getListeners($eventName)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->getListeners($eventName);
+        }
+        
+        /**
+         * Register an event listener with the dispatcher.
+         *
+         * @param \Closure|string $listener
+         * @param bool $wildcard
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function makeListener($listener, $wildcard = false)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->makeListener($listener, $wildcard);
+        }
+        
+        /**
+         * Create a class based listener using the IoC container.
+         *
+         * @param string $listener
+         * @param bool $wildcard
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function createClassListener($listener, $wildcard = false)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->createClassListener($listener, $wildcard);
+        }
+        
+        /**
+         * Remove a set of listeners from the dispatcher.
+         *
+         * @param string $event
+         * @return void 
+         * @static 
+         */ 
+        public static function forget($event)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->forget($event);
+        }
+        
+        /**
+         * Forget all of the pushed listeners.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function forgetPushed()
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->forgetPushed();
+        }
+        
+        /**
+         * Set the queue resolver implementation.
+         *
+         * @param callable $resolver
+         * @return \Illuminate\Events\Dispatcher 
+         * @static 
+         */ 
+        public static function setQueueResolver($resolver)
+        {
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->setQueueResolver($resolver);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Events\Dispatcher::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Events\Dispatcher::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Events\Dispatcher::hasMacro($name);
+        }
+        
+        /**
+         * Assert if an event was dispatched based on a truth-test callback.
+         *
+         * @param string $event
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatched($event, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertDispatched($event, $callback);
+        }
+        
+        /**
+         * Assert if a event was dispatched a number of times.
+         *
+         * @param string $event
+         * @param int $times
+         * @return void 
+         * @static 
+         */ 
+        public static function assertDispatchedTimes($event, $times = 1)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertDispatchedTimes($event, $times);
+        }
+        
+        /**
+         * Determine if an event was dispatched based on a truth-test callback.
+         *
+         * @param string $event
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotDispatched($event, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertNotDispatched($event, $callback);
+        }
+        
+        /**
+         * Get all of the events matching a truth-test callback.
+         *
+         * @param string $event
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function dispatched($event, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        return $instance->dispatched($event, $callback);
+        }
+        
+        /**
+         * Determine if the given event has been dispatched.
+         *
+         * @param string $event
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasDispatched($event)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        return $instance->hasDispatched($event);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Filesystem\Filesystem
+     */ 
+    class File {
+        
+        /**
+         * Determine if a file or directory exists.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function exists($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->exists($path);
+        }
+        
+        /**
+         * Determine if a file or directory is missing.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function missing($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->missing($path);
+        }
+        
+        /**
+         * Get the contents of a file.
+         *
+         * @param string $path
+         * @param bool $lock
+         * @return string 
+         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
+         * @static 
+         */ 
+        public static function get($path, $lock = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->get($path, $lock);
+        }
+        
+        /**
+         * Get contents of a file with shared access.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function sharedGet($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->sharedGet($path);
+        }
+        
+        /**
+         * Get the returned value of a file.
+         *
+         * @param string $path
+         * @return mixed 
+         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
+         * @static 
+         */ 
+        public static function getRequire($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->getRequire($path);
+        }
+        
+        /**
+         * Require the given file once.
+         *
+         * @param string $file
+         * @return mixed 
+         * @static 
+         */ 
+        public static function requireOnce($file)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->requireOnce($file);
+        }
+        
+        /**
+         * Get the MD5 hash of the file at the given path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function hash($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->hash($path);
+        }
+        
+        /**
+         * Write the contents of a file.
+         *
+         * @param string $path
+         * @param string $contents
+         * @param bool $lock
+         * @return int|bool 
+         * @static 
+         */ 
+        public static function put($path, $contents, $lock = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->put($path, $contents, $lock);
+        }
+        
+        /**
+         * Write the contents of a file, replacing it atomically if it already exists.
+         *
+         * @param string $path
+         * @param string $content
+         * @return void 
+         * @static 
+         */ 
+        public static function replace($path, $content)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        $instance->replace($path, $content);
+        }
+        
+        /**
+         * Prepend to a file.
+         *
+         * @param string $path
+         * @param string $data
+         * @return int 
+         * @static 
+         */ 
+        public static function prepend($path, $data)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->prepend($path, $data);
+        }
+        
+        /**
+         * Append to a file.
+         *
+         * @param string $path
+         * @param string $data
+         * @return int 
+         * @static 
+         */ 
+        public static function append($path, $data)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->append($path, $data);
+        }
+        
+        /**
+         * Get or set UNIX mode of a file or directory.
+         *
+         * @param string $path
+         * @param int|null $mode
+         * @return mixed 
+         * @static 
+         */ 
+        public static function chmod($path, $mode = null)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->chmod($path, $mode);
+        }
+        
+        /**
+         * Delete the file at a given path.
+         *
+         * @param string|array $paths
+         * @return bool 
+         * @static 
+         */ 
+        public static function delete($paths)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->delete($paths);
+        }
+        
+        /**
+         * Move a file to a new location.
+         *
+         * @param string $path
+         * @param string $target
+         * @return bool 
+         * @static 
+         */ 
+        public static function move($path, $target)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->move($path, $target);
+        }
+        
+        /**
+         * Copy a file to a new location.
+         *
+         * @param string $path
+         * @param string $target
+         * @return bool 
+         * @static 
+         */ 
+        public static function copy($path, $target)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->copy($path, $target);
+        }
+        
+        /**
+         * Create a symlink to the target file or directory. On Windows, a hard link is created if the target is a file.
+         *
+         * @param string $target
+         * @param string $link
+         * @return void 
+         * @static 
+         */ 
+        public static function link($target, $link)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        $instance->link($target, $link);
+        }
+        
+        /**
+         * Extract the file name from a file path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function name($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->name($path);
+        }
+        
+        /**
+         * Extract the trailing name component from a file path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function basename($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->basename($path);
+        }
+        
+        /**
+         * Extract the parent directory from a file path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function dirname($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->dirname($path);
+        }
+        
+        /**
+         * Extract the file extension from a file path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function extension($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->extension($path);
+        }
+        
+        /**
+         * Get the file type of a given file.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function type($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->type($path);
+        }
+        
+        /**
+         * Get the mime-type of a given file.
+         *
+         * @param string $path
+         * @return string|false 
+         * @static 
+         */ 
+        public static function mimeType($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->mimeType($path);
+        }
+        
+        /**
+         * Get the file size of a given file.
+         *
+         * @param string $path
+         * @return int 
+         * @static 
+         */ 
+        public static function size($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->size($path);
+        }
+        
+        /**
+         * Get the file's last modification time.
+         *
+         * @param string $path
+         * @return int 
+         * @static 
+         */ 
+        public static function lastModified($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->lastModified($path);
+        }
+        
+        /**
+         * Determine if the given path is a directory.
+         *
+         * @param string $directory
+         * @return bool 
+         * @static 
+         */ 
+        public static function isDirectory($directory)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isDirectory($directory);
+        }
+        
+        /**
+         * Determine if the given path is readable.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function isReadable($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isReadable($path);
+        }
+        
+        /**
+         * Determine if the given path is writable.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function isWritable($path)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isWritable($path);
+        }
+        
+        /**
+         * Determine if the given path is a file.
+         *
+         * @param string $file
+         * @return bool 
+         * @static 
+         */ 
+        public static function isFile($file)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isFile($file);
+        }
+        
+        /**
+         * Find path names matching a given pattern.
+         *
+         * @param string $pattern
+         * @param int $flags
+         * @return array 
+         * @static 
+         */ 
+        public static function glob($pattern, $flags = 0)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->glob($pattern, $flags);
+        }
+        
+        /**
+         * Get an array of all files in a directory.
+         *
+         * @param string $directory
+         * @param bool $hidden
+         * @return \Symfony\Component\Finder\SplFileInfo[] 
+         * @static 
+         */ 
+        public static function files($directory, $hidden = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->files($directory, $hidden);
+        }
+        
+        /**
+         * Get all of the files from the given directory (recursive).
+         *
+         * @param string $directory
+         * @param bool $hidden
+         * @return \Symfony\Component\Finder\SplFileInfo[] 
+         * @static 
+         */ 
+        public static function allFiles($directory, $hidden = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->allFiles($directory, $hidden);
+        }
+        
+        /**
+         * Get all of the directories within a given directory.
+         *
+         * @param string $directory
+         * @return array 
+         * @static 
+         */ 
+        public static function directories($directory)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->directories($directory);
+        }
+        
+        /**
+         * Ensure a directory exists.
+         *
+         * @param string $path
+         * @param int $mode
+         * @param bool $recursive
+         * @return void 
+         * @static 
+         */ 
+        public static function ensureDirectoryExists($path, $mode = 493, $recursive = true)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        $instance->ensureDirectoryExists($path, $mode, $recursive);
+        }
+        
+        /**
+         * Create a directory.
+         *
+         * @param string $path
+         * @param int $mode
+         * @param bool $recursive
+         * @param bool $force
+         * @return bool 
+         * @static 
+         */ 
+        public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->makeDirectory($path, $mode, $recursive, $force);
+        }
+        
+        /**
+         * Move a directory.
+         *
+         * @param string $from
+         * @param string $to
+         * @param bool $overwrite
+         * @return bool 
+         * @static 
+         */ 
+        public static function moveDirectory($from, $to, $overwrite = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->moveDirectory($from, $to, $overwrite);
+        }
+        
+        /**
+         * Copy a directory from one location to another.
+         *
+         * @param string $directory
+         * @param string $destination
+         * @param int|null $options
+         * @return bool 
+         * @static 
+         */ 
+        public static function copyDirectory($directory, $destination, $options = null)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->copyDirectory($directory, $destination, $options);
+        }
+        
+        /**
+         * Recursively delete a directory.
+         * 
+         * The directory itself may be optionally preserved.
+         *
+         * @param string $directory
+         * @param bool $preserve
+         * @return bool 
+         * @static 
+         */ 
+        public static function deleteDirectory($directory, $preserve = false)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->deleteDirectory($directory, $preserve);
+        }
+        
+        /**
+         * Remove all of the directories within a given directory.
+         *
+         * @param string $directory
+         * @return bool 
+         * @static 
+         */ 
+        public static function deleteDirectories($directory)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->deleteDirectories($directory);
+        }
+        
+        /**
+         * Empty the specified directory of all files and folders.
+         *
+         * @param string $directory
+         * @return bool 
+         * @static 
+         */ 
+        public static function cleanDirectory($directory)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->cleanDirectory($directory);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Filesystem\Filesystem::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Filesystem\Filesystem::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Filesystem\Filesystem::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Contracts\Auth\Access\Gate
+     */ 
+    class Gate {
+        
+        /**
+         * Determine if a given ability has been defined.
+         *
+         * @param string|array $ability
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($ability)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->has($ability);
+        }
+        
+        /**
+         * Define a new ability.
+         *
+         * @param string $ability
+         * @param callable|string $callback
+         * @return \Illuminate\Auth\Access\Gate 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function define($ability, $callback)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->define($ability, $callback);
+        }
+        
+        /**
+         * Define abilities for a resource.
+         *
+         * @param string $name
+         * @param string $class
+         * @param array|null $abilities
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function resource($name, $class, $abilities = null)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->resource($name, $class, $abilities);
+        }
+        
+        /**
+         * Define a policy class for a given class type.
+         *
+         * @param string $class
+         * @param string $policy
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function policy($class, $policy)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->policy($class, $policy);
+        }
+        
+        /**
+         * Register a callback to run before all Gate checks.
+         *
+         * @param callable $callback
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function before($callback)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->before($callback);
+        }
+        
+        /**
+         * Register a callback to run after all Gate checks.
+         *
+         * @param callable $callback
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function after($callback)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->after($callback);
+        }
+        
+        /**
+         * Determine if the given ability should be granted for the current user.
+         *
+         * @param string $ability
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function allows($ability, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->allows($ability, $arguments);
+        }
+        
+        /**
+         * Determine if the given ability should be denied for the current user.
+         *
+         * @param string $ability
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function denies($ability, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->denies($ability, $arguments);
+        }
+        
+        /**
+         * Determine if all of the given abilities should be granted for the current user.
+         *
+         * @param \Illuminate\Auth\Access\iterable|string $abilities
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function check($abilities, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->check($abilities, $arguments);
+        }
+        
+        /**
+         * Determine if any one of the given abilities should be granted for the current user.
+         *
+         * @param \Illuminate\Auth\Access\iterable|string $abilities
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function any($abilities, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->any($abilities, $arguments);
+        }
+        
+        /**
+         * Determine if all of the given abilities should be denied for the current user.
+         *
+         * @param \Illuminate\Auth\Access\iterable|string $abilities
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function none($abilities, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->none($abilities, $arguments);
+        }
+        
+        /**
+         * Determine if the given ability should be granted for the current user.
+         *
+         * @param string $ability
+         * @param array|mixed $arguments
+         * @return \Illuminate\Auth\Access\Response 
+         * @throws \Illuminate\Auth\Access\AuthorizationException
+         * @static 
+         */ 
+        public static function authorize($ability, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->authorize($ability, $arguments);
+        }
+        
+        /**
+         * Inspect the user for the given ability.
+         *
+         * @param string $ability
+         * @param array|mixed $arguments
+         * @return \Illuminate\Auth\Access\Response 
+         * @static 
+         */ 
+        public static function inspect($ability, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->inspect($ability, $arguments);
+        }
+        
+        /**
+         * Get the raw result from the authorization callback.
+         *
+         * @param string $ability
+         * @param array|mixed $arguments
+         * @return mixed 
+         * @throws \Illuminate\Auth\Access\AuthorizationException
+         * @static 
+         */ 
+        public static function raw($ability, $arguments = [])
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->raw($ability, $arguments);
+        }
+        
+        /**
+         * Get a policy instance for a given class.
+         *
+         * @param object|string $class
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getPolicyFor($class)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->getPolicyFor($class);
+        }
+        
+        /**
+         * Specify a callback to be used to guess policy names.
+         *
+         * @param callable $callback
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function guessPolicyNamesUsing($callback)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->guessPolicyNamesUsing($callback);
+        }
+        
+        /**
+         * Build a policy class instance of the given type.
+         *
+         * @param object|string $class
+         * @return mixed 
+         * @throws \Illuminate\Contracts\Container\BindingResolutionException
+         * @static 
+         */ 
+        public static function resolvePolicy($class)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->resolvePolicy($class);
+        }
+        
+        /**
+         * Get a gate instance for the given user.
+         *
+         * @param \Illuminate\Contracts\Auth\Authenticatable|mixed $user
+         * @return static 
+         * @static 
+         */ 
+        public static function forUser($user)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->forUser($user);
+        }
+        
+        /**
+         * Get all of the defined abilities.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function abilities()
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->abilities();
+        }
+        
+        /**
+         * Get all of the defined policies.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function policies()
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->policies();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Hashing\HashManager
+     */ 
+    class Hash {
+        
+        /**
+         * Create an instance of the Bcrypt hash Driver.
+         *
+         * @return \Illuminate\Hashing\BcryptHasher 
+         * @static 
+         */ 
+        public static function createBcryptDriver()
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createBcryptDriver();
+        }
+        
+        /**
+         * Create an instance of the Argon2i hash Driver.
+         *
+         * @return \Illuminate\Hashing\ArgonHasher 
+         * @static 
+         */ 
+        public static function createArgonDriver()
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createArgonDriver();
+        }
+        
+        /**
+         * Create an instance of the Argon2id hash Driver.
+         *
+         * @return \Illuminate\Hashing\Argon2IdHasher 
+         * @static 
+         */ 
+        public static function createArgon2idDriver()
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createArgon2idDriver();
+        }
+        
+        /**
+         * Get information about the given hashed value.
+         *
+         * @param string $hashedValue
+         * @return array 
+         * @static 
+         */ 
+        public static function info($hashedValue)
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->info($hashedValue);
+        }
+        
+        /**
+         * Hash the given value.
+         *
+         * @param string $value
+         * @param array $options
+         * @return string 
+         * @static 
+         */ 
+        public static function make($value, $options = [])
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->make($value, $options);
+        }
+        
+        /**
+         * Check the given plain value against a hash.
+         *
+         * @param string $value
+         * @param string $hashedValue
+         * @param array $options
+         * @return bool 
+         * @static 
+         */ 
+        public static function check($value, $hashedValue, $options = [])
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->check($value, $hashedValue, $options);
+        }
+        
+        /**
+         * Check if the given hash has been hashed using the given options.
+         *
+         * @param string $hashedValue
+         * @param array $options
+         * @return bool 
+         * @static 
+         */ 
+        public static function needsRehash($hashedValue, $options = [])
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->needsRehash($hashedValue, $options);
+        }
+        
+        /**
+         * Get the default driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Get a driver instance.
+         *
+         * @param string $driver
+         * @return mixed 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function driver($driver = null)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->driver($driver);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Hashing\HashManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Get all of the created "drivers".
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getDrivers()
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->getDrivers();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Translation\Translator
+     */ 
+    class Lang {
+        
+        /**
+         * Determine if a translation exists for a given locale.
+         *
+         * @param string $key
+         * @param string|null $locale
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasForLocale($key, $locale = null)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->hasForLocale($key, $locale);
+        }
+        
+        /**
+         * Determine if a translation exists.
+         *
+         * @param string $key
+         * @param string|null $locale
+         * @param bool $fallback
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($key, $locale = null, $fallback = true)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->has($key, $locale, $fallback);
+        }
+        
+        /**
+         * Get the translation for the given key.
+         *
+         * @param string $key
+         * @param array $replace
+         * @param string|null $locale
+         * @param bool $fallback
+         * @return string|array 
+         * @static 
+         */ 
+        public static function get($key, $replace = [], $locale = null, $fallback = true)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->get($key, $replace, $locale, $fallback);
+        }
+        
+        /**
+         * Get a translation according to an integer value.
+         *
+         * @param string $key
+         * @param \Countable|int|array $number
+         * @param array $replace
+         * @param string|null $locale
+         * @return string 
+         * @static 
+         */ 
+        public static function choice($key, $number, $replace = [], $locale = null)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->choice($key, $number, $replace, $locale);
+        }
+        
+        /**
+         * Add translation lines to the given locale.
+         *
+         * @param array $lines
+         * @param string $locale
+         * @param string $namespace
+         * @return void 
+         * @static 
+         */ 
+        public static function addLines($lines, $locale, $namespace = '*')
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addLines($lines, $locale, $namespace);
+        }
+        
+        /**
+         * Load the specified language group.
+         *
+         * @param string $namespace
+         * @param string $group
+         * @param string $locale
+         * @return void 
+         * @static 
+         */ 
+        public static function load($namespace, $group, $locale)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->load($namespace, $group, $locale);
+        }
+        
+        /**
+         * Add a new namespace to the loader.
+         *
+         * @param string $namespace
+         * @param string $hint
+         * @return void 
+         * @static 
+         */ 
+        public static function addNamespace($namespace, $hint)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addNamespace($namespace, $hint);
+        }
+        
+        /**
+         * Add a new JSON path to the loader.
+         *
+         * @param string $path
+         * @return void 
+         * @static 
+         */ 
+        public static function addJsonPath($path)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addJsonPath($path);
+        }
+        
+        /**
+         * Parse a key into namespace, group, and item.
+         *
+         * @param string $key
+         * @return array 
+         * @static 
+         */ 
+        public static function parseKey($key)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->parseKey($key);
+        }
+        
+        /**
+         * Get the message selector instance.
+         *
+         * @return \Illuminate\Translation\MessageSelector 
+         * @static 
+         */ 
+        public static function getSelector()
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getSelector();
+        }
+        
+        /**
+         * Set the message selector instance.
+         *
+         * @param \Illuminate\Translation\MessageSelector $selector
+         * @return void 
+         * @static 
+         */ 
+        public static function setSelector($selector)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setSelector($selector);
+        }
+        
+        /**
+         * Get the language line loader implementation.
+         *
+         * @return \Illuminate\Contracts\Translation\Loader 
+         * @static 
+         */ 
+        public static function getLoader()
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getLoader();
+        }
+        
+        /**
+         * Get the default locale being used.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function locale()
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->locale();
+        }
+        
+        /**
+         * Get the default locale being used.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getLocale()
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getLocale();
+        }
+        
+        /**
+         * Set the default locale.
+         *
+         * @param string $locale
+         * @return void 
+         * @static 
+         */ 
+        public static function setLocale($locale)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setLocale($locale);
+        }
+        
+        /**
+         * Get the fallback locale being used.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getFallback()
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getFallback();
+        }
+        
+        /**
+         * Set the fallback locale being used.
+         *
+         * @param string $fallback
+         * @return void 
+         * @static 
+         */ 
+        public static function setFallback($fallback)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setFallback($fallback);
+        }
+        
+        /**
+         * Set the loaded translation groups.
+         *
+         * @param array $loaded
+         * @return void 
+         * @static 
+         */ 
+        public static function setLoaded($loaded)
+        {
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setLoaded($loaded);
+        }
+        
+        /**
+         * Set the parsed value of a key.
+         *
+         * @param string $key
+         * @param array $parsed
+         * @return void 
+         * @static 
+         */ 
+        public static function setParsedKey($key, $parsed)
+        {
+            //Method inherited from \Illuminate\Support\NamespacedItemResolver            
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setParsedKey($key, $parsed);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Translation\Translator::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Translation\Translator::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Translation\Translator::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Log\Logger
+     */ 
+    class Log {
+        
+        /**
+         * Create a new, on-demand aggregate logger instance.
+         *
+         * @param array $channels
+         * @param string|null $channel
+         * @return \Psr\Log\LoggerInterface 
+         * @static 
+         */ 
+        public static function stack($channels, $channel = null)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->stack($channels, $channel);
+        }
+        
+        /**
+         * Get a log channel instance.
+         *
+         * @param string|null $channel
+         * @return \Psr\Log\LoggerInterface 
+         * @static 
+         */ 
+        public static function channel($channel = null)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->channel($channel);
+        }
+        
+        /**
+         * Get a log driver instance.
+         *
+         * @param string|null $driver
+         * @return \Psr\Log\LoggerInterface 
+         * @static 
+         */ 
+        public static function driver($driver = null)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->driver($driver);
+        }
+        
+        /**
+         * 
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getChannels()
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->getChannels();
+        }
+        
+        /**
+         * Get the default log driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default log driver name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Log\LogManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Unset the given channel instance.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Log\LogManager 
+         * @static 
+         */ 
+        public static function forgetChannel($driver = null)
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->forgetChannel($driver);
+        }
+        
+        /**
+         * System is unusable.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function emergency($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->emergency($message, $context);
+        }
+        
+        /**
+         * Action must be taken immediately.
+         * 
+         * Example: Entire website down, database unavailable, etc. This should
+         * trigger the SMS alerts and wake you up.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function alert($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->alert($message, $context);
+        }
+        
+        /**
+         * Critical conditions.
+         * 
+         * Example: Application component unavailable, unexpected exception.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function critical($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->critical($message, $context);
+        }
+        
+        /**
+         * Runtime errors that do not require immediate action but should typically
+         * be logged and monitored.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function error($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->error($message, $context);
+        }
+        
+        /**
+         * Exceptional occurrences that are not errors.
+         * 
+         * Example: Use of deprecated APIs, poor use of an API, undesirable things
+         * that are not necessarily wrong.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function warning($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->warning($message, $context);
+        }
+        
+        /**
+         * Normal but significant events.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function notice($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->notice($message, $context);
+        }
+        
+        /**
+         * Interesting events.
+         * 
+         * Example: User logs in, SQL logs.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function info($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->info($message, $context);
+        }
+        
+        /**
+         * Detailed debug information.
+         *
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function debug($message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->debug($message, $context);
+        }
+        
+        /**
+         * Logs with an arbitrary level.
+         *
+         * @param mixed $level
+         * @param string $message
+         * @param array $context
+         * @return void 
+         * @static 
+         */ 
+        public static function log($level, $message, $context = [])
+        {
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->log($level, $message, $context);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Mail\Mailer
+     * @see \Illuminate\Support\Testing\Fakes\MailFake
+     */ 
+    class Mail {
+        
+        /**
+         * Set the global from address and name.
+         *
+         * @param string $address
+         * @param string|null $name
+         * @return void 
+         * @static 
+         */ 
+        public static function alwaysFrom($address, $name = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysFrom($address, $name);
+        }
+        
+        /**
+         * Set the global reply-to address and name.
+         *
+         * @param string $address
+         * @param string|null $name
+         * @return void 
+         * @static 
+         */ 
+        public static function alwaysReplyTo($address, $name = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysReplyTo($address, $name);
+        }
+        
+        /**
+         * Set the global to address and name.
+         *
+         * @param string $address
+         * @param string|null $name
+         * @return void 
+         * @static 
+         */ 
+        public static function alwaysTo($address, $name = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysTo($address, $name);
+        }
+        
+        /**
+         * Begin the process of mailing a mailable class instance.
+         *
+         * @param mixed $users
+         * @return \Illuminate\Mail\PendingMail 
+         * @static 
+         */ 
+        public static function to($users)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->to($users);
+        }
+        
+        /**
+         * Begin the process of mailing a mailable class instance.
+         *
+         * @param mixed $users
+         * @return \Illuminate\Mail\PendingMail 
+         * @static 
+         */ 
+        public static function cc($users)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->cc($users);
+        }
+        
+        /**
+         * Begin the process of mailing a mailable class instance.
+         *
+         * @param mixed $users
+         * @return \Illuminate\Mail\PendingMail 
+         * @static 
+         */ 
+        public static function bcc($users)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->bcc($users);
+        }
+        
+        /**
+         * Send a new message with only an HTML part.
+         *
+         * @param string $html
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function html($html, $callback)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->html($html, $callback);
+        }
+        
+        /**
+         * Send a new message with only a raw text part.
+         *
+         * @param string $text
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function raw($text, $callback)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->raw($text, $callback);
+        }
+        
+        /**
+         * Send a new message with only a plain part.
+         *
+         * @param string $view
+         * @param array $data
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function plain($view, $data, $callback)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->plain($view, $data, $callback);
+        }
+        
+        /**
+         * Render the given message as a view.
+         *
+         * @param string|array $view
+         * @param array $data
+         * @return string 
+         * @static 
+         */ 
+        public static function render($view, $data = [])
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->render($view, $data);
+        }
+        
+        /**
+         * Send a new message using a view.
+         *
+         * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
+         * @param array $data
+         * @param \Closure|string|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function send($view, $data = [], $callback = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->send($view, $data, $callback);
+        }
+        
+        /**
+         * Queue a new e-mail message for sending.
+         *
+         * @param \Illuminate\Contracts\Mail\Mailable $view
+         * @param string|null $queue
+         * @return mixed 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function queue($view, $queue = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->queue($view, $queue);
+        }
+        
+        /**
+         * Queue a new e-mail message for sending on the given queue.
+         *
+         * @param string $queue
+         * @param \Illuminate\Contracts\Mail\Mailable $view
+         * @return mixed 
+         * @static 
+         */ 
+        public static function onQueue($queue, $view)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->onQueue($queue, $view);
+        }
+        
+        /**
+         * Queue a new e-mail message for sending on the given queue.
+         * 
+         * This method didn't match rest of framework's "onQueue" phrasing. Added "onQueue".
+         *
+         * @param string $queue
+         * @param \Illuminate\Contracts\Mail\Mailable $view
+         * @return mixed 
+         * @static 
+         */ 
+        public static function queueOn($queue, $view)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->queueOn($queue, $view);
+        }
+        
+        /**
+         * Queue a new e-mail message for sending after (n) seconds.
+         *
+         * @param \DateTimeInterface|\DateInterval|int $delay
+         * @param \Illuminate\Contracts\Mail\Mailable $view
+         * @param string|null $queue
+         * @return mixed 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function later($delay, $view, $queue = null)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->later($delay, $view, $queue);
+        }
+        
+        /**
+         * Queue a new e-mail message for sending after (n) seconds on the given queue.
+         *
+         * @param string $queue
+         * @param \DateTimeInterface|\DateInterval|int $delay
+         * @param \Illuminate\Contracts\Mail\Mailable $view
+         * @return mixed 
+         * @static 
+         */ 
+        public static function laterOn($queue, $delay, $view)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->laterOn($queue, $delay, $view);
+        }
+        
+        /**
+         * Get the array of failed recipients.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function failures()
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->failures();
+        }
+        
+        /**
+         * Get the Swift Mailer instance.
+         *
+         * @return \Swift_Mailer 
+         * @static 
+         */ 
+        public static function getSwiftMailer()
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->getSwiftMailer();
+        }
+        
+        /**
+         * Get the view factory instance.
+         *
+         * @return \Illuminate\Contracts\View\Factory 
+         * @static 
+         */ 
+        public static function getViewFactory()
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->getViewFactory();
+        }
+        
+        /**
+         * Set the Swift Mailer instance.
+         *
+         * @param \Swift_Mailer $swift
+         * @return void 
+         * @static 
+         */ 
+        public static function setSwiftMailer($swift)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->setSwiftMailer($swift);
+        }
+        
+        /**
+         * Set the queue manager instance.
+         *
+         * @param \Illuminate\Contracts\Queue\Factory $queue
+         * @return \Illuminate\Mail\Mailer 
+         * @static 
+         */ 
+        public static function setQueue($queue)
+        {
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->setQueue($queue);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Mail\Mailer::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Mail\Mailer::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Mail\Mailer::hasMacro($name);
+        }
+        
+        /**
+         * Assert if a mailable was sent based on a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertSent($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertSent($mailable, $callback);
+        }
+        
+        /**
+         * Determine if a mailable was not sent based on a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotSent($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNotSent($mailable, $callback);
+        }
+        
+        /**
+         * Assert that no mailables were sent.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNothingSent()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNothingSent();
+        }
+        
+        /**
+         * Assert if a mailable was queued based on a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertQueued($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertQueued($mailable, $callback);
+        }
+        
+        /**
+         * Determine if a mailable was not queued based on a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotQueued($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNotQueued($mailable, $callback);
+        }
+        
+        /**
+         * Assert that no mailables were queued.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNothingQueued()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNothingQueued();
+        }
+        
+        /**
+         * Get all of the mailables matching a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function sent($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->sent($mailable, $callback);
+        }
+        
+        /**
+         * Determine if the given mailable has been sent.
+         *
+         * @param string $mailable
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasSent($mailable)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->hasSent($mailable);
+        }
+        
+        /**
+         * Get all of the queued mailables matching a truth-test callback.
+         *
+         * @param string $mailable
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function queued($mailable, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->queued($mailable, $callback);
+        }
+        
+        /**
+         * Determine if the given mailable has been queued.
+         *
+         * @param string $mailable
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasQueued($mailable)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->hasQueued($mailable);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Notifications\ChannelManager
+     */ 
+    class Notification {
+        
+        /**
+         * Send the given notification to the given notifiable entities.
+         *
+         * @param \Illuminate\Support\Collection|array|mixed $notifiables
+         * @param mixed $notification
+         * @return void 
+         * @static 
+         */ 
+        public static function send($notifiables, $notification)
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->send($notifiables, $notification);
+        }
+        
+        /**
+         * Send the given notification immediately.
+         *
+         * @param \Illuminate\Support\Collection|array|mixed $notifiables
+         * @param mixed $notification
+         * @param array|null $channels
+         * @return void 
+         * @static 
+         */ 
+        public static function sendNow($notifiables, $notification, $channels = null)
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->sendNow($notifiables, $notification, $channels);
+        }
+        
+        /**
+         * Get a channel instance.
+         *
+         * @param string|null $name
+         * @return mixed 
+         * @static 
+         */ 
+        public static function channel($name = null)
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->channel($name);
+        }
+        
+        /**
+         * Get the default channel driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Get the default channel driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function deliversVia()
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->deliversVia();
+        }
+        
+        /**
+         * Set the default channel driver name.
+         *
+         * @param string $channel
+         * @return void 
+         * @static 
+         */ 
+        public static function deliverVia($channel)
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->deliverVia($channel);
+        }
+        
+        /**
+         * Set the locale of notifications.
+         *
+         * @param string $locale
+         * @return \Illuminate\Notifications\ChannelManager 
+         * @static 
+         */ 
+        public static function locale($locale)
+        {
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->locale($locale);
+        }
+        
+        /**
+         * Get a driver instance.
+         *
+         * @param string $driver
+         * @return mixed 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function driver($driver = null)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->driver($driver);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Notifications\ChannelManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Get all of the created "drivers".
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getDrivers()
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->getDrivers();
+        }
+        
+        /**
+         * Assert if a notification was sent based on a truth-test callback.
+         *
+         * @param mixed $notifiable
+         * @param string $notification
+         * @param callable|null $callback
+         * @return void 
+         * @throws \Exception
+         * @static 
+         */ 
+        public static function assertSentTo($notifiable, $notification, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertSentTo($notifiable, $notification, $callback);
+        }
+        
+        /**
+         * Assert if a notification was sent a number of times.
+         *
+         * @param mixed $notifiable
+         * @param string $notification
+         * @param int $times
+         * @return void 
+         * @static 
+         */ 
+        public static function assertSentToTimes($notifiable, $notification, $times = 1)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertSentToTimes($notifiable, $notification, $times);
+        }
+        
+        /**
+         * Determine if a notification was sent based on a truth-test callback.
+         *
+         * @param mixed $notifiable
+         * @param string $notification
+         * @param callable|null $callback
+         * @return void 
+         * @throws \Exception
+         * @static 
+         */ 
+        public static function assertNotSentTo($notifiable, $notification, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertNotSentTo($notifiable, $notification, $callback);
+        }
+        
+        /**
+         * Assert that no notifications were sent.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNothingSent()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertNothingSent();
+        }
+        
+        /**
+         * Assert the total amount of times a notification was sent.
+         *
+         * @param int $expectedCount
+         * @param string $notification
+         * @return void 
+         * @static 
+         */ 
+        public static function assertTimesSent($expectedCount, $notification)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertTimesSent($expectedCount, $notification);
+        }
+        
+        /**
+         * Get all of the notifications matching a truth-test callback.
+         *
+         * @param mixed $notifiable
+         * @param string $notification
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function sent($notifiable, $notification, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        return $instance->sent($notifiable, $notification, $callback);
+        }
+        
+        /**
+         * Determine if there are more notifications left to inspect.
+         *
+         * @param mixed $notifiable
+         * @param string $notification
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasSent($notifiable, $notification)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        return $instance->hasSent($notifiable, $notification);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Support\Testing\Fakes\NotificationFake::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Support\Testing\Fakes\NotificationFake::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Support\Testing\Fakes\NotificationFake::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @method static string sendResetLink(array $credentials)
+     * @method static mixed reset(array $credentials, \Closure $callback)
+     * @see \Illuminate\Auth\Passwords\PasswordBroker
+     */ 
+    class Password {
+        
+        /**
+         * Attempt to get the broker from the local cache.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Contracts\Auth\PasswordBroker 
+         * @static 
+         */ 
+        public static function broker($name = null)
+        {
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        return $instance->broker($name);
+        }
+        
+        /**
+         * Get the default password broker name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default password broker name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Queue\QueueManager
+     * @see \Illuminate\Queue\Queue
+     */ 
+    class Queue {
+        
+        /**
+         * Register an event listener for the before job event.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function before($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->before($callback);
+        }
+        
+        /**
+         * Register an event listener for the after job event.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function after($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->after($callback);
+        }
+        
+        /**
+         * Register an event listener for the exception occurred job event.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function exceptionOccurred($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->exceptionOccurred($callback);
+        }
+        
+        /**
+         * Register an event listener for the daemon queue loop.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function looping($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->looping($callback);
+        }
+        
+        /**
+         * Register an event listener for the failed job event.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function failing($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->failing($callback);
+        }
+        
+        /**
+         * Register an event listener for the daemon queue stopping.
+         *
+         * @param mixed $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function stopping($callback)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->stopping($callback);
+        }
+        
+        /**
+         * Determine if the driver is connected.
+         *
+         * @param string|null $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function connected($name = null)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->connected($name);
+        }
+        
+        /**
+         * Resolve a queue connection instance.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Contracts\Queue\Queue 
+         * @static 
+         */ 
+        public static function connection($name = null)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->connection($name);
+        }
+        
+        /**
+         * Add a queue connection resolver.
+         *
+         * @param string $driver
+         * @param \Closure $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function extend($driver, $resolver)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->extend($driver, $resolver);
+        }
+        
+        /**
+         * Add a queue connection resolver.
+         *
+         * @param string $driver
+         * @param \Closure $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function addConnector($driver, $resolver)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->addConnector($driver, $resolver);
+        }
+        
+        /**
+         * Get the name of the default queue connection.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the name of the default queue connection.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Get the full name for the given connection.
+         *
+         * @param string|null $connection
+         * @return string 
+         * @static 
+         */ 
+        public static function getName($connection = null)
+        {
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->getName($connection);
+        }
+        
+        /**
+         * Assert if a job was pushed based on a truth-test callback.
+         *
+         * @param string $job
+         * @param callable|int|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertPushed($job, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushed($job, $callback);
+        }
+        
+        /**
+         * Assert if a job was pushed based on a truth-test callback.
+         *
+         * @param string $queue
+         * @param string $job
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertPushedOn($queue, $job, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushedOn($queue, $job, $callback);
+        }
+        
+        /**
+         * Assert if a job was pushed with chained jobs based on a truth-test callback.
+         *
+         * @param string $job
+         * @param array $expectedChain
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertPushedWithChain($job, $expectedChain = [], $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushedWithChain($job, $expectedChain, $callback);
+        }
+        
+        /**
+         * Assert if a job was pushed with an empty chain based on a truth-test callback.
+         *
+         * @param string $job
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertPushedWithoutChain($job, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushedWithoutChain($job, $callback);
+        }
+        
+        /**
+         * Determine if a job was pushed based on a truth-test callback.
+         *
+         * @param string $job
+         * @param callable|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNotPushed($job, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertNotPushed($job, $callback);
+        }
+        
+        /**
+         * Assert that no jobs were pushed.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function assertNothingPushed()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertNothingPushed();
+        }
+        
+        /**
+         * Get all of the jobs matching a truth-test callback.
+         *
+         * @param string $job
+         * @param callable|null $callback
+         * @return \Illuminate\Support\Collection 
+         * @static 
+         */ 
+        public static function pushed($job, $callback = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushed($job, $callback);
+        }
+        
+        /**
+         * Determine if there are any stored jobs for a given class.
+         *
+         * @param string $job
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasPushed($job)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->hasPushed($job);
+        }
+        
+        /**
+         * Get the size of the queue.
+         *
+         * @param string|null $queue
+         * @return int 
+         * @static 
+         */ 
+        public static function size($queue = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->size($queue);
+        }
+        
+        /**
+         * Push a new job onto the queue.
+         *
+         * @param string $job
+         * @param mixed $data
+         * @param string|null $queue
+         * @return mixed 
+         * @static 
+         */ 
+        public static function push($job, $data = '', $queue = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->push($job, $data, $queue);
+        }
+        
+        /**
+         * Push a raw payload onto the queue.
+         *
+         * @param string $payload
+         * @param string|null $queue
+         * @param array $options
+         * @return mixed 
+         * @static 
+         */ 
+        public static function pushRaw($payload, $queue = null, $options = [])
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushRaw($payload, $queue, $options);
+        }
+        
+        /**
+         * Push a new job onto the queue after a delay.
+         *
+         * @param \DateTimeInterface|\DateInterval|int $delay
+         * @param string $job
+         * @param mixed $data
+         * @param string|null $queue
+         * @return mixed 
+         * @static 
+         */ 
+        public static function later($delay, $job, $data = '', $queue = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->later($delay, $job, $data, $queue);
+        }
+        
+        /**
+         * Push a new job onto the queue.
+         *
+         * @param string $queue
+         * @param string $job
+         * @param mixed $data
+         * @return mixed 
+         * @static 
+         */ 
+        public static function pushOn($queue, $job, $data = '')
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushOn($queue, $job, $data);
+        }
+        
+        /**
+         * Push a new job onto the queue after a delay.
+         *
+         * @param string $queue
+         * @param \DateTimeInterface|\DateInterval|int $delay
+         * @param string $job
+         * @param mixed $data
+         * @return mixed 
+         * @static 
+         */ 
+        public static function laterOn($queue, $delay, $job, $data = '')
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->laterOn($queue, $delay, $job, $data);
+        }
+        
+        /**
+         * Pop the next job off of the queue.
+         *
+         * @param string|null $queue
+         * @return \Illuminate\Contracts\Queue\Job|null 
+         * @static 
+         */ 
+        public static function pop($queue = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pop($queue);
+        }
+        
+        /**
+         * Push an array of jobs onto the queue.
+         *
+         * @param array $jobs
+         * @param mixed $data
+         * @param string|null $queue
+         * @return mixed 
+         * @static 
+         */ 
+        public static function bulk($jobs, $data = '', $queue = null)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->bulk($jobs, $data, $queue);
+        }
+        
+        /**
+         * Get the jobs that have been pushed.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function pushedJobs()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushedJobs();
+        }
+        
+        /**
+         * Get the connection name for the queue.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getConnectionName()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->getConnectionName();
+        }
+        
+        /**
+         * Set the connection name for the queue.
+         *
+         * @param string $name
+         * @return \Illuminate\Support\Testing\Fakes\QueueFake 
+         * @static 
+         */ 
+        public static function setConnectionName($name)
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->setConnectionName($name);
+        }
+        
+        /**
+         * Release a reserved job back onto the queue.
+         *
+         * @param string $queue
+         * @param \Illuminate\Queue\Jobs\DatabaseJobRecord $job
+         * @param int $delay
+         * @return mixed 
+         * @static 
+         */ 
+        public static function release($queue, $job, $delay)
+        {
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        return $instance->release($queue, $job, $delay);
+        }
+        
+        /**
+         * Delete a reserved job from the queue.
+         *
+         * @param string $queue
+         * @param string $id
+         * @return void 
+         * @throws \Exception|\Throwable
+         * @static 
+         */ 
+        public static function deleteReserved($queue, $id)
+        {
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        $instance->deleteReserved($queue, $id);
+        }
+        
+        /**
+         * Get the queue or return the default.
+         *
+         * @param string|null $queue
+         * @return string 
+         * @static 
+         */ 
+        public static function getQueue($queue)
+        {
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        return $instance->getQueue($queue);
+        }
+        
+        /**
+         * Get the underlying database instance.
+         *
+         * @return \Illuminate\Database\Connection 
+         * @static 
+         */ 
+        public static function getDatabase()
+        {
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        return $instance->getDatabase();
+        }
+        
+        /**
+         * Get the retry delay for an object-based queue handler.
+         *
+         * @param mixed $job
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getJobRetryDelay($job)
+        {
+            //Method inherited from \Illuminate\Queue\Queue            
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        return $instance->getJobRetryDelay($job);
+        }
+        
+        /**
+         * Get the expiration timestamp for an object-based queue handler.
+         *
+         * @param mixed $job
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getJobExpiration($job)
+        {
+            //Method inherited from \Illuminate\Queue\Queue            
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        return $instance->getJobExpiration($job);
+        }
+        
+        /**
+         * Register a callback to be executed when creating job payloads.
+         *
+         * @param callable $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function createPayloadUsing($callback)
+        {
+            //Method inherited from \Illuminate\Queue\Queue            
+                        \Illuminate\Queue\DatabaseQueue::createPayloadUsing($callback);
+        }
+        
+        /**
+         * Set the IoC container instance.
+         *
+         * @param \Illuminate\Container\Container $container
+         * @return void 
+         * @static 
+         */ 
+        public static function setContainer($container)
+        {
+            //Method inherited from \Illuminate\Queue\Queue            
+                        /** @var \Illuminate\Queue\DatabaseQueue $instance */
+                        $instance->setContainer($container);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Routing\Redirector
+     */ 
+    class Redirect {
+        
+        /**
+         * Create a new redirect response to the "home" route.
+         *
+         * @param int $status
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function home($status = 302)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->home($status);
+        }
+        
+        /**
+         * Create a new redirect response to the previous location.
+         *
+         * @param int $status
+         * @param array $headers
+         * @param mixed $fallback
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function back($status = 302, $headers = [], $fallback = false)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->back($status, $headers, $fallback);
+        }
+        
+        /**
+         * Create a new redirect response to the current URI.
+         *
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function refresh($status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->refresh($status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response, while putting the current URL in the session.
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function guest($path, $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->guest($path, $status, $headers, $secure);
+        }
+        
+        /**
+         * Create a new redirect response to the previously intended location.
+         *
+         * @param string $default
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function intended($default = '/', $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->intended($default, $status, $headers, $secure);
+        }
+        
+        /**
+         * Set the intended url.
+         *
+         * @param string $url
+         * @return void 
+         * @static 
+         */ 
+        public static function setIntendedUrl($url)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        $instance->setIntendedUrl($url);
+        }
+        
+        /**
+         * Create a new redirect response to the given path.
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function to($path, $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->to($path, $status, $headers, $secure);
+        }
+        
+        /**
+         * Create a new redirect response to an external URL (no validation).
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function away($path, $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->away($path, $status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response to the given HTTPS path.
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function secure($path, $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->secure($path, $status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response to a named route.
+         *
+         * @param string $route
+         * @param mixed $parameters
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function route($route, $parameters = [], $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->route($route, $parameters, $status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response to a controller action.
+         *
+         * @param string|array $action
+         * @param mixed $parameters
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function action($action, $parameters = [], $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->action($action, $parameters, $status, $headers);
+        }
+        
+        /**
+         * Get the URL generator instance.
+         *
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function getUrlGenerator()
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->getUrlGenerator();
+        }
+        
+        /**
+         * Set the active session store.
+         *
+         * @param \Illuminate\Session\Store $session
+         * @return void 
+         * @static 
+         */ 
+        public static function setSession($session)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        $instance->setSession($session);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Routing\Redirector::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Routing\Redirector::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Routing\Redirector::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @method static mixed filterFiles(mixed $files)
+     * @see \Illuminate\Http\Request
+     */ 
+    class Request {
+        
+        /**
+         * Create a new Illuminate HTTP request from server variables.
+         *
+         * @return static 
+         * @static 
+         */ 
+        public static function capture()
+        {
+                        return \Illuminate\Http\Request::capture();
+        }
+        
+        /**
+         * Return the Request instance.
+         *
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function instance()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->instance();
+        }
+        
+        /**
+         * Get the request method.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function method()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->method();
+        }
+        
+        /**
+         * Get the root URL for the application.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function root()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->root();
+        }
+        
+        /**
+         * Get the URL (no query string) for the request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function url()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->url();
+        }
+        
+        /**
+         * Get the full URL for the request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function fullUrl()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrl();
+        }
+        
+        /**
+         * Get the full URL for the request with the added query string parameters.
+         *
+         * @param array $query
+         * @return string 
+         * @static 
+         */ 
+        public static function fullUrlWithQuery($query)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlWithQuery($query);
+        }
+        
+        /**
+         * Get the current path info for the request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function path()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->path();
+        }
+        
+        /**
+         * Get the current decoded path info for the request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function decodedPath()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->decodedPath();
+        }
+        
+        /**
+         * Get a segment from the URI (1 based index).
+         *
+         * @param int $index
+         * @param string|null $default
+         * @return string|null 
+         * @static 
+         */ 
+        public static function segment($index, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segment($index, $default);
+        }
+        
+        /**
+         * Get all of the segments for the request path.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function segments()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segments();
+        }
+        
+        /**
+         * Determine if the current request URI matches a pattern.
+         *
+         * @param mixed $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function is(...$patterns)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->is(...$patterns);
+        }
+        
+        /**
+         * Determine if the route name matches a given pattern.
+         *
+         * @param mixed $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function routeIs(...$patterns)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->routeIs(...$patterns);
+        }
+        
+        /**
+         * Determine if the current request URL and query string matches a pattern.
+         *
+         * @param mixed $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function fullUrlIs(...$patterns)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlIs(...$patterns);
+        }
+        
+        /**
+         * Determine if the request is the result of an AJAX call.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function ajax()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ajax();
+        }
+        
+        /**
+         * Determine if the request is the result of an PJAX call.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function pjax()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->pjax();
+        }
+        
+        /**
+         * Determine if the request is the result of an prefetch call.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function prefetch()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefetch();
+        }
+        
+        /**
+         * Determine if the request is over HTTPS.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function secure()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->secure();
+        }
+        
+        /**
+         * Get the client IP address.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function ip()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ip();
+        }
+        
+        /**
+         * Get the client IP addresses.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function ips()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ips();
+        }
+        
+        /**
+         * Get the client user agent.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function userAgent()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->userAgent();
+        }
+        
+        /**
+         * Merge new input into the current request's input array.
+         *
+         * @param array $input
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function merge($input)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->merge($input);
+        }
+        
+        /**
+         * Replace the input for the current request.
+         *
+         * @param array $input
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function replace($input)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->replace($input);
+        }
+        
+        /**
+         * This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel.
+         * 
+         * Instead, you may use the "input" method.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function get($key, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->get($key, $default);
+        }
+        
+        /**
+         * Get the JSON payload for the request.
+         *
+         * @param string|null $key
+         * @param mixed $default
+         * @return \Symfony\Component\HttpFoundation\ParameterBag|mixed 
+         * @static 
+         */ 
+        public static function json($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->json($key, $default);
+        }
+        
+        /**
+         * Create a new request instance from the given Laravel request.
+         *
+         * @param \Illuminate\Http\Request $from
+         * @param \Illuminate\Http\Request|null $to
+         * @return static 
+         * @static 
+         */ 
+        public static function createFrom($from, $to = null)
+        {
+                        return \Illuminate\Http\Request::createFrom($from, $to);
+        }
+        
+        /**
+         * Create an Illuminate request from a Symfony instance.
+         *
+         * @param \Symfony\Component\HttpFoundation\Request $request
+         * @return static 
+         * @static 
+         */ 
+        public static function createFromBase($request)
+        {
+                        return \Illuminate\Http\Request::createFromBase($request);
+        }
+        
+        /**
+         * Clones a request and overrides some of its parameters.
+         *
+         * @param array $query The GET parameters
+         * @param array $request The POST parameters
+         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
+         * @param array $cookies The COOKIE parameters
+         * @param array $files The FILES parameters
+         * @param array $server The SERVER parameters
+         * @return static 
+         * @static 
+         */ 
+        public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);
+        }
+        
+        /**
+         * Get the session associated with the request.
+         *
+         * @return \Illuminate\Session\Store 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function session()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->session();
+        }
+        
+        /**
+         * Get the session associated with the request.
+         *
+         * @return \Illuminate\Session\Store|null 
+         * @static 
+         */ 
+        public static function getSession()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSession();
+        }
+        
+        /**
+         * Set the session instance on the request.
+         *
+         * @param \Illuminate\Contracts\Session\Session $session
+         * @return void 
+         * @static 
+         */ 
+        public static function setLaravelSession($session)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->setLaravelSession($session);
+        }
+        
+        /**
+         * Get the user making the request.
+         *
+         * @param string|null $guard
+         * @return mixed 
+         * @static 
+         */ 
+        public static function user($guard = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->user($guard);
+        }
+        
+        /**
+         * Get the route handling the request.
+         *
+         * @param string|null $param
+         * @param mixed $default
+         * @return \Illuminate\Routing\Route|object|string|null 
+         * @static 
+         */ 
+        public static function route($param = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->route($param, $default);
+        }
+        
+        /**
+         * Get a unique fingerprint for the request / route / IP address.
+         *
+         * @return string 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function fingerprint()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fingerprint();
+        }
+        
+        /**
+         * Set the JSON payload for the request.
+         *
+         * @param \Symfony\Component\HttpFoundation\ParameterBag $json
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function setJson($json)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setJson($json);
+        }
+        
+        /**
+         * Get the user resolver callback.
+         *
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function getUserResolver()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserResolver();
+        }
+        
+        /**
+         * Set the user resolver callback.
+         *
+         * @param \Closure $callback
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function setUserResolver($callback)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setUserResolver($callback);
+        }
+        
+        /**
+         * Get the route resolver callback.
+         *
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function getRouteResolver()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRouteResolver();
+        }
+        
+        /**
+         * Set the route resolver callback.
+         *
+         * @param \Closure $callback
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function setRouteResolver($callback)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRouteResolver($callback);
+        }
+        
+        /**
+         * Get all of the input and files for the request.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function toArray()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->toArray();
+        }
+        
+        /**
+         * Determine if the given offset exists.
+         *
+         * @param string $offset
+         * @return bool 
+         * @static 
+         */ 
+        public static function offsetExists($offset)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetExists($offset);
+        }
+        
+        /**
+         * Get the value at the given offset.
+         *
+         * @param string $offset
+         * @return mixed 
+         * @static 
+         */ 
+        public static function offsetGet($offset)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetGet($offset);
+        }
+        
+        /**
+         * Set the value at the given offset.
+         *
+         * @param string $offset
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetSet($offset, $value)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetSet($offset, $value);
+        }
+        
+        /**
+         * Remove the value at the given offset.
+         *
+         * @param string $offset
+         * @return void 
+         * @static 
+         */ 
+        public static function offsetUnset($offset)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetUnset($offset);
+        }
+        
+        /**
+         * Sets the parameters for this request.
+         * 
+         * This method also re-initializes all properties.
+         *
+         * @param array $query The GET parameters
+         * @param array $request The POST parameters
+         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
+         * @param array $cookies The COOKIE parameters
+         * @param array $files The FILES parameters
+         * @param array $server The SERVER parameters
+         * @param string|resource|null $content The raw body data
+         * @static 
+         */ 
+        public static function initialize($query = [], $request = [], $attributes = [], $cookies = [], $files = [], $server = [], $content = null)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);
+        }
+        
+        /**
+         * Creates a new request with values from PHP's super globals.
+         *
+         * @return static 
+         * @static 
+         */ 
+        public static function createFromGlobals()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::createFromGlobals();
+        }
+        
+        /**
+         * Creates a Request based on a given URI and configuration.
+         * 
+         * The information contained in the URI always take precedence
+         * over the other information (server and parameters).
+         *
+         * @param string $uri The URI
+         * @param string $method The HTTP method
+         * @param array $parameters The query (GET) or request (POST) parameters
+         * @param array $cookies The request cookies ($_COOKIE)
+         * @param array $files The request files ($_FILES)
+         * @param array $server The server parameters ($_SERVER)
+         * @param string|resource|null $content The raw body data
+         * @return static 
+         * @static 
+         */ 
+        public static function create($uri, $method = 'GET', $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
+        }
+        
+        /**
+         * Sets a callable able to create a Request instance.
+         * 
+         * This is mainly useful when you need to override the Request class
+         * to keep BC with an existing system. It should not be used for any
+         * other purpose.
+         *
+         * @param callable|null $callable A PHP callable
+         * @static 
+         */ 
+        public static function setFactory($callable)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::setFactory($callable);
+        }
+        
+        /**
+         * Overrides the PHP global variables according to this request instance.
+         * 
+         * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
+         * $_FILES is never overridden, see rfc1867
+         *
+         * @static 
+         */ 
+        public static function overrideGlobals()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->overrideGlobals();
+        }
+        
+        /**
+         * Sets a list of trusted proxies.
+         * 
+         * You should only list the reverse proxies that you manage directly.
+         *
+         * @param array $proxies A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR']
+         * @param int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies
+         * @throws \InvalidArgumentException When $trustedHeaderSet is invalid
+         * @static 
+         */ 
+        public static function setTrustedProxies($proxies, $trustedHeaderSet)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
+        }
+        
+        /**
+         * Gets the list of trusted proxies.
+         *
+         * @return array An array of trusted proxies
+         * @static 
+         */ 
+        public static function getTrustedProxies()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::getTrustedProxies();
+        }
+        
+        /**
+         * Gets the set of trusted headers from trusted proxies.
+         *
+         * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies
+         * @static 
+         */ 
+        public static function getTrustedHeaderSet()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::getTrustedHeaderSet();
+        }
+        
+        /**
+         * Sets a list of trusted host patterns.
+         * 
+         * You should only list the hosts you manage using regexs.
+         *
+         * @param array $hostPatterns A list of trusted host patterns
+         * @static 
+         */ 
+        public static function setTrustedHosts($hostPatterns)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
+        }
+        
+        /**
+         * Gets the list of trusted host patterns.
+         *
+         * @return array An array of trusted host patterns
+         * @static 
+         */ 
+        public static function getTrustedHosts()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::getTrustedHosts();
+        }
+        
+        /**
+         * Normalizes a query string.
+         * 
+         * It builds a normalized query string, where keys/value pairs are alphabetized,
+         * have consistent escaping and unneeded delimiters are removed.
+         *
+         * @param string $qs Query string
+         * @return string A normalized query string for the Request
+         * @static 
+         */ 
+        public static function normalizeQueryString($qs)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::normalizeQueryString($qs);
+        }
+        
+        /**
+         * Enables support for the _method request parameter to determine the intended HTTP method.
+         * 
+         * Be warned that enabling this feature might lead to CSRF issues in your code.
+         * Check that you are using CSRF tokens when required.
+         * If the HTTP method parameter override is enabled, an html-form with method "POST" can be altered
+         * and used to send a "PUT" or "DELETE" request via the _method request parameter.
+         * If these methods are not protected against CSRF, this presents a possible vulnerability.
+         * 
+         * The HTTP method can only be overridden when the real HTTP method is POST.
+         *
+         * @static 
+         */ 
+        public static function enableHttpMethodParameterOverride()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
+        }
+        
+        /**
+         * Checks whether support for the _method request parameter is enabled.
+         *
+         * @return bool True when the _method request parameter is enabled, false otherwise
+         * @static 
+         */ 
+        public static function getHttpMethodParameterOverride()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::getHttpMethodParameterOverride();
+        }
+        
+        /**
+         * Whether the request contains a Session which was started in one of the
+         * previous requests.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasPreviousSession()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasPreviousSession();
+        }
+        
+        /**
+         * Whether the request contains a Session object.
+         * 
+         * This method does not give any information about the state of the session object,
+         * like whether the session is started or not. It is just a way to check if this Request
+         * is associated with a Session instance.
+         *
+         * @return bool true when the Request contains a Session object, false otherwise
+         * @static 
+         */ 
+        public static function hasSession()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasSession();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function setSession($session)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSession($session);
+        }
+        
+        /**
+         * 
+         *
+         * @internal 
+         * @static 
+         */ 
+        public static function setSessionFactory($factory)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSessionFactory($factory);
+        }
+        
+        /**
+         * Returns the client IP addresses.
+         * 
+         * In the returned array the most trusted IP address is first, and the
+         * least trusted one last. The "real" client IP address is the last one,
+         * but this is also the least trusted one. Trusted proxies are stripped.
+         * 
+         * Use this method carefully; you should use getClientIp() instead.
+         *
+         * @return array The client IP addresses
+         * @see getClientIp()
+         * @static 
+         */ 
+        public static function getClientIps()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIps();
+        }
+        
+        /**
+         * Returns the client IP address.
+         * 
+         * This method can read the client IP address from the "X-Forwarded-For" header
+         * when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
+         * header value is a comma+space separated list of IP addresses, the left-most
+         * being the original client, and each successive proxy that passed the request
+         * adding the IP address where it received the request from.
+         * 
+         * If your reverse proxy uses a different header name than "X-Forwarded-For",
+         * ("Client-Ip" for instance), configure it via the $trustedHeaderSet
+         * argument of the Request::setTrustedProxies() method instead.
+         *
+         * @return string|null The client IP address
+         * @see getClientIps()
+         * @see https://wikipedia.org/wiki/X-Forwarded-For
+         * @static 
+         */ 
+        public static function getClientIp()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIp();
+        }
+        
+        /**
+         * Returns current script name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getScriptName()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScriptName();
+        }
+        
+        /**
+         * Returns the path being requested relative to the executed script.
+         * 
+         * The path info always starts with a /.
+         * 
+         * Suppose this request is instantiated from /mysite on localhost:
+         * 
+         *  * http://localhost/mysite              returns an empty string
+         *  * http://localhost/mysite/about        returns '/about'
+         *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'
+         *  * http://localhost/mysite/about?var=1  returns '/about'
+         *
+         * @return string The raw path (i.e. not urldecoded)
+         * @static 
+         */ 
+        public static function getPathInfo()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPathInfo();
+        }
+        
+        /**
+         * Returns the root path from which this request is executed.
+         * 
+         * Suppose that an index.php file instantiates this request object:
+         * 
+         *  * http://localhost/index.php         returns an empty string
+         *  * http://localhost/index.php/page    returns an empty string
+         *  * http://localhost/web/index.php     returns '/web'
+         *  * http://localhost/we%20b/index.php  returns '/we%20b'
+         *
+         * @return string The raw path (i.e. not urldecoded)
+         * @static 
+         */ 
+        public static function getBasePath()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBasePath();
+        }
+        
+        /**
+         * Returns the root URL from which this request is executed.
+         * 
+         * The base URL never ends with a /.
+         * 
+         * This is similar to getBasePath(), except that it also includes the
+         * script filename (e.g. index.php) if one exists.
+         *
+         * @return string The raw URL (i.e. not urldecoded)
+         * @static 
+         */ 
+        public static function getBaseUrl()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBaseUrl();
+        }
+        
+        /**
+         * Gets the request's scheme.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getScheme()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScheme();
+        }
+        
+        /**
+         * Returns the port on which the request is made.
+         * 
+         * This method can read the client port from the "X-Forwarded-Port" header
+         * when trusted proxies were set via "setTrustedProxies()".
+         * 
+         * The "X-Forwarded-Port" header must contain the client port.
+         *
+         * @return int|string can be a string if fetched from the server bag
+         * @static 
+         */ 
+        public static function getPort()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPort();
+        }
+        
+        /**
+         * Returns the user.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function getUser()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUser();
+        }
+        
+        /**
+         * Returns the password.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function getPassword()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPassword();
+        }
+        
+        /**
+         * Gets the user info.
+         *
+         * @return string A user name and, optionally, scheme-specific information about how to gain authorization to access the server
+         * @static 
+         */ 
+        public static function getUserInfo()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserInfo();
+        }
+        
+        /**
+         * Returns the HTTP host being requested.
+         * 
+         * The port name will be appended to the host if it's non-standard.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getHttpHost()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHttpHost();
+        }
+        
+        /**
+         * Returns the requested URI (path and query string).
+         *
+         * @return string The raw URI (i.e. not URI decoded)
+         * @static 
+         */ 
+        public static function getRequestUri()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestUri();
+        }
+        
+        /**
+         * Gets the scheme and HTTP host.
+         * 
+         * If the URL was called with basic authentication, the user
+         * and the password are not added to the generated string.
+         *
+         * @return string The scheme and HTTP host
+         * @static 
+         */ 
+        public static function getSchemeAndHttpHost()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSchemeAndHttpHost();
+        }
+        
+        /**
+         * Generates a normalized URI (URL) for the Request.
+         *
+         * @return string A normalized URI (URL) for the Request
+         * @see getQueryString()
+         * @static 
+         */ 
+        public static function getUri()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUri();
+        }
+        
+        /**
+         * Generates a normalized URI for the given path.
+         *
+         * @param string $path A path to use instead of the current one
+         * @return string The normalized URI for the path
+         * @static 
+         */ 
+        public static function getUriForPath($path)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUriForPath($path);
+        }
+        
+        /**
+         * Returns the path as relative reference from the current Request path.
+         * 
+         * Only the URIs path component (no schema, host etc.) is relevant and must be given.
+         * Both paths must be absolute and not contain relative parts.
+         * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.
+         * Furthermore, they can be used to reduce the link size in documents.
+         * 
+         * Example target paths, given a base path of "/a/b/c/d":
+         * - "/a/b/c/d"     -> ""
+         * - "/a/b/c/"      -> "./"
+         * - "/a/b/"        -> "../"
+         * - "/a/b/c/other" -> "other"
+         * - "/a/x/y"       -> "../../x/y"
+         *
+         * @param string $path The target path
+         * @return string The relative target path
+         * @static 
+         */ 
+        public static function getRelativeUriForPath($path)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRelativeUriForPath($path);
+        }
+        
+        /**
+         * Generates the normalized query string for the Request.
+         * 
+         * It builds a normalized query string, where keys/value pairs are alphabetized
+         * and have consistent escaping.
+         *
+         * @return string|null A normalized query string for the Request
+         * @static 
+         */ 
+        public static function getQueryString()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getQueryString();
+        }
+        
+        /**
+         * Checks whether the request is secure or not.
+         * 
+         * This method can read the client protocol from the "X-Forwarded-Proto" header
+         * when trusted proxies were set via "setTrustedProxies()".
+         * 
+         * The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isSecure()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isSecure();
+        }
+        
+        /**
+         * Returns the host name.
+         * 
+         * This method can read the client host name from the "X-Forwarded-Host" header
+         * when trusted proxies were set via "setTrustedProxies()".
+         * 
+         * The "X-Forwarded-Host" header must contain the client host name.
+         *
+         * @return string 
+         * @throws SuspiciousOperationException when the host name is invalid or not trusted
+         * @static 
+         */ 
+        public static function getHost()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHost();
+        }
+        
+        /**
+         * Sets the request method.
+         *
+         * @param string $method
+         * @static 
+         */ 
+        public static function setMethod($method)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setMethod($method);
+        }
+        
+        /**
+         * Gets the request "intended" method.
+         * 
+         * If the X-HTTP-Method-Override header is set, and if the method is a POST,
+         * then it is used to determine the "real" intended HTTP method.
+         * 
+         * The _method request parameter can also be used to determine the HTTP method,
+         * but only if enableHttpMethodParameterOverride() has been called.
+         * 
+         * The method is always an uppercased string.
+         *
+         * @return string The request method
+         * @see getRealMethod()
+         * @static 
+         */ 
+        public static function getMethod()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMethod();
+        }
+        
+        /**
+         * Gets the "real" request method.
+         *
+         * @return string The request method
+         * @see getMethod()
+         * @static 
+         */ 
+        public static function getRealMethod()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRealMethod();
+        }
+        
+        /**
+         * Gets the mime type associated with the format.
+         *
+         * @param string $format The format
+         * @return string|null The associated mime type (null if not found)
+         * @static 
+         */ 
+        public static function getMimeType($format)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMimeType($format);
+        }
+        
+        /**
+         * Gets the mime types associated with the format.
+         *
+         * @param string $format The format
+         * @return array The associated mime types
+         * @static 
+         */ 
+        public static function getMimeTypes($format)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        return \Illuminate\Http\Request::getMimeTypes($format);
+        }
+        
+        /**
+         * Gets the format associated with the mime type.
+         *
+         * @param string $mimeType The associated mime type
+         * @return string|null The format (null if not found)
+         * @static 
+         */ 
+        public static function getFormat($mimeType)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getFormat($mimeType);
+        }
+        
+        /**
+         * Associates a format with mime types.
+         *
+         * @param string $format The format
+         * @param string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)
+         * @static 
+         */ 
+        public static function setFormat($format, $mimeTypes)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setFormat($format, $mimeTypes);
+        }
+        
+        /**
+         * Gets the request format.
+         * 
+         * Here is the process to determine the format:
+         * 
+         *  * format defined by the user (with setRequestFormat())
+         *  * _format request attribute
+         *  * $default
+         *
+         * @see getPreferredFormat
+         * @param string|null $default The default format
+         * @return string|null The request format
+         * @static 
+         */ 
+        public static function getRequestFormat($default = 'html')
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestFormat($default);
+        }
+        
+        /**
+         * Sets the request format.
+         *
+         * @param string $format The request format
+         * @static 
+         */ 
+        public static function setRequestFormat($format)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRequestFormat($format);
+        }
+        
+        /**
+         * Gets the format associated with the request.
+         *
+         * @return string|null The format (null if no content type is present)
+         * @static 
+         */ 
+        public static function getContentType()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContentType();
+        }
+        
+        /**
+         * Sets the default locale.
+         *
+         * @param string $locale
+         * @static 
+         */ 
+        public static function setDefaultLocale($locale)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setDefaultLocale($locale);
+        }
+        
+        /**
+         * Get the default locale.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultLocale()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getDefaultLocale();
+        }
+        
+        /**
+         * Sets the locale.
+         *
+         * @param string $locale
+         * @static 
+         */ 
+        public static function setLocale($locale)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setLocale($locale);
+        }
+        
+        /**
+         * Get the locale.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getLocale()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLocale();
+        }
+        
+        /**
+         * Checks if the request method is of specified type.
+         *
+         * @param string $method Uppercase request method (GET, POST etc)
+         * @return bool 
+         * @static 
+         */ 
+        public static function isMethod($method)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethod($method);
+        }
+        
+        /**
+         * Checks whether or not the method is safe.
+         *
+         * @see https://tools.ietf.org/html/rfc7231#section-4.2.1
+         * @return bool 
+         * @static 
+         */ 
+        public static function isMethodSafe()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodSafe();
+        }
+        
+        /**
+         * Checks whether or not the method is idempotent.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isMethodIdempotent()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodIdempotent();
+        }
+        
+        /**
+         * Checks whether the method is cacheable or not.
+         *
+         * @see https://tools.ietf.org/html/rfc7231#section-4.2.3
+         * @return bool True for GET and HEAD, false otherwise
+         * @static 
+         */ 
+        public static function isMethodCacheable()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodCacheable();
+        }
+        
+        /**
+         * Returns the protocol version.
+         * 
+         * If the application is behind a proxy, the protocol version used in the
+         * requests between the client and the proxy and between the proxy and the
+         * server might be different. This returns the former (from the "Via" header)
+         * if the proxy is trusted (see "setTrustedProxies()"), otherwise it returns
+         * the latter (from the "SERVER_PROTOCOL" server parameter).
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getProtocolVersion()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getProtocolVersion();
+        }
+        
+        /**
+         * Returns the request body content.
+         *
+         * @param bool $asResource If true, a resource will be returned
+         * @return string|resource The request body content or a resource to read the body stream
+         * @throws \LogicException
+         * @static 
+         */ 
+        public static function getContent($asResource = false)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContent($asResource);
+        }
+        
+        /**
+         * Gets the Etags.
+         *
+         * @return array The entity tags
+         * @static 
+         */ 
+        public static function getETags()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getETags();
+        }
+        
+        /**
+         * 
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isNoCache()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isNoCache();
+        }
+        
+        /**
+         * Gets the preferred format for the response by inspecting, in the following order:
+         *   * the request format set using setRequestFormat
+         *   * the values of the Accept HTTP header
+         * 
+         * Note that if you use this method, you should send the "Vary: Accept" header
+         * in the response to prevent any issues with intermediary HTTP caches.
+         *
+         * @static 
+         */ 
+        public static function getPreferredFormat($default = 'html')
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPreferredFormat($default);
+        }
+        
+        /**
+         * Returns the preferred language.
+         *
+         * @param string[] $locales An array of ordered available locales
+         * @return string|null The preferred locale
+         * @static 
+         */ 
+        public static function getPreferredLanguage($locales = null)
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPreferredLanguage($locales);
+        }
+        
+        /**
+         * Gets a list of languages acceptable by the client browser.
+         *
+         * @return array Languages ordered in the user browser preferences
+         * @static 
+         */ 
+        public static function getLanguages()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLanguages();
+        }
+        
+        /**
+         * Gets a list of charsets acceptable by the client browser.
+         *
+         * @return array List of charsets in preferable order
+         * @static 
+         */ 
+        public static function getCharsets()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getCharsets();
+        }
+        
+        /**
+         * Gets a list of encodings acceptable by the client browser.
+         *
+         * @return array List of encodings in preferable order
+         * @static 
+         */ 
+        public static function getEncodings()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getEncodings();
+        }
+        
+        /**
+         * Gets a list of content types acceptable by the client browser.
+         *
+         * @return array List of content types in preferable order
+         * @static 
+         */ 
+        public static function getAcceptableContentTypes()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getAcceptableContentTypes();
+        }
+        
+        /**
+         * Returns true if the request is a XMLHttpRequest.
+         * 
+         * It works if your JavaScript library sets an X-Requested-With HTTP header.
+         * It is known to work with common JavaScript frameworks:
+         *
+         * @see https://wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript
+         * @return bool true if the request is an XMLHttpRequest, false otherwise
+         * @static 
+         */ 
+        public static function isXmlHttpRequest()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isXmlHttpRequest();
+        }
+        
+        /**
+         * Indicates whether this request originated from a trusted proxy.
+         * 
+         * This can be useful to determine whether or not to trust the
+         * contents of a proxy-specific header.
+         *
+         * @return bool true if the request came from a trusted proxy, false otherwise
+         * @static 
+         */ 
+        public static function isFromTrustedProxy()
+        {
+            //Method inherited from \Symfony\Component\HttpFoundation\Request            
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isFromTrustedProxy();
+        }
+        
+        /**
+         * Determine if the given content types match.
+         *
+         * @param string $actual
+         * @param string $type
+         * @return bool 
+         * @static 
+         */ 
+        public static function matchesType($actual, $type)
+        {
+                        return \Illuminate\Http\Request::matchesType($actual, $type);
+        }
+        
+        /**
+         * Determine if the request is sending JSON.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isJson()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isJson();
+        }
+        
+        /**
+         * Determine if the current request probably expects a JSON response.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function expectsJson()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->expectsJson();
+        }
+        
+        /**
+         * Determine if the current request is asking for JSON.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function wantsJson()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->wantsJson();
+        }
+        
+        /**
+         * Determines whether the current requests accepts a given content type.
+         *
+         * @param string|array $contentTypes
+         * @return bool 
+         * @static 
+         */ 
+        public static function accepts($contentTypes)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->accepts($contentTypes);
+        }
+        
+        /**
+         * Return the most suitable content type from the given array based on content negotiation.
+         *
+         * @param string|array $contentTypes
+         * @return string|null 
+         * @static 
+         */ 
+        public static function prefers($contentTypes)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefers($contentTypes);
+        }
+        
+        /**
+         * Determine if the current request accepts any content type.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function acceptsAnyContentType()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsAnyContentType();
+        }
+        
+        /**
+         * Determines whether a request accepts JSON.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function acceptsJson()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsJson();
+        }
+        
+        /**
+         * Determines whether a request accepts HTML.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function acceptsHtml()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsHtml();
+        }
+        
+        /**
+         * Get the data format expected in the response.
+         *
+         * @param string $default
+         * @return string 
+         * @static 
+         */ 
+        public static function format($default = 'html')
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->format($default);
+        }
+        
+        /**
+         * Retrieve an old input item.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array 
+         * @static 
+         */ 
+        public static function old($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->old($key, $default);
+        }
+        
+        /**
+         * Flash the input for the current request to the session.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flash()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flash();
+        }
+        
+        /**
+         * Flash only some of the input to the session.
+         *
+         * @param array|mixed $keys
+         * @return void 
+         * @static 
+         */ 
+        public static function flashOnly($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashOnly($keys);
+        }
+        
+        /**
+         * Flash only some of the input to the session.
+         *
+         * @param array|mixed $keys
+         * @return void 
+         * @static 
+         */ 
+        public static function flashExcept($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashExcept($keys);
+        }
+        
+        /**
+         * Flush all of the old input from the session.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flush()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flush();
+        }
+        
+        /**
+         * Retrieve a server variable from the request.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array|null 
+         * @static 
+         */ 
+        public static function server($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->server($key, $default);
+        }
+        
+        /**
+         * Determine if a header is set on the request.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasHeader($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasHeader($key);
+        }
+        
+        /**
+         * Retrieve a header from the request.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array|null 
+         * @static 
+         */ 
+        public static function header($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->header($key, $default);
+        }
+        
+        /**
+         * Get the bearer token from the request headers.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function bearerToken()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->bearerToken();
+        }
+        
+        /**
+         * Determine if the request contains a given input item key.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function exists($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->exists($key);
+        }
+        
+        /**
+         * Determine if the request contains a given input item key.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->has($key);
+        }
+        
+        /**
+         * Determine if the request contains any of the given inputs.
+         *
+         * @param string|array $keys
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasAny($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasAny($keys);
+        }
+        
+        /**
+         * Determine if the request contains a non-empty value for an input item.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function filled($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->filled($key);
+        }
+        
+        /**
+         * Determine if the request contains a non-empty value for any of the given inputs.
+         *
+         * @param string|array $keys
+         * @return bool 
+         * @static 
+         */ 
+        public static function anyFilled($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->anyFilled($keys);
+        }
+        
+        /**
+         * Determine if the request is missing a given input item key.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function missing($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->missing($key);
+        }
+        
+        /**
+         * Get the keys for all of the input and files.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function keys()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->keys();
+        }
+        
+        /**
+         * Get all of the input and files for the request.
+         *
+         * @param array|mixed|null $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function all($keys = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->all($keys);
+        }
+        
+        /**
+         * Retrieve an input item from the request.
+         *
+         * @param string|null $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function input($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->input($key, $default);
+        }
+        
+        /**
+         * Retrieve input as a boolean value.
+         * 
+         * Returns true when value is "1", "true", "on", and "yes". Otherwise, returns false.
+         *
+         * @param string|null $key
+         * @param bool $default
+         * @return bool 
+         * @static 
+         */ 
+        public static function boolean($key = null, $default = false)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->boolean($key, $default);
+        }
+        
+        /**
+         * Get a subset containing the provided keys with values from the input data.
+         *
+         * @param array|mixed $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function only($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->only($keys);
+        }
+        
+        /**
+         * Get all of the input except for a specified array of items.
+         *
+         * @param array|mixed $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function except($keys)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->except($keys);
+        }
+        
+        /**
+         * Retrieve a query string item from the request.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array|null 
+         * @static 
+         */ 
+        public static function query($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->query($key, $default);
+        }
+        
+        /**
+         * Retrieve a request payload item from the request.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array|null 
+         * @static 
+         */ 
+        public static function post($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->post($key, $default);
+        }
+        
+        /**
+         * Determine if a cookie is set on the request.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasCookie($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasCookie($key);
+        }
+        
+        /**
+         * Retrieve a cookie from the request.
+         *
+         * @param string|null $key
+         * @param string|array|null $default
+         * @return string|array|null 
+         * @static 
+         */ 
+        public static function cookie($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->cookie($key, $default);
+        }
+        
+        /**
+         * Get an array of all of the files on the request.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function allFiles()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->allFiles();
+        }
+        
+        /**
+         * Determine if the uploaded data contains a file.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasFile($key)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasFile($key);
+        }
+        
+        /**
+         * Retrieve a file from the request.
+         *
+         * @param string|null $key
+         * @param mixed $default
+         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null 
+         * @static 
+         */ 
+        public static function file($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->file($key, $default);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Http\Request::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Http\Request::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Http\Request::hasMacro($name);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function validate($rules, ...$params)
+        {
+                        return \Illuminate\Http\Request::validate($rules, ...$params);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function validateWithBag($errorBag, $rules, ...$params)
+        {
+                        return \Illuminate\Http\Request::validateWithBag($errorBag, $rules, ...$params);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function hasValidSignature($absolute = true)
+        {
+                        return \Illuminate\Http\Request::hasValidSignature($absolute);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Contracts\Routing\ResponseFactory
+     */ 
+    class Response {
+        
+        /**
+         * Create a new response instance.
+         *
+         * @param string $content
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\Response 
+         * @static 
+         */ 
+        public static function make($content = '', $status = 200, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->make($content, $status, $headers);
+        }
+        
+        /**
+         * Create a new "no content" response.
+         *
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\Response 
+         * @static 
+         */ 
+        public static function noContent($status = 204, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->noContent($status, $headers);
+        }
+        
+        /**
+         * Create a new response for a given view.
+         *
+         * @param string|array $view
+         * @param array $data
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\Response 
+         * @static 
+         */ 
+        public static function view($view, $data = [], $status = 200, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->view($view, $data, $status, $headers);
+        }
+        
+        /**
+         * Create a new JSON response instance.
+         *
+         * @param mixed $data
+         * @param int $status
+         * @param array $headers
+         * @param int $options
+         * @return \Illuminate\Http\JsonResponse 
+         * @static 
+         */ 
+        public static function json($data = [], $status = 200, $headers = [], $options = 0)
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->json($data, $status, $headers, $options);
+        }
+        
+        /**
+         * Create a new JSONP response instance.
+         *
+         * @param string $callback
+         * @param mixed $data
+         * @param int $status
+         * @param array $headers
+         * @param int $options
+         * @return \Illuminate\Http\JsonResponse 
+         * @static 
+         */ 
+        public static function jsonp($callback, $data = [], $status = 200, $headers = [], $options = 0)
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->jsonp($callback, $data, $status, $headers, $options);
+        }
+        
+        /**
+         * Create a new streamed response instance.
+         *
+         * @param \Closure $callback
+         * @param int $status
+         * @param array $headers
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
+         * @static 
+         */ 
+        public static function stream($callback, $status = 200, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->stream($callback, $status, $headers);
+        }
+        
+        /**
+         * Create a new streamed response instance as a file download.
+         *
+         * @param \Closure $callback
+         * @param string|null $name
+         * @param array $headers
+         * @param string|null $disposition
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
+         * @static 
+         */ 
+        public static function streamDownload($callback, $name = null, $headers = [], $disposition = 'attachment')
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->streamDownload($callback, $name, $headers, $disposition);
+        }
+        
+        /**
+         * Create a new file download response.
+         *
+         * @param \SplFileInfo|string $file
+         * @param string|null $name
+         * @param array $headers
+         * @param string|null $disposition
+         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
+         * @static 
+         */ 
+        public static function download($file, $name = null, $headers = [], $disposition = 'attachment')
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->download($file, $name, $headers, $disposition);
+        }
+        
+        /**
+         * Return the raw contents of a binary file.
+         *
+         * @param \SplFileInfo|string $file
+         * @param array $headers
+         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
+         * @static 
+         */ 
+        public static function file($file, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->file($file, $headers);
+        }
+        
+        /**
+         * Create a new redirect response to the given path.
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function redirectTo($path, $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectTo($path, $status, $headers, $secure);
+        }
+        
+        /**
+         * Create a new redirect response to a named route.
+         *
+         * @param string $route
+         * @param array $parameters
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function redirectToRoute($route, $parameters = [], $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToRoute($route, $parameters, $status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response to a controller action.
+         *
+         * @param string $action
+         * @param array $parameters
+         * @param int $status
+         * @param array $headers
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function redirectToAction($action, $parameters = [], $status = 302, $headers = [])
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToAction($action, $parameters, $status, $headers);
+        }
+        
+        /**
+         * Create a new redirect response, while putting the current URL in the session.
+         *
+         * @param string $path
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function redirectGuest($path, $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectGuest($path, $status, $headers, $secure);
+        }
+        
+        /**
+         * Create a new redirect response to the previously intended location.
+         *
+         * @param string $default
+         * @param int $status
+         * @param array $headers
+         * @param bool|null $secure
+         * @return \Illuminate\Http\RedirectResponse 
+         * @static 
+         */ 
+        public static function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToIntended($default, $status, $headers, $secure);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Routing\ResponseFactory::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Routing\ResponseFactory::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Routing\ResponseFactory::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @method static \Illuminate\Routing\RouteRegistrar prefix(string  $prefix)
+     * @method static \Illuminate\Routing\RouteRegistrar where(array  $where)
+     * @method static \Illuminate\Routing\RouteRegistrar middleware(array|string|null $middleware)
+     * @method static \Illuminate\Routing\RouteRegistrar as(string $value)
+     * @method static \Illuminate\Routing\RouteRegistrar domain(string $value)
+     * @method static \Illuminate\Routing\RouteRegistrar name(string $value)
+     * @method static \Illuminate\Routing\RouteRegistrar namespace(string $value)
+     * @see \Illuminate\Routing\Router
+     */ 
+    class Route {
+        
+        /**
+         * Register a new GET route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function get($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->get($uri, $action);
+        }
+        
+        /**
+         * Register a new POST route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function post($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->post($uri, $action);
+        }
+        
+        /**
+         * Register a new PUT route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function put($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->put($uri, $action);
+        }
+        
+        /**
+         * Register a new PATCH route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function patch($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->patch($uri, $action);
+        }
+        
+        /**
+         * Register a new DELETE route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function delete($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->delete($uri, $action);
+        }
+        
+        /**
+         * Register a new OPTIONS route with the router.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function options($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->options($uri, $action);
+        }
+        
+        /**
+         * Register a new route responding to all verbs.
+         *
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function any($uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->any($uri, $action);
+        }
+        
+        /**
+         * Register a new Fallback route with the router.
+         *
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function fallback($action)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->fallback($action);
+        }
+        
+        /**
+         * Create a redirect from one URI to another.
+         *
+         * @param string $uri
+         * @param string $destination
+         * @param int $status
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function redirect($uri, $destination, $status = 302)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->redirect($uri, $destination, $status);
+        }
+        
+        /**
+         * Create a permanent redirect from one URI to another.
+         *
+         * @param string $uri
+         * @param string $destination
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function permanentRedirect($uri, $destination)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->permanentRedirect($uri, $destination);
+        }
+        
+        /**
+         * Register a new route that returns a view.
+         *
+         * @param string $uri
+         * @param string $view
+         * @param array $data
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function view($uri, $view, $data = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->view($uri, $view, $data);
+        }
+        
+        /**
+         * Register a new route with the given verbs.
+         *
+         * @param array|string $methods
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function match($methods, $uri, $action = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->match($methods, $uri, $action);
+        }
+        
+        /**
+         * Register an array of resource controllers.
+         *
+         * @param array $resources
+         * @param array $options
+         * @return void 
+         * @static 
+         */ 
+        public static function resources($resources, $options = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resources($resources, $options);
+        }
+        
+        /**
+         * Route a resource to a controller.
+         *
+         * @param string $name
+         * @param string $controller
+         * @param array $options
+         * @return \Illuminate\Routing\PendingResourceRegistration 
+         * @static 
+         */ 
+        public static function resource($name, $controller, $options = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->resource($name, $controller, $options);
+        }
+        
+        /**
+         * Register an array of API resource controllers.
+         *
+         * @param array $resources
+         * @param array $options
+         * @return void 
+         * @static 
+         */ 
+        public static function apiResources($resources, $options = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->apiResources($resources, $options);
+        }
+        
+        /**
+         * Route an API resource to a controller.
+         *
+         * @param string $name
+         * @param string $controller
+         * @param array $options
+         * @return \Illuminate\Routing\PendingResourceRegistration 
+         * @static 
+         */ 
+        public static function apiResource($name, $controller, $options = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->apiResource($name, $controller, $options);
+        }
+        
+        /**
+         * Create a route group with shared attributes.
+         *
+         * @param array $attributes
+         * @param \Closure|string $routes
+         * @return void 
+         * @static 
+         */ 
+        public static function group($attributes, $routes)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->group($attributes, $routes);
+        }
+        
+        /**
+         * Merge the given array with the last group stack.
+         *
+         * @param array $new
+         * @return array 
+         * @static 
+         */ 
+        public static function mergeWithLastGroup($new)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->mergeWithLastGroup($new);
+        }
+        
+        /**
+         * Get the prefix from the last group on the stack.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getLastGroupPrefix()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getLastGroupPrefix();
+        }
+        
+        /**
+         * Add a route to the underlying route collection.
+         *
+         * @param array|string $methods
+         * @param string $uri
+         * @param \Closure|array|string|callable|null $action
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function addRoute($methods, $uri, $action)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->addRoute($methods, $uri, $action);
+        }
+        
+        /**
+         * Return the response returned by the given route.
+         *
+         * @param string $name
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function respondWithRoute($name)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->respondWithRoute($name);
+        }
+        
+        /**
+         * Dispatch the request to the application.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function dispatch($request)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->dispatch($request);
+        }
+        
+        /**
+         * Dispatch the request to a route and return the response.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function dispatchToRoute($request)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->dispatchToRoute($request);
+        }
+        
+        /**
+         * Gather the middleware for the given route with resolved class names.
+         *
+         * @param \Illuminate\Routing\Route $route
+         * @return array 
+         * @static 
+         */ 
+        public static function gatherRouteMiddleware($route)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->gatherRouteMiddleware($route);
+        }
+        
+        /**
+         * Create a response instance from the given value.
+         *
+         * @param \Symfony\Component\HttpFoundation\Request $request
+         * @param mixed $response
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function prepareResponse($request, $response)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->prepareResponse($request, $response);
+        }
+        
+        /**
+         * Static version of prepareResponse.
+         *
+         * @param \Symfony\Component\HttpFoundation\Request $request
+         * @param mixed $response
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function toResponse($request, $response)
+        {
+                        return \Illuminate\Routing\Router::toResponse($request, $response);
+        }
+        
+        /**
+         * Substitute the route bindings onto the route.
+         *
+         * @param \Illuminate\Routing\Route $route
+         * @return \Illuminate\Routing\Route 
+         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
+         * @static 
+         */ 
+        public static function substituteBindings($route)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->substituteBindings($route);
+        }
+        
+        /**
+         * Substitute the implicit Eloquent model bindings for the route.
+         *
+         * @param \Illuminate\Routing\Route $route
+         * @return void 
+         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
+         * @static 
+         */ 
+        public static function substituteImplicitBindings($route)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->substituteImplicitBindings($route);
+        }
+        
+        /**
+         * Register a route matched event listener.
+         *
+         * @param string|callable $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function matched($callback)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->matched($callback);
+        }
+        
+        /**
+         * Get all of the defined middleware short-hand names.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getMiddleware()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getMiddleware();
+        }
+        
+        /**
+         * Register a short-hand name for a middleware.
+         *
+         * @param string $name
+         * @param string $class
+         * @return \Illuminate\Routing\Router 
+         * @static 
+         */ 
+        public static function aliasMiddleware($name, $class)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->aliasMiddleware($name, $class);
+        }
+        
+        /**
+         * Check if a middlewareGroup with the given name exists.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMiddlewareGroup($name)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->hasMiddlewareGroup($name);
+        }
+        
+        /**
+         * Get all of the defined middleware groups.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getMiddlewareGroups()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getMiddlewareGroups();
+        }
+        
+        /**
+         * Register a group of middleware.
+         *
+         * @param string $name
+         * @param array $middleware
+         * @return \Illuminate\Routing\Router 
+         * @static 
+         */ 
+        public static function middlewareGroup($name, $middleware)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->middlewareGroup($name, $middleware);
+        }
+        
+        /**
+         * Add a middleware to the beginning of a middleware group.
+         * 
+         * If the middleware is already in the group, it will not be added again.
+         *
+         * @param string $group
+         * @param string $middleware
+         * @return \Illuminate\Routing\Router 
+         * @static 
+         */ 
+        public static function prependMiddlewareToGroup($group, $middleware)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->prependMiddlewareToGroup($group, $middleware);
+        }
+        
+        /**
+         * Add a middleware to the end of a middleware group.
+         * 
+         * If the middleware is already in the group, it will not be added again.
+         *
+         * @param string $group
+         * @param string $middleware
+         * @return \Illuminate\Routing\Router 
+         * @static 
+         */ 
+        public static function pushMiddlewareToGroup($group, $middleware)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->pushMiddlewareToGroup($group, $middleware);
+        }
+        
+        /**
+         * Add a new route parameter binder.
+         *
+         * @param string $key
+         * @param string|callable $binder
+         * @return void 
+         * @static 
+         */ 
+        public static function bind($key, $binder)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->bind($key, $binder);
+        }
+        
+        /**
+         * Register a model binder for a wildcard.
+         *
+         * @param string $key
+         * @param string $class
+         * @param \Closure|null $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function model($key, $class, $callback = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->model($key, $class, $callback);
+        }
+        
+        /**
+         * Get the binding callback for a given binding.
+         *
+         * @param string $key
+         * @return \Closure|null 
+         * @static 
+         */ 
+        public static function getBindingCallback($key)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getBindingCallback($key);
+        }
+        
+        /**
+         * Get the global "where" patterns.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getPatterns()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getPatterns();
+        }
+        
+        /**
+         * Set a global where pattern on all routes.
+         *
+         * @param string $key
+         * @param string $pattern
+         * @return void 
+         * @static 
+         */ 
+        public static function pattern($key, $pattern)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->pattern($key, $pattern);
+        }
+        
+        /**
+         * Set a group of global where patterns on all routes.
+         *
+         * @param array $patterns
+         * @return void 
+         * @static 
+         */ 
+        public static function patterns($patterns)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->patterns($patterns);
+        }
+        
+        /**
+         * Determine if the router currently has a group stack.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasGroupStack()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->hasGroupStack();
+        }
+        
+        /**
+         * Get the current group stack for the router.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getGroupStack()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getGroupStack();
+        }
+        
+        /**
+         * Get a route parameter for the current route.
+         *
+         * @param string $key
+         * @param string|null $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function input($key, $default = null)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->input($key, $default);
+        }
+        
+        /**
+         * Get the request currently being dispatched.
+         *
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function getCurrentRequest()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getCurrentRequest();
+        }
+        
+        /**
+         * Get the currently dispatched route instance.
+         *
+         * @return \Illuminate\Routing\Route 
+         * @static 
+         */ 
+        public static function getCurrentRoute()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getCurrentRoute();
+        }
+        
+        /**
+         * Get the currently dispatched route instance.
+         *
+         * @return \Illuminate\Routing\Route|null 
+         * @static 
+         */ 
+        public static function current()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->current();
+        }
+        
+        /**
+         * Check if a route with the given name exists.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($name)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->has($name);
+        }
+        
+        /**
+         * Get the current route name.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function currentRouteName()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteName();
+        }
+        
+        /**
+         * Alias for the "currentRouteNamed" method.
+         *
+         * @param mixed $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function is(...$patterns)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->is(...$patterns);
+        }
+        
+        /**
+         * Determine if the current route matches a pattern.
+         *
+         * @param mixed $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function currentRouteNamed(...$patterns)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteNamed(...$patterns);
+        }
+        
+        /**
+         * Get the current route action.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function currentRouteAction()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteAction();
+        }
+        
+        /**
+         * Alias for the "currentRouteUses" method.
+         *
+         * @param array $patterns
+         * @return bool 
+         * @static 
+         */ 
+        public static function uses(...$patterns)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->uses(...$patterns);
+        }
+        
+        /**
+         * Determine if the current route action matches a given action.
+         *
+         * @param string $action
+         * @return bool 
+         * @static 
+         */ 
+        public static function currentRouteUses($action)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteUses($action);
+        }
+        
+        /**
+         * Register the typical authentication routes for an application.
+         *
+         * @param array $options
+         * @return void 
+         * @static 
+         */ 
+        public static function auth($options = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->auth($options);
+        }
+        
+        /**
+         * Register the typical reset password routes for an application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function resetPassword()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resetPassword();
+        }
+        
+        /**
+         * Register the typical confirm password routes for an application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function confirmPassword()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->confirmPassword();
+        }
+        
+        /**
+         * Register the typical email verification routes for an application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function emailVerification()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->emailVerification();
+        }
+        
+        /**
+         * Set the unmapped global resource parameters to singular.
+         *
+         * @param bool $singular
+         * @return void 
+         * @static 
+         */ 
+        public static function singularResourceParameters($singular = true)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->singularResourceParameters($singular);
+        }
+        
+        /**
+         * Set the global resource parameter mapping.
+         *
+         * @param array $parameters
+         * @return void 
+         * @static 
+         */ 
+        public static function resourceParameters($parameters = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resourceParameters($parameters);
+        }
+        
+        /**
+         * Get or set the verbs used in the resource URIs.
+         *
+         * @param array $verbs
+         * @return array|null 
+         * @static 
+         */ 
+        public static function resourceVerbs($verbs = [])
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->resourceVerbs($verbs);
+        }
+        
+        /**
+         * Get the underlying route collection.
+         *
+         * @return \Illuminate\Routing\RouteCollection 
+         * @static 
+         */ 
+        public static function getRoutes()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getRoutes();
+        }
+        
+        /**
+         * Set the route collection instance.
+         *
+         * @param \Illuminate\Routing\RouteCollection $routes
+         * @return void 
+         * @static 
+         */ 
+        public static function setRoutes($routes)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->setRoutes($routes);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Routing\Router::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Routing\Router::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Routing\Router::hasMacro($name);
+        }
+        
+        /**
+         * Dynamically handle calls to the class.
+         *
+         * @param string $method
+         * @param array $parameters
+         * @return mixed 
+         * @throws \BadMethodCallException
+         * @static 
+         */ 
+        public static function macroCall($method, $parameters)
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->macroCall($method, $parameters);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Database\Schema\Builder
+     */ 
+    class Schema {
+        
+        /**
+         * Determine if the given table exists.
+         *
+         * @param string $table
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasTable($table)
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasTable($table);
+        }
+        
+        /**
+         * Get the column listing for a given table.
+         *
+         * @param string $table
+         * @return array 
+         * @static 
+         */ 
+        public static function getColumnListing($table)
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getColumnListing($table);
+        }
+        
+        /**
+         * Drop all tables from the database.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function dropAllTables()
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropAllTables();
+        }
+        
+        /**
+         * Drop all views from the database.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function dropAllViews()
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropAllViews();
+        }
+        
+        /**
+         * Get all of the table names for the database.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getAllTables()
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getAllTables();
+        }
+        
+        /**
+         * Get all of the view names for the database.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getAllViews()
+        {
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getAllViews();
+        }
+        
+        /**
+         * Set the default string length for migrations.
+         *
+         * @param int $length
+         * @return void 
+         * @static 
+         */ 
+        public static function defaultStringLength($length)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        \Illuminate\Database\Schema\MySqlBuilder::defaultStringLength($length);
+        }
+        
+        /**
+         * Determine if the given table has a given column.
+         *
+         * @param string $table
+         * @param string $column
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasColumn($table, $column)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasColumn($table, $column);
+        }
+        
+        /**
+         * Determine if the given table has given columns.
+         *
+         * @param string $table
+         * @param array $columns
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasColumns($table, $columns)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasColumns($table, $columns);
+        }
+        
+        /**
+         * Get the data type for the given column name.
+         *
+         * @param string $table
+         * @param string $column
+         * @return string 
+         * @static 
+         */ 
+        public static function getColumnType($table, $column)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getColumnType($table, $column);
+        }
+        
+        /**
+         * Modify a table on the schema.
+         *
+         * @param string $table
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function table($table, $callback)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->table($table, $callback);
+        }
+        
+        /**
+         * Create a new table on the schema.
+         *
+         * @param string $table
+         * @param \Closure $callback
+         * @return void 
+         * @static 
+         */ 
+        public static function create($table, $callback)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->create($table, $callback);
+        }
+        
+        /**
+         * Drop a table from the schema.
+         *
+         * @param string $table
+         * @return void 
+         * @static 
+         */ 
+        public static function drop($table)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->drop($table);
+        }
+        
+        /**
+         * Drop a table from the schema if it exists.
+         *
+         * @param string $table
+         * @return void 
+         * @static 
+         */ 
+        public static function dropIfExists($table)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropIfExists($table);
+        }
+        
+        /**
+         * Drop all types from the database.
+         *
+         * @return void 
+         * @throws \LogicException
+         * @static 
+         */ 
+        public static function dropAllTypes()
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropAllTypes();
+        }
+        
+        /**
+         * Rename a table on the schema.
+         *
+         * @param string $from
+         * @param string $to
+         * @return void 
+         * @static 
+         */ 
+        public static function rename($from, $to)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->rename($from, $to);
+        }
+        
+        /**
+         * Enable foreign key constraints.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function enableForeignKeyConstraints()
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->enableForeignKeyConstraints();
+        }
+        
+        /**
+         * Disable foreign key constraints.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function disableForeignKeyConstraints()
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->disableForeignKeyConstraints();
+        }
+        
+        /**
+         * Register a custom Doctrine mapping type.
+         *
+         * @param string $class
+         * @param string $name
+         * @param string $type
+         * @return void 
+         * @throws \Doctrine\DBAL\DBALException
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function registerCustomDoctrineType($class, $name, $type)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->registerCustomDoctrineType($class, $name, $type);
+        }
+        
+        /**
+         * Get the database connection instance.
+         *
+         * @return \Illuminate\Database\Connection 
+         * @static 
+         */ 
+        public static function getConnection()
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getConnection();
+        }
+        
+        /**
+         * Set the database connection instance.
+         *
+         * @param \Illuminate\Database\Connection $connection
+         * @return \Illuminate\Database\Schema\MySqlBuilder 
+         * @static 
+         */ 
+        public static function setConnection($connection)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->setConnection($connection);
+        }
+        
+        /**
+         * Set the Schema Blueprint resolver callback.
+         *
+         * @param \Closure $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function blueprintResolver($resolver)
+        {
+            //Method inherited from \Illuminate\Database\Schema\Builder            
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->blueprintResolver($resolver);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Session\SessionManager
+     * @see \Illuminate\Session\Store
+     */ 
+    class Session {
+        
+        /**
+         * Get the session configuration.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getSessionConfig()
+        {
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getSessionConfig();
+        }
+        
+        /**
+         * Get the default session driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Set the default session driver name.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setDefaultDriver($name)
+        {
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Get a driver instance.
+         *
+         * @param string $driver
+         * @return mixed 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function driver($driver = null)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->driver($driver);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Session\SessionManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Get all of the created "drivers".
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getDrivers()
+        {
+            //Method inherited from \Illuminate\Support\Manager            
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getDrivers();
+        }
+        
+        /**
+         * Start the session, reading the data from a handler.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function start()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->start();
+        }
+        
+        /**
+         * Save the session data to storage.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function save()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->save();
+        }
+        
+        /**
+         * Age the flash data for the session.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function ageFlashData()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->ageFlashData();
+        }
+        
+        /**
+         * Get all of the session data.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function all()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->all();
+        }
+        
+        /**
+         * Get a subset of the session data.
+         *
+         * @param array $keys
+         * @return array 
+         * @static 
+         */ 
+        public static function only($keys)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->only($keys);
+        }
+        
+        /**
+         * Checks if a key exists.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function exists($key)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->exists($key);
+        }
+        
+        /**
+         * Checks if a key is present and not null.
+         *
+         * @param string|array $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function has($key)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->has($key);
+        }
+        
+        /**
+         * Get an item from the session.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function get($key, $default = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->get($key, $default);
+        }
+        
+        /**
+         * Get the value of a given key and then forget it.
+         *
+         * @param string $key
+         * @param string|null $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function pull($key, $default = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->pull($key, $default);
+        }
+        
+        /**
+         * Determine if the session contains old input.
+         *
+         * @param string|null $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasOldInput($key = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->hasOldInput($key);
+        }
+        
+        /**
+         * Get the requested item from the flashed input array.
+         *
+         * @param string|null $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getOldInput($key = null, $default = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getOldInput($key, $default);
+        }
+        
+        /**
+         * Replace the given session attributes entirely.
+         *
+         * @param array $attributes
+         * @return void 
+         * @static 
+         */ 
+        public static function replace($attributes)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->replace($attributes);
+        }
+        
+        /**
+         * Put a key / value pair or array of key / value pairs in the session.
+         *
+         * @param string|array $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function put($key, $value = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->put($key, $value);
+        }
+        
+        /**
+         * Get an item from the session, or store the default value.
+         *
+         * @param string $key
+         * @param \Closure $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function remember($key, $callback)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->remember($key, $callback);
+        }
+        
+        /**
+         * Push a value onto a session array.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function push($key, $value)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->push($key, $value);
+        }
+        
+        /**
+         * Increment the value of an item in the session.
+         *
+         * @param string $key
+         * @param int $amount
+         * @return mixed 
+         * @static 
+         */ 
+        public static function increment($key, $amount = 1)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->increment($key, $amount);
+        }
+        
+        /**
+         * Decrement the value of an item in the session.
+         *
+         * @param string $key
+         * @param int $amount
+         * @return int 
+         * @static 
+         */ 
+        public static function decrement($key, $amount = 1)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->decrement($key, $amount);
+        }
+        
+        /**
+         * Flash a key / value pair to the session.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function flash($key, $value = true)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flash($key, $value);
+        }
+        
+        /**
+         * Flash a key / value pair to the session for immediate use.
+         *
+         * @param string $key
+         * @param mixed $value
+         * @return void 
+         * @static 
+         */ 
+        public static function now($key, $value)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->now($key, $value);
+        }
+        
+        /**
+         * Reflash all of the session flash data.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function reflash()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->reflash();
+        }
+        
+        /**
+         * Reflash a subset of the current flash data.
+         *
+         * @param array|mixed $keys
+         * @return void 
+         * @static 
+         */ 
+        public static function keep($keys = null)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->keep($keys);
+        }
+        
+        /**
+         * Flash an input array to the session.
+         *
+         * @param array $value
+         * @return void 
+         * @static 
+         */ 
+        public static function flashInput($value)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flashInput($value);
+        }
+        
+        /**
+         * Remove an item from the session, returning its value.
+         *
+         * @param string $key
+         * @return mixed 
+         * @static 
+         */ 
+        public static function remove($key)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->remove($key);
+        }
+        
+        /**
+         * Remove one or many items from the session.
+         *
+         * @param string|array $keys
+         * @return void 
+         * @static 
+         */ 
+        public static function forget($keys)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->forget($keys);
+        }
+        
+        /**
+         * Remove all of the items from the session.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flush()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flush();
+        }
+        
+        /**
+         * Flush the session data and regenerate the ID.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function invalidate()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->invalidate();
+        }
+        
+        /**
+         * Generate a new session identifier.
+         *
+         * @param bool $destroy
+         * @return bool 
+         * @static 
+         */ 
+        public static function regenerate($destroy = false)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->regenerate($destroy);
+        }
+        
+        /**
+         * Generate a new session ID for the session.
+         *
+         * @param bool $destroy
+         * @return bool 
+         * @static 
+         */ 
+        public static function migrate($destroy = false)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->migrate($destroy);
+        }
+        
+        /**
+         * Determine if the session has been started.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function isStarted()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->isStarted();
+        }
+        
+        /**
+         * Get the name of the session.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getName()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getName();
+        }
+        
+        /**
+         * Set the name of the session.
+         *
+         * @param string $name
+         * @return void 
+         * @static 
+         */ 
+        public static function setName($name)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setName($name);
+        }
+        
+        /**
+         * Get the current session ID.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getId()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getId();
+        }
+        
+        /**
+         * Set the session ID.
+         *
+         * @param string $id
+         * @return void 
+         * @static 
+         */ 
+        public static function setId($id)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setId($id);
+        }
+        
+        /**
+         * Determine if this is a valid session ID.
+         *
+         * @param string $id
+         * @return bool 
+         * @static 
+         */ 
+        public static function isValidId($id)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->isValidId($id);
+        }
+        
+        /**
+         * Set the existence of the session on the handler if applicable.
+         *
+         * @param bool $value
+         * @return void 
+         * @static 
+         */ 
+        public static function setExists($value)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setExists($value);
+        }
+        
+        /**
+         * Get the CSRF token value.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function token()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->token();
+        }
+        
+        /**
+         * Regenerate the CSRF token value.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function regenerateToken()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->regenerateToken();
+        }
+        
+        /**
+         * Get the previous URL from the session.
+         *
+         * @return string|null 
+         * @static 
+         */ 
+        public static function previousUrl()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->previousUrl();
+        }
+        
+        /**
+         * Set the "previous" URL in the session.
+         *
+         * @param string $url
+         * @return void 
+         * @static 
+         */ 
+        public static function setPreviousUrl($url)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setPreviousUrl($url);
+        }
+        
+        /**
+         * Get the underlying session handler implementation.
+         *
+         * @return \SessionHandlerInterface 
+         * @static 
+         */ 
+        public static function getHandler()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getHandler();
+        }
+        
+        /**
+         * Determine if the session handler needs a request.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function handlerNeedsRequest()
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->handlerNeedsRequest();
+        }
+        
+        /**
+         * Set the request on the handler instance.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @return void 
+         * @static 
+         */ 
+        public static function setRequestOnHandler($request)
+        {
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setRequestOnHandler($request);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Filesystem\FilesystemManager
+     */ 
+    class Storage {
+        
+        /**
+         * Get a filesystem instance.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function drive($name = null)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->drive($name);
+        }
+        
+        /**
+         * Get a filesystem instance.
+         *
+         * @param string|null $name
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function disk($name = null)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->disk($name);
+        }
+        
+        /**
+         * Get a default cloud filesystem instance.
+         *
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function cloud()
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->cloud();
+        }
+        
+        /**
+         * Create an instance of the local driver.
+         *
+         * @param array $config
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function createLocalDriver($config)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createLocalDriver($config);
+        }
+        
+        /**
+         * Create an instance of the ftp driver.
+         *
+         * @param array $config
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function createFtpDriver($config)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createFtpDriver($config);
+        }
+        
+        /**
+         * Create an instance of the sftp driver.
+         *
+         * @param array $config
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function createSftpDriver($config)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createSftpDriver($config);
+        }
+        
+        /**
+         * Create an instance of the Amazon S3 driver.
+         *
+         * @param array $config
+         * @return \Illuminate\Contracts\Filesystem\Cloud 
+         * @static 
+         */ 
+        public static function createS3Driver($config)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createS3Driver($config);
+        }
+        
+        /**
+         * Set the given disk instance.
+         *
+         * @param string $name
+         * @param mixed $disk
+         * @return \Illuminate\Filesystem\FilesystemManager 
+         * @static 
+         */ 
+        public static function set($name, $disk)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->set($name, $disk);
+        }
+        
+        /**
+         * Get the default driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultDriver()
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->getDefaultDriver();
+        }
+        
+        /**
+         * Get the default cloud driver name.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getDefaultCloudDriver()
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->getDefaultCloudDriver();
+        }
+        
+        /**
+         * Unset the given disk instances.
+         *
+         * @param array|string $disk
+         * @return \Illuminate\Filesystem\FilesystemManager 
+         * @static 
+         */ 
+        public static function forgetDisk($disk)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->forgetDisk($disk);
+        }
+        
+        /**
+         * Register a custom driver creator Closure.
+         *
+         * @param string $driver
+         * @param \Closure $callback
+         * @return \Illuminate\Filesystem\FilesystemManager 
+         * @static 
+         */ 
+        public static function extend($driver, $callback)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->extend($driver, $callback);
+        }
+        
+        /**
+         * Assert that the given file exists.
+         *
+         * @param string|array $path
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function assertExists($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->assertExists($path);
+        }
+        
+        /**
+         * Assert that the given file does not exist.
+         *
+         * @param string|array $path
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
+         * @static 
+         */ 
+        public static function assertMissing($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->assertMissing($path);
+        }
+        
+        /**
+         * Determine if a file exists.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function exists($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->exists($path);
+        }
+        
+        /**
+         * Determine if a file or directory is missing.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function missing($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->missing($path);
+        }
+        
+        /**
+         * Get the full path for the file at the given "short" path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function path($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->path($path);
+        }
+        
+        /**
+         * Get the contents of a file.
+         *
+         * @param string $path
+         * @return string 
+         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
+         * @static 
+         */ 
+        public static function get($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->get($path);
+        }
+        
+        /**
+         * Create a streamed response for a given file.
+         *
+         * @param string $path
+         * @param string|null $name
+         * @param array|null $headers
+         * @param string|null $disposition
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
+         * @static 
+         */ 
+        public static function response($path, $name = null, $headers = [], $disposition = 'inline')
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->response($path, $name, $headers, $disposition);
+        }
+        
+        /**
+         * Create a streamed download response for a given file.
+         *
+         * @param string $path
+         * @param string|null $name
+         * @param array|null $headers
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
+         * @static 
+         */ 
+        public static function download($path, $name = null, $headers = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->download($path, $name, $headers);
+        }
+        
+        /**
+         * Write the contents of a file.
+         *
+         * @param string $path
+         * @param string|resource $contents
+         * @param mixed $options
+         * @return bool 
+         * @static 
+         */ 
+        public static function put($path, $contents, $options = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->put($path, $contents, $options);
+        }
+        
+        /**
+         * Store the uploaded file on the disk.
+         *
+         * @param string $path
+         * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
+         * @param array $options
+         * @return string|false 
+         * @static 
+         */ 
+        public static function putFile($path, $file, $options = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->putFile($path, $file, $options);
+        }
+        
+        /**
+         * Store the uploaded file on the disk with a given name.
+         *
+         * @param string $path
+         * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
+         * @param string $name
+         * @param array $options
+         * @return string|false 
+         * @static 
+         */ 
+        public static function putFileAs($path, $file, $name, $options = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->putFileAs($path, $file, $name, $options);
+        }
+        
+        /**
+         * Get the visibility for the given path.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function getVisibility($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getVisibility($path);
+        }
+        
+        /**
+         * Set the visibility for the given path.
+         *
+         * @param string $path
+         * @param string $visibility
+         * @return bool 
+         * @static 
+         */ 
+        public static function setVisibility($path, $visibility)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->setVisibility($path, $visibility);
+        }
+        
+        /**
+         * Prepend to a file.
+         *
+         * @param string $path
+         * @param string $data
+         * @param string $separator
+         * @return bool 
+         * @static 
+         */ 
+        public static function prepend($path, $data, $separator = '
+')
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->prepend($path, $data, $separator);
+        }
+        
+        /**
+         * Append to a file.
+         *
+         * @param string $path
+         * @param string $data
+         * @param string $separator
+         * @return bool 
+         * @static 
+         */ 
+        public static function append($path, $data, $separator = '
+')
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->append($path, $data, $separator);
+        }
+        
+        /**
+         * Delete the file at a given path.
+         *
+         * @param string|array $paths
+         * @return bool 
+         * @static 
+         */ 
+        public static function delete($paths)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->delete($paths);
+        }
+        
+        /**
+         * Copy a file to a new location.
+         *
+         * @param string $from
+         * @param string $to
+         * @return bool 
+         * @static 
+         */ 
+        public static function copy($from, $to)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->copy($from, $to);
+        }
+        
+        /**
+         * Move a file to a new location.
+         *
+         * @param string $from
+         * @param string $to
+         * @return bool 
+         * @static 
+         */ 
+        public static function move($from, $to)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->move($from, $to);
+        }
+        
+        /**
+         * Get the file size of a given file.
+         *
+         * @param string $path
+         * @return int 
+         * @static 
+         */ 
+        public static function size($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->size($path);
+        }
+        
+        /**
+         * Get the mime-type of a given file.
+         *
+         * @param string $path
+         * @return string|false 
+         * @static 
+         */ 
+        public static function mimeType($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->mimeType($path);
+        }
+        
+        /**
+         * Get the file's last modification time.
+         *
+         * @param string $path
+         * @return int 
+         * @static 
+         */ 
+        public static function lastModified($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->lastModified($path);
+        }
+        
+        /**
+         * Get the URL for the file at the given path.
+         *
+         * @param string $path
+         * @return string 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function url($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->url($path);
+        }
+        
+        /**
+         * Get a resource to read the file.
+         *
+         * @param string $path
+         * @return resource|null The path resource or null on failure.
+         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
+         * @static 
+         */ 
+        public static function readStream($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->readStream($path);
+        }
+        
+        /**
+         * Write a new file using a stream.
+         *
+         * @param string $path
+         * @param resource $resource
+         * @param array $options
+         * @return bool 
+         * @throws \InvalidArgumentException If $resource is not a file handle.
+         * @throws \Illuminate\Contracts\Filesystem\FileExistsException
+         * @static 
+         */ 
+        public static function writeStream($path, $resource, $options = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->writeStream($path, $resource, $options);
+        }
+        
+        /**
+         * Get a temporary URL for the file at the given path.
+         *
+         * @param string $path
+         * @param \DateTimeInterface $expiration
+         * @param array $options
+         * @return string 
+         * @throws \RuntimeException
+         * @static 
+         */ 
+        public static function temporaryUrl($path, $expiration, $options = [])
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->temporaryUrl($path, $expiration, $options);
+        }
+        
+        /**
+         * Get a temporary URL for the file at the given path.
+         *
+         * @param \League\Flysystem\AwsS3v3\AwsS3Adapter $adapter
+         * @param string $path
+         * @param \DateTimeInterface $expiration
+         * @param array $options
+         * @return string 
+         * @static 
+         */ 
+        public static function getAwsTemporaryUrl($adapter, $path, $expiration, $options)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getAwsTemporaryUrl($adapter, $path, $expiration, $options);
+        }
+        
+        /**
+         * Get an array of all files in a directory.
+         *
+         * @param string|null $directory
+         * @param bool $recursive
+         * @return array 
+         * @static 
+         */ 
+        public static function files($directory = null, $recursive = false)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->files($directory, $recursive);
+        }
+        
+        /**
+         * Get all of the files from the given directory (recursive).
+         *
+         * @param string|null $directory
+         * @return array 
+         * @static 
+         */ 
+        public static function allFiles($directory = null)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->allFiles($directory);
+        }
+        
+        /**
+         * Get all of the directories within a given directory.
+         *
+         * @param string|null $directory
+         * @param bool $recursive
+         * @return array 
+         * @static 
+         */ 
+        public static function directories($directory = null, $recursive = false)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->directories($directory, $recursive);
+        }
+        
+        /**
+         * Get all (recursive) of the directories within a given directory.
+         *
+         * @param string|null $directory
+         * @return array 
+         * @static 
+         */ 
+        public static function allDirectories($directory = null)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->allDirectories($directory);
+        }
+        
+        /**
+         * Create a directory.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function makeDirectory($path)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->makeDirectory($path);
+        }
+        
+        /**
+         * Recursively delete a directory.
+         *
+         * @param string $directory
+         * @return bool 
+         * @static 
+         */ 
+        public static function deleteDirectory($directory)
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->deleteDirectory($directory);
+        }
+        
+        /**
+         * Flush the Flysystem cache.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushCache()
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        $instance->flushCache();
+        }
+        
+        /**
+         * Get the Flysystem driver.
+         *
+         * @return \League\Flysystem\FilesystemInterface 
+         * @static 
+         */ 
+        public static function getDriver()
+        {
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getDriver();
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Routing\UrlGenerator
+     */ 
+    class URL {
+        
+        /**
+         * Get the full URL for the current request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function full()
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->full();
+        }
+        
+        /**
+         * Get the current URL for the request.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function current()
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->current();
+        }
+        
+        /**
+         * Get the URL for the previous request.
+         *
+         * @param mixed $fallback
+         * @return string 
+         * @static 
+         */ 
+        public static function previous($fallback = false)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->previous($fallback);
+        }
+        
+        /**
+         * Generate an absolute URL to the given path.
+         *
+         * @param string $path
+         * @param mixed $extra
+         * @param bool|null $secure
+         * @return string 
+         * @static 
+         */ 
+        public static function to($path, $extra = [], $secure = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->to($path, $extra, $secure);
+        }
+        
+        /**
+         * Generate a secure, absolute URL to the given path.
+         *
+         * @param string $path
+         * @param array $parameters
+         * @return string 
+         * @static 
+         */ 
+        public static function secure($path, $parameters = [])
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->secure($path, $parameters);
+        }
+        
+        /**
+         * Generate the URL to an application asset.
+         *
+         * @param string $path
+         * @param bool|null $secure
+         * @return string 
+         * @static 
+         */ 
+        public static function asset($path, $secure = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->asset($path, $secure);
+        }
+        
+        /**
+         * Generate the URL to a secure asset.
+         *
+         * @param string $path
+         * @return string 
+         * @static 
+         */ 
+        public static function secureAsset($path)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->secureAsset($path);
+        }
+        
+        /**
+         * Generate the URL to an asset from a custom root domain such as CDN, etc.
+         *
+         * @param string $root
+         * @param string $path
+         * @param bool|null $secure
+         * @return string 
+         * @static 
+         */ 
+        public static function assetFrom($root, $path, $secure = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->assetFrom($root, $path, $secure);
+        }
+        
+        /**
+         * Get the default scheme for a raw URL.
+         *
+         * @param bool|null $secure
+         * @return string 
+         * @static 
+         */ 
+        public static function formatScheme($secure = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatScheme($secure);
+        }
+        
+        /**
+         * Create a signed route URL for a named route.
+         *
+         * @param string $name
+         * @param array $parameters
+         * @param \DateTimeInterface|\DateInterval|int|null $expiration
+         * @param bool $absolute
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function signedRoute($name, $parameters = [], $expiration = null, $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->signedRoute($name, $parameters, $expiration, $absolute);
+        }
+        
+        /**
+         * Create a temporary signed route URL for a named route.
+         *
+         * @param string $name
+         * @param \DateTimeInterface|\DateInterval|int $expiration
+         * @param array $parameters
+         * @param bool $absolute
+         * @return string 
+         * @static 
+         */ 
+        public static function temporarySignedRoute($name, $expiration, $parameters = [], $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->temporarySignedRoute($name, $expiration, $parameters, $absolute);
+        }
+        
+        /**
+         * Determine if the given request has a valid signature.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @param bool $absolute
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasValidSignature($request, $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->hasValidSignature($request, $absolute);
+        }
+        
+        /**
+         * Determine if the signature from the given request matches the URL.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @param bool $absolute
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasCorrectSignature($request, $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->hasCorrectSignature($request, $absolute);
+        }
+        
+        /**
+         * Determine if the expires timestamp from the given request is not from the past.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @return bool 
+         * @static 
+         */ 
+        public static function signatureHasNotExpired($request)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->signatureHasNotExpired($request);
+        }
+        
+        /**
+         * Get the URL to a named route.
+         *
+         * @param string $name
+         * @param mixed $parameters
+         * @param bool $absolute
+         * @return string 
+         * @throws \Symfony\Component\Routing\Exception\RouteNotFoundException
+         * @static 
+         */ 
+        public static function route($name, $parameters = [], $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->route($name, $parameters, $absolute);
+        }
+        
+        /**
+         * Get the URL for a given route instance.
+         *
+         * @param \Illuminate\Routing\Route $route
+         * @param mixed $parameters
+         * @param bool $absolute
+         * @return string 
+         * @throws \Illuminate\Routing\Exceptions\UrlGenerationException
+         * @static 
+         */ 
+        public static function toRoute($route, $parameters, $absolute)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->toRoute($route, $parameters, $absolute);
+        }
+        
+        /**
+         * Get the URL to a controller action.
+         *
+         * @param string|array $action
+         * @param mixed $parameters
+         * @param bool $absolute
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function action($action, $parameters = [], $absolute = true)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->action($action, $parameters, $absolute);
+        }
+        
+        /**
+         * Format the array of URL parameters.
+         *
+         * @param mixed|array $parameters
+         * @return array 
+         * @static 
+         */ 
+        public static function formatParameters($parameters)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatParameters($parameters);
+        }
+        
+        /**
+         * Get the base URL for the request.
+         *
+         * @param string $scheme
+         * @param string|null $root
+         * @return string 
+         * @static 
+         */ 
+        public static function formatRoot($scheme, $root = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatRoot($scheme, $root);
+        }
+        
+        /**
+         * Format the given URL segments into a single URL.
+         *
+         * @param string $root
+         * @param string $path
+         * @param \Illuminate\Routing\Route|null $route
+         * @return string 
+         * @static 
+         */ 
+        public static function format($root, $path, $route = null)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->format($root, $path, $route);
+        }
+        
+        /**
+         * Determine if the given path is a valid URL.
+         *
+         * @param string $path
+         * @return bool 
+         * @static 
+         */ 
+        public static function isValidUrl($path)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->isValidUrl($path);
+        }
+        
+        /**
+         * Set the default named parameters used by the URL generator.
+         *
+         * @param array $defaults
+         * @return void 
+         * @static 
+         */ 
+        public static function defaults($defaults)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->defaults($defaults);
+        }
+        
+        /**
+         * Get the default named parameters used by the URL generator.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getDefaultParameters()
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->getDefaultParameters();
+        }
+        
+        /**
+         * Force the scheme for URLs.
+         *
+         * @param string $scheme
+         * @return void 
+         * @static 
+         */ 
+        public static function forceScheme($scheme)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->forceScheme($scheme);
+        }
+        
+        /**
+         * Set the forced root URL.
+         *
+         * @param string $root
+         * @return void 
+         * @static 
+         */ 
+        public static function forceRootUrl($root)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->forceRootUrl($root);
+        }
+        
+        /**
+         * Set a callback to be used to format the host of generated URLs.
+         *
+         * @param \Closure $callback
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function formatHostUsing($callback)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatHostUsing($callback);
+        }
+        
+        /**
+         * Set a callback to be used to format the path of generated URLs.
+         *
+         * @param \Closure $callback
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function formatPathUsing($callback)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatPathUsing($callback);
+        }
+        
+        /**
+         * Get the path formatter being used by the URL generator.
+         *
+         * @return \Closure 
+         * @static 
+         */ 
+        public static function pathFormatter()
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->pathFormatter();
+        }
+        
+        /**
+         * Get the request instance.
+         *
+         * @return \Illuminate\Http\Request 
+         * @static 
+         */ 
+        public static function getRequest()
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->getRequest();
+        }
+        
+        /**
+         * Set the current request instance.
+         *
+         * @param \Illuminate\Http\Request $request
+         * @return void 
+         * @static 
+         */ 
+        public static function setRequest($request)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->setRequest($request);
+        }
+        
+        /**
+         * Set the route collection.
+         *
+         * @param \Illuminate\Routing\RouteCollection $routes
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function setRoutes($routes)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setRoutes($routes);
+        }
+        
+        /**
+         * Set the session resolver for the generator.
+         *
+         * @param callable $sessionResolver
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function setSessionResolver($sessionResolver)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setSessionResolver($sessionResolver);
+        }
+        
+        /**
+         * Set the encryption key resolver.
+         *
+         * @param callable $keyResolver
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function setKeyResolver($keyResolver)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setKeyResolver($keyResolver);
+        }
+        
+        /**
+         * Set the root controller namespace.
+         *
+         * @param string $rootNamespace
+         * @return \Illuminate\Routing\UrlGenerator 
+         * @static 
+         */ 
+        public static function setRootControllerNamespace($rootNamespace)
+        {
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setRootControllerNamespace($rootNamespace);
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Routing\UrlGenerator::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Routing\UrlGenerator::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Routing\UrlGenerator::hasMacro($name);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\Validation\Factory
+     */ 
+    class Validator {
+        
+        /**
+         * Create a new Validator instance.
+         *
+         * @param array $data
+         * @param array $rules
+         * @param array $messages
+         * @param array $customAttributes
+         * @return \Illuminate\Validation\Validator 
+         * @static 
+         */ 
+        public static function make($data, $rules, $messages = [], $customAttributes = [])
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->make($data, $rules, $messages, $customAttributes);
+        }
+        
+        /**
+         * Validate the given data against the provided rules.
+         *
+         * @param array $data
+         * @param array $rules
+         * @param array $messages
+         * @param array $customAttributes
+         * @return array 
+         * @throws \Illuminate\Validation\ValidationException
+         * @static 
+         */ 
+        public static function validate($data, $rules, $messages = [], $customAttributes = [])
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->validate($data, $rules, $messages, $customAttributes);
+        }
+        
+        /**
+         * Register a custom validator extension.
+         *
+         * @param string $rule
+         * @param \Closure|string $extension
+         * @param string|null $message
+         * @return void 
+         * @static 
+         */ 
+        public static function extend($rule, $extension, $message = null)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extend($rule, $extension, $message);
+        }
+        
+        /**
+         * Register a custom implicit validator extension.
+         *
+         * @param string $rule
+         * @param \Closure|string $extension
+         * @param string|null $message
+         * @return void 
+         * @static 
+         */ 
+        public static function extendImplicit($rule, $extension, $message = null)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extendImplicit($rule, $extension, $message);
+        }
+        
+        /**
+         * Register a custom dependent validator extension.
+         *
+         * @param string $rule
+         * @param \Closure|string $extension
+         * @param string|null $message
+         * @return void 
+         * @static 
+         */ 
+        public static function extendDependent($rule, $extension, $message = null)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extendDependent($rule, $extension, $message);
+        }
+        
+        /**
+         * Register a custom validator message replacer.
+         *
+         * @param string $rule
+         * @param \Closure|string $replacer
+         * @return void 
+         * @static 
+         */ 
+        public static function replacer($rule, $replacer)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->replacer($rule, $replacer);
+        }
+        
+        /**
+         * Set the Validator instance resolver.
+         *
+         * @param \Closure $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function resolver($resolver)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->resolver($resolver);
+        }
+        
+        /**
+         * Get the Translator implementation.
+         *
+         * @return \Illuminate\Contracts\Translation\Translator 
+         * @static 
+         */ 
+        public static function getTranslator()
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->getTranslator();
+        }
+        
+        /**
+         * Get the Presence Verifier implementation.
+         *
+         * @return \Illuminate\Validation\PresenceVerifierInterface 
+         * @static 
+         */ 
+        public static function getPresenceVerifier()
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->getPresenceVerifier();
+        }
+        
+        /**
+         * Set the Presence Verifier implementation.
+         *
+         * @param \Illuminate\Validation\PresenceVerifierInterface $presenceVerifier
+         * @return void 
+         * @static 
+         */ 
+        public static function setPresenceVerifier($presenceVerifier)
+        {
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->setPresenceVerifier($presenceVerifier);
+        }
+         
+    }
+
+    /**
+     * 
+     *
+     * @see \Illuminate\View\Factory
+     */ 
+    class View {
+        
+        /**
+         * Get the evaluated view contents for the given view.
+         *
+         * @param string $path
+         * @param \Illuminate\Contracts\Support\Arrayable|array $data
+         * @param array $mergeData
+         * @return \Illuminate\Contracts\View\View 
+         * @static 
+         */ 
+        public static function file($path, $data = [], $mergeData = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->file($path, $data, $mergeData);
+        }
+        
+        /**
+         * Get the evaluated view contents for the given view.
+         *
+         * @param string $view
+         * @param \Illuminate\Contracts\Support\Arrayable|array $data
+         * @param array $mergeData
+         * @return \Illuminate\Contracts\View\View 
+         * @static 
+         */ 
+        public static function make($view, $data = [], $mergeData = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->make($view, $data, $mergeData);
+        }
+        
+        /**
+         * Get the first view that actually exists from the given list.
+         *
+         * @param array $views
+         * @param \Illuminate\Contracts\Support\Arrayable|array $data
+         * @param array $mergeData
+         * @return \Illuminate\Contracts\View\View 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function first($views, $data = [], $mergeData = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->first($views, $data, $mergeData);
+        }
+        
+        /**
+         * Get the rendered content of the view based on a given condition.
+         *
+         * @param bool $condition
+         * @param string $view
+         * @param \Illuminate\Contracts\Support\Arrayable|array $data
+         * @param array $mergeData
+         * @return string 
+         * @static 
+         */ 
+        public static function renderWhen($condition, $view, $data = [], $mergeData = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderWhen($condition, $view, $data, $mergeData);
+        }
+        
+        /**
+         * Get the rendered contents of a partial from a loop.
+         *
+         * @param string $view
+         * @param array $data
+         * @param string $iterator
+         * @param string $empty
+         * @return string 
+         * @static 
+         */ 
+        public static function renderEach($view, $data, $iterator, $empty = 'raw|')
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderEach($view, $data, $iterator, $empty);
+        }
+        
+        /**
+         * Determine if a given view exists.
+         *
+         * @param string $view
+         * @return bool 
+         * @static 
+         */ 
+        public static function exists($view)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->exists($view);
+        }
+        
+        /**
+         * Get the appropriate view engine for the given path.
+         *
+         * @param string $path
+         * @return \Illuminate\Contracts\View\Engine 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function getEngineFromPath($path)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getEngineFromPath($path);
+        }
+        
+        /**
+         * Add a piece of shared data to the environment.
+         *
+         * @param array|string $key
+         * @param mixed|null $value
+         * @return mixed 
+         * @static 
+         */ 
+        public static function share($key, $value = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->share($key, $value);
+        }
+        
+        /**
+         * Increment the rendering counter.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function incrementRender()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->incrementRender();
+        }
+        
+        /**
+         * Decrement the rendering counter.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function decrementRender()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->decrementRender();
+        }
+        
+        /**
+         * Check if there are no active render operations.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function doneRendering()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->doneRendering();
+        }
+        
+        /**
+         * Add a location to the array of view locations.
+         *
+         * @param string $location
+         * @return void 
+         * @static 
+         */ 
+        public static function addLocation($location)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addLocation($location);
+        }
+        
+        /**
+         * Add a new namespace to the loader.
+         *
+         * @param string $namespace
+         * @param string|array $hints
+         * @return \Illuminate\View\Factory 
+         * @static 
+         */ 
+        public static function addNamespace($namespace, $hints)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->addNamespace($namespace, $hints);
+        }
+        
+        /**
+         * Prepend a new namespace to the loader.
+         *
+         * @param string $namespace
+         * @param string|array $hints
+         * @return \Illuminate\View\Factory 
+         * @static 
+         */ 
+        public static function prependNamespace($namespace, $hints)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->prependNamespace($namespace, $hints);
+        }
+        
+        /**
+         * Replace the namespace hints for the given namespace.
+         *
+         * @param string $namespace
+         * @param string|array $hints
+         * @return \Illuminate\View\Factory 
+         * @static 
+         */ 
+        public static function replaceNamespace($namespace, $hints)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->replaceNamespace($namespace, $hints);
+        }
+        
+        /**
+         * Register a valid view extension and its engine.
+         *
+         * @param string $extension
+         * @param string $engine
+         * @param \Closure|null $resolver
+         * @return void 
+         * @static 
+         */ 
+        public static function addExtension($extension, $engine, $resolver = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addExtension($extension, $engine, $resolver);
+        }
+        
+        /**
+         * Flush all of the factory state like sections and stacks.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushState()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushState();
+        }
+        
+        /**
+         * Flush all of the section contents if done rendering.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushStateIfDoneRendering()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushStateIfDoneRendering();
+        }
+        
+        /**
+         * Get the extension to engine bindings.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getExtensions()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getExtensions();
+        }
+        
+        /**
+         * Get the engine resolver instance.
+         *
+         * @return \Illuminate\View\Engines\EngineResolver 
+         * @static 
+         */ 
+        public static function getEngineResolver()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getEngineResolver();
+        }
+        
+        /**
+         * Get the view finder instance.
+         *
+         * @return \Illuminate\View\ViewFinderInterface 
+         * @static 
+         */ 
+        public static function getFinder()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getFinder();
+        }
+        
+        /**
+         * Set the view finder instance.
+         *
+         * @param \Illuminate\View\ViewFinderInterface $finder
+         * @return void 
+         * @static 
+         */ 
+        public static function setFinder($finder)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setFinder($finder);
+        }
+        
+        /**
+         * Flush the cache of views located by the finder.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushFinderCache()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushFinderCache();
+        }
+        
+        /**
+         * Get the event dispatcher instance.
+         *
+         * @return \Illuminate\Contracts\Events\Dispatcher 
+         * @static 
+         */ 
+        public static function getDispatcher()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getDispatcher();
+        }
+        
+        /**
+         * Set the event dispatcher instance.
+         *
+         * @param \Illuminate\Contracts\Events\Dispatcher $events
+         * @return void 
+         * @static 
+         */ 
+        public static function setDispatcher($events)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setDispatcher($events);
+        }
+        
+        /**
+         * Get the IoC container instance.
+         *
+         * @return \Illuminate\Contracts\Container\Container 
+         * @static 
+         */ 
+        public static function getContainer()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getContainer();
+        }
+        
+        /**
+         * Set the IoC container instance.
+         *
+         * @param \Illuminate\Contracts\Container\Container $container
+         * @return void 
+         * @static 
+         */ 
+        public static function setContainer($container)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setContainer($container);
+        }
+        
+        /**
+         * Get an item from the shared data.
+         *
+         * @param string $key
+         * @param mixed $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function shared($key, $default = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->shared($key, $default);
+        }
+        
+        /**
+         * Get all of the shared data for the environment.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getShared()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getShared();
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\View\Factory::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\View\Factory::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\View\Factory::hasMacro($name);
+        }
+        
+        /**
+         * Start a component rendering process.
+         *
+         * @param string $name
+         * @param array $data
+         * @return void 
+         * @static 
+         */ 
+        public static function startComponent($name, $data = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startComponent($name, $data);
+        }
+        
+        /**
+         * Get the first view that actually exists from the given list, and start a component.
+         *
+         * @param array $names
+         * @param array $data
+         * @return void 
+         * @static 
+         */ 
+        public static function startComponentFirst($names, $data = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startComponentFirst($names, $data);
+        }
+        
+        /**
+         * Render the current component.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function renderComponent()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderComponent();
+        }
+        
+        /**
+         * Start the slot rendering process.
+         *
+         * @param string $name
+         * @param string|null $content
+         * @return void 
+         * @static 
+         */ 
+        public static function slot($name, $content = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->slot($name, $content);
+        }
+        
+        /**
+         * Save the slot content for rendering.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function endSlot()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->endSlot();
+        }
+        
+        /**
+         * Register a view creator event.
+         *
+         * @param array|string $views
+         * @param \Closure|string $callback
+         * @return array 
+         * @static 
+         */ 
+        public static function creator($views, $callback)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->creator($views, $callback);
+        }
+        
+        /**
+         * Register multiple view composers via an array.
+         *
+         * @param array $composers
+         * @return array 
+         * @static 
+         */ 
+        public static function composers($composers)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->composers($composers);
+        }
+        
+        /**
+         * Register a view composer event.
+         *
+         * @param array|string $views
+         * @param \Closure|string $callback
+         * @return array 
+         * @static 
+         */ 
+        public static function composer($views, $callback)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->composer($views, $callback);
+        }
+        
+        /**
+         * Call the composer for a given view.
+         *
+         * @param \Illuminate\Contracts\View\View $view
+         * @return void 
+         * @static 
+         */ 
+        public static function callComposer($view)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->callComposer($view);
+        }
+        
+        /**
+         * Call the creator for a given view.
+         *
+         * @param \Illuminate\Contracts\View\View $view
+         * @return void 
+         * @static 
+         */ 
+        public static function callCreator($view)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->callCreator($view);
+        }
+        
+        /**
+         * Start injecting content into a section.
+         *
+         * @param string $section
+         * @param string|null $content
+         * @return void 
+         * @static 
+         */ 
+        public static function startSection($section, $content = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startSection($section, $content);
+        }
+        
+        /**
+         * Inject inline content into a section.
+         *
+         * @param string $section
+         * @param string $content
+         * @return void 
+         * @static 
+         */ 
+        public static function inject($section, $content)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->inject($section, $content);
+        }
+        
+        /**
+         * Stop injecting content into a section and return its contents.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function yieldSection()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldSection();
+        }
+        
+        /**
+         * Stop injecting content into a section.
+         *
+         * @param bool $overwrite
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function stopSection($overwrite = false)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopSection($overwrite);
+        }
+        
+        /**
+         * Stop injecting content into a section and append it.
+         *
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function appendSection()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->appendSection();
+        }
+        
+        /**
+         * Get the string contents of a section.
+         *
+         * @param string $section
+         * @param string $default
+         * @return string 
+         * @static 
+         */ 
+        public static function yieldContent($section, $default = '')
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldContent($section, $default);
+        }
+        
+        /**
+         * Get the parent placeholder for the current request.
+         *
+         * @param string $section
+         * @return string 
+         * @static 
+         */ 
+        public static function parentPlaceholder($section = '')
+        {
+                        return \Illuminate\View\Factory::parentPlaceholder($section);
+        }
+        
+        /**
+         * Check if section exists.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasSection($name)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->hasSection($name);
+        }
+        
+        /**
+         * Get the contents of a section.
+         *
+         * @param string $name
+         * @param string|null $default
+         * @return mixed 
+         * @static 
+         */ 
+        public static function getSection($name, $default = null)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getSection($name, $default);
+        }
+        
+        /**
+         * Get the entire array of sections.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getSections()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getSections();
+        }
+        
+        /**
+         * Flush all of the sections.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushSections()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushSections();
+        }
+        
+        /**
+         * Add new loop to the stack.
+         *
+         * @param \Countable|array $data
+         * @return void 
+         * @static 
+         */ 
+        public static function addLoop($data)
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addLoop($data);
+        }
+        
+        /**
+         * Increment the top loop's indices.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function incrementLoopIndices()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->incrementLoopIndices();
+        }
+        
+        /**
+         * Pop a loop from the top of the loop stack.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function popLoop()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->popLoop();
+        }
+        
+        /**
+         * Get an instance of the last loop in the stack.
+         *
+         * @return \stdClass|null 
+         * @static 
+         */ 
+        public static function getLastLoop()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getLastLoop();
+        }
+        
+        /**
+         * Get the entire loop stack.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getLoopStack()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getLoopStack();
+        }
+        
+        /**
+         * Start injecting content into a push section.
+         *
+         * @param string $section
+         * @param string $content
+         * @return void 
+         * @static 
+         */ 
+        public static function startPush($section, $content = '')
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startPush($section, $content);
+        }
+        
+        /**
+         * Stop injecting content into a push section.
+         *
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function stopPush()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopPush();
+        }
+        
+        /**
+         * Start prepending content into a push section.
+         *
+         * @param string $section
+         * @param string $content
+         * @return void 
+         * @static 
+         */ 
+        public static function startPrepend($section, $content = '')
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startPrepend($section, $content);
+        }
+        
+        /**
+         * Stop prepending content into a push section.
+         *
+         * @return string 
+         * @throws \InvalidArgumentException
+         * @static 
+         */ 
+        public static function stopPrepend()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopPrepend();
+        }
+        
+        /**
+         * Get the string contents of a push section.
+         *
+         * @param string $section
+         * @param string $default
+         * @return string 
+         * @static 
+         */ 
+        public static function yieldPushContent($section, $default = '')
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldPushContent($section, $default);
+        }
+        
+        /**
+         * Flush all of the stacks.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function flushStacks()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushStacks();
+        }
+        
+        /**
+         * Start a translation block.
+         *
+         * @param array $replacements
+         * @return void 
+         * @static 
+         */ 
+        public static function startTranslation($replacements = [])
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startTranslation($replacements);
+        }
+        
+        /**
+         * Render the current translation.
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function renderTranslation()
+        {
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderTranslation();
+        }
+         
+    }
+ 
+}
+
+namespace Illuminate\Support { 
+
+    /**
+     * 
+     *
+     */ 
+    class Arr {
+         
+    }
+
+    /**
+     * 
+     *
+     */ 
+    class Str {
+         
+    }
+ 
+}
+
+namespace Barryvdh\Debugbar { 
+
+    /**
+     * 
+     *
+     * @method static void alert(string $message)
+     * @method static void critical(string $message)
+     * @method static void debug(string $message)
+     * @method static void emergency(string $message)
+     * @method static void error(string $message)
+     * @method static void info(string $message)
+     * @method static void log(string $message)
+     * @method static void notice(string $message)
+     * @method static void warning(string $message)
+     * @see \Barryvdh\Debugbar\LaravelDebugbar
+     */ 
+    class Facade {
+        
+        /**
+         * Enable the Debugbar and boot, if not already booted.
+         *
+         * @static 
+         */ 
+        public static function enable()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->enable();
+        }
+        
+        /**
+         * Boot the debugbar (add collectors, renderer and listener)
+         *
+         * @static 
+         */ 
+        public static function boot()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->boot();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function shouldCollect($name, $default = false)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->shouldCollect($name, $default);
+        }
+        
+        /**
+         * Adds a data collector
+         *
+         * @param \Barryvdh\Debugbar\DataCollectorInterface $collector
+         * @throws DebugBarException
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function addCollector($collector)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addCollector($collector);
+        }
+        
+        /**
+         * Handle silenced errors
+         *
+         * @param $level
+         * @param $message
+         * @param string $file
+         * @param int $line
+         * @param array $context
+         * @throws \ErrorException
+         * @static 
+         */ 
+        public static function handleError($level, $message, $file = '', $line = 0, $context = [])
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->handleError($level, $message, $file, $line, $context);
+        }
+        
+        /**
+         * Starts a measure
+         *
+         * @param string $name Internal name, used to stop the measure
+         * @param string $label Public name
+         * @static 
+         */ 
+        public static function startMeasure($name, $label = null)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->startMeasure($name, $label);
+        }
+        
+        /**
+         * Stops a measure
+         *
+         * @param string $name
+         * @static 
+         */ 
+        public static function stopMeasure($name)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->stopMeasure($name);
+        }
+        
+        /**
+         * Adds an exception to be profiled in the debug bar
+         *
+         * @param \Exception $e
+         * @deprecated in favor of addThrowable
+         * @static 
+         */ 
+        public static function addException($e)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addException($e);
+        }
+        
+        /**
+         * Adds an exception to be profiled in the debug bar
+         *
+         * @param \Exception $e
+         * @static 
+         */ 
+        public static function addThrowable($e)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addThrowable($e);
+        }
+        
+        /**
+         * Returns a JavascriptRenderer for this instance
+         *
+         * @param string $baseUrl
+         * @param string $basePathng
+         * @return \Barryvdh\Debugbar\JavascriptRenderer 
+         * @static 
+         */ 
+        public static function getJavascriptRenderer($baseUrl = null, $basePath = null)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getJavascriptRenderer($baseUrl, $basePath);
+        }
+        
+        /**
+         * Modify the response and inject the debugbar (or data in headers)
+         *
+         * @param \Symfony\Component\HttpFoundation\Request $request
+         * @param \Symfony\Component\HttpFoundation\Response $response
+         * @return \Symfony\Component\HttpFoundation\Response 
+         * @static 
+         */ 
+        public static function modifyResponse($request, $response)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->modifyResponse($request, $response);
+        }
+        
+        /**
+         * Check if the Debugbar is enabled
+         *
+         * @return boolean 
+         * @static 
+         */ 
+        public static function isEnabled()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isEnabled();
+        }
+        
+        /**
+         * Collects the data from the collectors
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function collect()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->collect();
+        }
+        
+        /**
+         * Injects the web debug toolbar into the given Response.
+         *
+         * @param \Symfony\Component\HttpFoundation\Response $response A Response instance
+         * Based on https://github.com/symfony/WebProfilerBundle/blob/master/EventListener/WebDebugToolbarListener.php
+         * @static 
+         */ 
+        public static function injectDebugbar($response)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->injectDebugbar($response);
+        }
+        
+        /**
+         * Disable the Debugbar
+         *
+         * @static 
+         */ 
+        public static function disable()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->disable();
+        }
+        
+        /**
+         * Adds a measure
+         *
+         * @param string $label
+         * @param float $start
+         * @param float $end
+         * @static 
+         */ 
+        public static function addMeasure($label, $start, $end)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addMeasure($label, $start, $end);
+        }
+        
+        /**
+         * Utility function to measure the execution of a Closure
+         *
+         * @param string $label
+         * @param \Closure $closure
+         * @static 
+         */ 
+        public static function measure($label, $closure)
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->measure($label, $closure);
+        }
+        
+        /**
+         * Collect data in a CLI request
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function collectConsole()
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->collectConsole();
+        }
+        
+        /**
+         * Adds a message to the MessagesCollector
+         * 
+         * A message can be anything from an object to a string
+         *
+         * @param mixed $message
+         * @param string $label
+         * @static 
+         */ 
+        public static function addMessage($message, $label = 'info')
+        {
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addMessage($message, $label);
+        }
+        
+        /**
+         * Checks if a data collector has been added
+         *
+         * @param string $name
+         * @return boolean 
+         * @static 
+         */ 
+        public static function hasCollector($name)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->hasCollector($name);
+        }
+        
+        /**
+         * Returns a data collector
+         *
+         * @param string $name
+         * @return \DebugBar\DataCollectorInterface 
+         * @throws DebugBarException
+         * @static 
+         */ 
+        public static function getCollector($name)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCollector($name);
+        }
+        
+        /**
+         * Returns an array of all data collectors
+         *
+         * @return \DebugBar\array[DataCollectorInterface] 
+         * @static 
+         */ 
+        public static function getCollectors()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCollectors();
+        }
+        
+        /**
+         * Sets the request id generator
+         *
+         * @param \DebugBar\RequestIdGeneratorInterface $generator
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function setRequestIdGenerator($generator)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setRequestIdGenerator($generator);
+        }
+        
+        /**
+         * 
+         *
+         * @return \DebugBar\RequestIdGeneratorInterface 
+         * @static 
+         */ 
+        public static function getRequestIdGenerator()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getRequestIdGenerator();
+        }
+        
+        /**
+         * Returns the id of the current request
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getCurrentRequestId()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCurrentRequestId();
+        }
+        
+        /**
+         * Sets the storage backend to use to store the collected data
+         *
+         * @param \DebugBar\StorageInterface $storage
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function setStorage($storage = null)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStorage($storage);
+        }
+        
+        /**
+         * 
+         *
+         * @return \DebugBar\StorageInterface 
+         * @static 
+         */ 
+        public static function getStorage()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStorage();
+        }
+        
+        /**
+         * Checks if the data will be persisted
+         *
+         * @return boolean 
+         * @static 
+         */ 
+        public static function isDataPersisted()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isDataPersisted();
+        }
+        
+        /**
+         * Sets the HTTP driver
+         *
+         * @param \DebugBar\HttpDriverInterface $driver
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function setHttpDriver($driver)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setHttpDriver($driver);
+        }
+        
+        /**
+         * Returns the HTTP driver
+         * 
+         * If no http driver where defined, a PhpHttpDriver is automatically created
+         *
+         * @return \DebugBar\HttpDriverInterface 
+         * @static 
+         */ 
+        public static function getHttpDriver()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getHttpDriver();
+        }
+        
+        /**
+         * Returns collected data
+         * 
+         * Will collect the data if none have been collected yet
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function getData()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getData();
+        }
+        
+        /**
+         * Returns an array of HTTP headers containing the data
+         *
+         * @param string $headerName
+         * @param integer $maxHeaderLength
+         * @return array 
+         * @static 
+         */ 
+        public static function getDataAsHeaders($headerName = 'phpdebugbar', $maxHeaderLength = 4096, $maxTotalHeaderLength = 250000)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getDataAsHeaders($headerName, $maxHeaderLength, $maxTotalHeaderLength);
+        }
+        
+        /**
+         * Sends the data through the HTTP headers
+         *
+         * @param bool $useOpenHandler
+         * @param string $headerName
+         * @param integer $maxHeaderLength
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function sendDataInHeaders($useOpenHandler = null, $headerName = 'phpdebugbar', $maxHeaderLength = 4096)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->sendDataInHeaders($useOpenHandler, $headerName, $maxHeaderLength);
+        }
+        
+        /**
+         * Stacks the data in the session for later rendering
+         *
+         * @static 
+         */ 
+        public static function stackData()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->stackData();
+        }
+        
+        /**
+         * Checks if there is stacked data in the session
+         *
+         * @return boolean 
+         * @static 
+         */ 
+        public static function hasStackedData()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->hasStackedData();
+        }
+        
+        /**
+         * Returns the data stacked in the session
+         *
+         * @param boolean $delete Whether to delete the data in the session
+         * @return array 
+         * @static 
+         */ 
+        public static function getStackedData($delete = true)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStackedData($delete);
+        }
+        
+        /**
+         * Sets the key to use in the $_SESSION array
+         *
+         * @param string $ns
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function setStackDataSessionNamespace($ns)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStackDataSessionNamespace($ns);
+        }
+        
+        /**
+         * Returns the key used in the $_SESSION array
+         *
+         * @return string 
+         * @static 
+         */ 
+        public static function getStackDataSessionNamespace()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStackDataSessionNamespace();
+        }
+        
+        /**
+         * Sets whether to only use the session to store stacked data even
+         * if a storage is enabled
+         *
+         * @param boolean $enabled
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
+         * @static 
+         */ 
+        public static function setStackAlwaysUseSessionStorage($enabled = true)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStackAlwaysUseSessionStorage($enabled);
+        }
+        
+        /**
+         * Checks if the session is always used to store stacked data
+         * even if a storage is enabled
+         *
+         * @return boolean 
+         * @static 
+         */ 
+        public static function isStackAlwaysUseSessionStorage()
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isStackAlwaysUseSessionStorage();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function offsetSet($key, $value)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetSet($key, $value);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function offsetGet($key)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetGet($key);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function offsetExists($key)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetExists($key);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function offsetUnset($key)
+        {
+            //Method inherited from \DebugBar\DebugBar            
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetUnset($key);
+        }
+         
+    }
+ 
+}
+
+namespace Facade\Ignition\Facades { 
+
+    /**
+     * Class Flare.
+     *
+     * @see \Facade\FlareClient\Flare
+     */ 
+    class Flare {
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function register($apiKey, $apiSecret = null, $contextDetector = null, $container = null)
+        {
+                        return \Facade\FlareClient\Flare::register($apiKey, $apiSecret, $contextDetector, $container);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getMiddleware()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->getMiddleware();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function registerFlareHandlers()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->registerFlareHandlers();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function registerExceptionHandler()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->registerExceptionHandler();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function registerErrorHandler()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->registerErrorHandler();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function registerMiddleware($callable)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->registerMiddleware($callable);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getMiddlewares()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->getMiddlewares();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function glow($name, $messageLevel = 'info', $metaData = [])
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->glow($name, $messageLevel, $metaData);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function handleException($throwable)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->handleException($throwable);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function handleError($code, $message, $file = '', $line = 0)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->handleError($code, $message, $file, $line);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function applicationPath($applicationPath)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->applicationPath($applicationPath);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function report($throwable, $callback = null)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->report($throwable, $callback);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function reportMessage($message, $logLevel, $callback = null)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->reportMessage($message, $logLevel, $callback);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function sendTestReport($throwable)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->sendTestReport($throwable);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function reset()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->reset();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function anonymizeIp()
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->anonymizeIp();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function createReport($throwable)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->createReport($throwable);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function createReportFromMessage($message, $logLevel)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->createReportFromMessage($message, $logLevel);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function stage($stage)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->stage($stage);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function messageLevel($messageLevel)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->messageLevel($messageLevel);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getGroup($groupName = 'context', $default = [])
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->getGroup($groupName, $default);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function context($key, $value)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->context($key, $value);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function group($groupName, $properties)
+        {
+                        /** @var \Facade\FlareClient\Flare $instance */
+                        return $instance->group($groupName, $properties);
+        }
+         
+    }
+ 
+}
+
+namespace Intervention\Image\Facades { 
+
+    /**
+     * 
+     *
+     */ 
+    class Image {
+        
+        /**
+         * Overrides configuration settings
+         *
+         * @param array $config
+         * @return self 
+         * @static 
+         */ 
+        public static function configure($config = [])
+        {
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->configure($config);
+        }
+        
+        /**
+         * Initiates an Image instance from different input types
+         *
+         * @param mixed $data
+         * @return \Intervention\Image\Image 
+         * @static 
+         */ 
+        public static function make($data)
+        {
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->make($data);
+        }
+        
+        /**
+         * Creates an empty image canvas
+         *
+         * @param int $width
+         * @param int $height
+         * @param mixed $background
+         * @return \Intervention\Image\Image 
+         * @static 
+         */ 
+        public static function canvas($width, $height, $background = null)
+        {
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->canvas($width, $height, $background);
+        }
+        
+        /**
+         * Create new cached image and run callback
+         * (requires additional package intervention/imagecache)
+         *
+         * @param \Closure $callback
+         * @param int $lifetime
+         * @param boolean $returnObj
+         * @return \Image 
+         * @static 
+         */ 
+        public static function cache($callback, $lifetime = null, $returnObj = false)
+        {
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->cache($callback, $lifetime, $returnObj);
+        }
+         
+    }
+ 
+}
+
+
+namespace  { 
+
+    class App extends \Illuminate\Support\Facades\App {}
+
+    class Arr extends \Illuminate\Support\Arr {}
+
+    class Artisan extends \Illuminate\Support\Facades\Artisan {}
+
+    class Auth extends \Illuminate\Support\Facades\Auth {}
+
+    class Blade extends \Illuminate\Support\Facades\Blade {}
+
+    class Broadcast extends \Illuminate\Support\Facades\Broadcast {}
+
+    class Bus extends \Illuminate\Support\Facades\Bus {}
+
+    class Cache extends \Illuminate\Support\Facades\Cache {}
+
+    class Config extends \Illuminate\Support\Facades\Config {}
+
+    class Cookie extends \Illuminate\Support\Facades\Cookie {}
+
+    class Crypt extends \Illuminate\Support\Facades\Crypt {}
+
+    class DB extends \Illuminate\Support\Facades\DB {}
+
+    class Eloquent extends \Illuminate\Database\Eloquent\Model {         
+            /**
+             * Create and return an un-saved model instance.
+             *
+             * @param array $attributes
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function make($attributes = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->make($attributes);
+            }
+         
+            /**
+             * Register a new global scope.
+             *
+             * @param string $identifier
+             * @param \Illuminate\Database\Eloquent\Scope|\Closure $scope
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function withGlobalScope($identifier, $scope)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withGlobalScope($identifier, $scope);
+            }
+         
+            /**
+             * Remove a registered global scope.
+             *
+             * @param \Illuminate\Database\Eloquent\Scope|string $scope
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function withoutGlobalScope($scope)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withoutGlobalScope($scope);
+            }
+         
+            /**
+             * Remove all or passed registered global scopes.
+             *
+             * @param array|null $scopes
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function withoutGlobalScopes($scopes = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withoutGlobalScopes($scopes);
+            }
+         
+            /**
+             * Get an array of global scopes that were removed from the query.
+             *
+             * @return array 
+             * @static 
+             */ 
+            public static function removedScopes()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->removedScopes();
+            }
+         
+            /**
+             * Add a where clause on the primary key to the query.
+             *
+             * @param mixed $id
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function whereKey($id)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereKey($id);
+            }
+         
+            /**
+             * Add a where clause on the primary key to the query.
+             *
+             * @param mixed $id
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function whereKeyNot($id)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereKeyNot($id);
+            }
+         
+            /**
+             * Add a basic where clause to the query.
+             *
+             * @param \Closure|string|array $column
+             * @param mixed $operator
+             * @param mixed $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function where($column, $operator = null, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->where($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add a basic where clause to the query, and return the first result.
+             *
+             * @param \Closure|string|array $column
+             * @param mixed $operator
+             * @param mixed $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function firstWhere($column, $operator = null, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstWhere($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where" clause to the query.
+             *
+             * @param \Closure|array|string $column
+             * @param mixed $operator
+             * @param mixed $value
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orWhere($column, $operator = null, $value = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhere($column, $operator, $value);
+            }
+         
+            /**
+             * Add an "order by" clause for a timestamp to the query.
+             *
+             * @param string $column
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function latest($column = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->latest($column);
+            }
+         
+            /**
+             * Add an "order by" clause for a timestamp to the query.
+             *
+             * @param string $column
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function oldest($column = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->oldest($column);
+            }
+         
+            /**
+             * Create a collection of models from plain arrays.
+             *
+             * @param array $items
+             * @return \Illuminate\Database\Eloquent\Collection 
+             * @static 
+             */ 
+            public static function hydrate($items)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->hydrate($items);
+            }
+         
+            /**
+             * Create a collection of models from a raw query.
+             *
+             * @param string $query
+             * @param array $bindings
+             * @return \Illuminate\Database\Eloquent\Collection 
+             * @static 
+             */ 
+            public static function fromQuery($query, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->fromQuery($query, $bindings);
+            }
+         
+            /**
+             * Find a model by its primary key.
+             *
+             * @param mixed $id
+             * @param array $columns
+             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null 
+             * @static 
+             */ 
+            public static function find($id, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->find($id, $columns);
+            }
+         
+            /**
+             * Find multiple models by their primary keys.
+             *
+             * @param \Illuminate\Contracts\Support\Arrayable|array $ids
+             * @param array $columns
+             * @return \Illuminate\Database\Eloquent\Collection 
+             * @static 
+             */ 
+            public static function findMany($ids, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findMany($ids, $columns);
+            }
+         
+            /**
+             * Find a model by its primary key or throw an exception.
+             *
+             * @param mixed $id
+             * @param array $columns
+             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static|static[] 
+             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
+             * @static 
+             */ 
+            public static function findOrFail($id, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findOrFail($id, $columns);
+            }
+         
+            /**
+             * Find a model by its primary key or return fresh model instance.
+             *
+             * @param mixed $id
+             * @param array $columns
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function findOrNew($id, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findOrNew($id, $columns);
+            }
+         
+            /**
+             * Get the first record matching the attributes or instantiate it.
+             *
+             * @param array $attributes
+             * @param array $values
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function firstOrNew($attributes, $values = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrNew($attributes, $values);
+            }
+         
+            /**
+             * Get the first record matching the attributes or create it.
+             *
+             * @param array $attributes
+             * @param array $values
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function firstOrCreate($attributes, $values = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrCreate($attributes, $values);
+            }
+         
+            /**
+             * Create or update a record matching the attributes, and fill it with values.
+             *
+             * @param array $attributes
+             * @param array $values
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function updateOrCreate($attributes, $values = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->updateOrCreate($attributes, $values);
+            }
+         
+            /**
+             * Execute the query and get the first result or throw an exception.
+             *
+             * @param array $columns
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
+             * @static 
+             */ 
+            public static function firstOrFail($columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrFail($columns);
+            }
+         
+            /**
+             * Execute the query and get the first result or call a callback.
+             *
+             * @param \Closure|array $columns
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Model|static|mixed 
+             * @static 
+             */ 
+            public static function firstOr($columns = [], $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOr($columns, $callback);
+            }
+         
+            /**
+             * Get a single column's value from the first result of a query.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function value($column)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->value($column);
+            }
+         
+            /**
+             * Execute the query as a "select" statement.
+             *
+             * @param array|string $columns
+             * @return \Illuminate\Database\Eloquent\Collection|static[] 
+             * @static 
+             */ 
+            public static function get($columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->get($columns);
+            }
+         
+            /**
+             * Get the hydrated models without eager loading.
+             *
+             * @param array|string $columns
+             * @return \Illuminate\Database\Eloquent\Model[]|static[] 
+             * @static 
+             */ 
+            public static function getModels($columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getModels($columns);
+            }
+         
+            /**
+             * Eager load the relationships for the models.
+             *
+             * @param array $models
+             * @return array 
+             * @static 
+             */ 
+            public static function eagerLoadRelations($models)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->eagerLoadRelations($models);
+            }
+         
+            /**
+             * Get a lazy collection for the given query.
+             *
+             * @return \Illuminate\Support\LazyCollection 
+             * @static 
+             */ 
+            public static function cursor()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->cursor();
+            }
+         
+            /**
+             * Get an array with the values of a given column.
+             *
+             * @param string $column
+             * @param string|null $key
+             * @return \Illuminate\Support\Collection 
+             * @static 
+             */ 
+            public static function pluck($column, $key = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->pluck($column, $key);
+            }
+         
+            /**
+             * Paginate the given query.
+             *
+             * @param int|null $perPage
+             * @param array $columns
+             * @param string $pageName
+             * @param int|null $page
+             * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function paginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->paginate($perPage, $columns, $pageName, $page);
+            }
+         
+            /**
+             * Paginate the given query into a simple paginator.
+             *
+             * @param int|null $perPage
+             * @param array $columns
+             * @param string $pageName
+             * @param int|null $page
+             * @return \Illuminate\Contracts\Pagination\Paginator 
+             * @static 
+             */ 
+            public static function simplePaginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->simplePaginate($perPage, $columns, $pageName, $page);
+            }
+         
+            /**
+             * Save a new model and return the instance.
+             *
+             * @param array $attributes
+             * @return \Illuminate\Database\Eloquent\Model|$this 
+             * @static 
+             */ 
+            public static function create($attributes = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->create($attributes);
+            }
+         
+            /**
+             * Save a new model and return the instance. Allow mass-assignment.
+             *
+             * @param array $attributes
+             * @return \Illuminate\Database\Eloquent\Model|$this 
+             * @static 
+             */ 
+            public static function forceCreate($attributes)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->forceCreate($attributes);
+            }
+         
+            /**
+             * Register a replacement for the default delete function.
+             *
+             * @param \Closure $callback
+             * @return void 
+             * @static 
+             */ 
+            public static function onDelete($callback)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                $instance->onDelete($callback);
+            }
+         
+            /**
+             * Call the given local model scopes.
+             *
+             * @param array|string $scopes
+             * @return static|mixed 
+             * @static 
+             */ 
+            public static function scopes($scopes)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->scopes($scopes);
+            }
+         
+            /**
+             * Apply the scopes to the Eloquent builder instance and return it.
+             *
+             * @return static 
+             * @static 
+             */ 
+            public static function applyScopes()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->applyScopes();
+            }
+         
+            /**
+             * Prevent the specified relations from being eager loaded.
+             *
+             * @param mixed $relations
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function without($relations)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->without($relations);
+            }
+         
+            /**
+             * Create a new instance of the model being queried.
+             *
+             * @param array $attributes
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function newModelInstance($attributes = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->newModelInstance($attributes);
+            }
+         
+            /**
+             * Get the underlying query builder instance.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function getQuery()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getQuery();
+            }
+         
+            /**
+             * Set the underlying query builder instance.
+             *
+             * @param \Illuminate\Database\Query\Builder $query
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function setQuery($query)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setQuery($query);
+            }
+         
+            /**
+             * Get a base query builder instance.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function toBase()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->toBase();
+            }
+         
+            /**
+             * Get the relationships being eagerly loaded.
+             *
+             * @return array 
+             * @static 
+             */ 
+            public static function getEagerLoads()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getEagerLoads();
+            }
+         
+            /**
+             * Set the relationships being eagerly loaded.
+             *
+             * @param array $eagerLoad
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function setEagerLoads($eagerLoad)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setEagerLoads($eagerLoad);
+            }
+         
+            /**
+             * Get the model instance being queried.
+             *
+             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @static 
+             */ 
+            public static function getModel()
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getModel();
+            }
+         
+            /**
+             * Set a model instance for the model being queried.
+             *
+             * @param \Illuminate\Database\Eloquent\Model $model
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function setModel($model)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setModel($model);
+            }
+         
+            /**
+             * Get the given macro by name.
+             *
+             * @param string $name
+             * @return \Closure 
+             * @static 
+             */ 
+            public static function getMacro($name)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getMacro($name);
+            }
+         
+            /**
+             * Checks if a macro is registered.
+             *
+             * @param string $name
+             * @return bool 
+             * @static 
+             */ 
+            public static function hasMacro($name)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->hasMacro($name);
+            }
+         
+            /**
+             * Get the given global macro by name.
+             *
+             * @param string $name
+             * @return \Closure 
+             * @static 
+             */ 
+            public static function getGlobalMacro($name)
+            {
+                                return \Illuminate\Database\Eloquent\Builder::getGlobalMacro($name);
+            }
+         
+            /**
+             * Checks if a global macro is registered.
+             *
+             * @param string $name
+             * @return bool 
+             * @static 
+             */ 
+            public static function hasGlobalMacro($name)
+            {
+                                return \Illuminate\Database\Eloquent\Builder::hasGlobalMacro($name);
+            }
+         
+            /**
+             * Chunk the results of the query.
+             *
+             * @param int $count
+             * @param callable $callback
+             * @return bool 
+             * @static 
+             */ 
+            public static function chunk($count, $callback)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->chunk($count, $callback);
+            }
+         
+            /**
+             * Execute a callback over each item while chunking.
+             *
+             * @param callable $callback
+             * @param int $count
+             * @return bool 
+             * @static 
+             */ 
+            public static function each($callback, $count = 1000)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->each($callback, $count);
+            }
+         
+            /**
+             * Chunk the results of a query by comparing IDs.
+             *
+             * @param int $count
+             * @param callable $callback
+             * @param string|null $column
+             * @param string|null $alias
+             * @return bool 
+             * @static 
+             */ 
+            public static function chunkById($count, $callback, $column = null, $alias = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->chunkById($count, $callback, $column, $alias);
+            }
+         
+            /**
+             * Execute a callback over each item while chunking by id.
+             *
+             * @param callable $callback
+             * @param int $count
+             * @param string|null $column
+             * @param string|null $alias
+             * @return bool 
+             * @static 
+             */ 
+            public static function eachById($callback, $count = 1000, $column = null, $alias = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->eachById($callback, $count, $column, $alias);
+            }
+         
+            /**
+             * Execute the query and get the first result.
+             *
+             * @param array|string $columns
+             * @return \Illuminate\Database\Eloquent\Model|object|static|null 
+             * @static 
+             */ 
+            public static function first($columns = [])
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->first($columns);
+            }
+         
+            /**
+             * Apply the callback's query changes if the given "value" is true.
+             *
+             * @param mixed $value
+             * @param callable $callback
+             * @param callable|null $default
+             * @return mixed|$this 
+             * @static 
+             */ 
+            public static function when($value, $callback, $default = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->when($value, $callback, $default);
+            }
+         
+            /**
+             * Pass the query to a given callback.
+             *
+             * @param callable $callback
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function tap($callback)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->tap($callback);
+            }
+         
+            /**
+             * Apply the callback's query changes if the given "value" is false.
+             *
+             * @param mixed $value
+             * @param callable $callback
+             * @param callable|null $default
+             * @return mixed|$this 
+             * @static 
+             */ 
+            public static function unless($value, $callback, $default = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->unless($value, $callback, $default);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query.
+             *
+             * @param \Illuminate\Database\Eloquent\Relations\Relation|string $relation
+             * @param string $operator
+             * @param int $count
+             * @param string $boolean
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @throws \RuntimeException
+             * @static 
+             */ 
+            public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->has($relation, $operator, $count, $boolean, $callback);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with an "or".
+             *
+             * @param string $relation
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orHas($relation, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orHas($relation, $operator, $count);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query.
+             *
+             * @param string $relation
+             * @param string $boolean
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function doesntHave($relation, $boolean = 'and', $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->doesntHave($relation, $boolean, $callback);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with an "or".
+             *
+             * @param string $relation
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orDoesntHave($relation)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orDoesntHave($relation);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with where clauses.
+             *
+             * @param string $relation
+             * @param \Closure|null $callback
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function whereHas($relation, $callback = null, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereHas($relation, $callback, $operator, $count);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with where clauses and an "or".
+             *
+             * @param string $relation
+             * @param \Closure $callback
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereHas($relation, $callback = null, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereHas($relation, $callback, $operator, $count);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with where clauses.
+             *
+             * @param string $relation
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function whereDoesntHave($relation, $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereDoesntHave($relation, $callback);
+            }
+         
+            /**
+             * Add a relationship count / exists condition to the query with where clauses and an "or".
+             *
+             * @param string $relation
+             * @param \Closure $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereDoesntHave($relation, $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereDoesntHave($relation, $callback);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query.
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param string $operator
+             * @param int $count
+             * @param string $boolean
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->hasMorph($relation, $types, $operator, $count, $boolean, $callback);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with an "or".
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orHasMorph($relation, $types, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orHasMorph($relation, $types, $operator, $count);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query.
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param string $boolean
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function doesntHaveMorph($relation, $types, $boolean = 'and', $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->doesntHaveMorph($relation, $types, $boolean, $callback);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with an "or".
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orDoesntHaveMorph($relation, $types)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orDoesntHaveMorph($relation, $types);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with where clauses.
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param \Closure|null $callback
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function whereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereHasMorph($relation, $types, $callback, $operator, $count);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param \Closure $callback
+             * @param string $operator
+             * @param int $count
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereHasMorph($relation, $types, $callback, $operator, $count);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with where clauses.
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param \Closure|null $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function whereDoesntHaveMorph($relation, $types, $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereDoesntHaveMorph($relation, $types, $callback);
+            }
+         
+            /**
+             * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
+             *
+             * @param string $relation
+             * @param string|array $types
+             * @param \Closure $callback
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereDoesntHaveMorph($relation, $types, $callback = null)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereDoesntHaveMorph($relation, $types, $callback);
+            }
+         
+            /**
+             * Add subselect queries to count the relations.
+             *
+             * @param mixed $relations
+             * @return \Illuminate\Database\Eloquent\Builder 
+             * @static 
+             */ 
+            public static function withCount($relations)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withCount($relations);
+            }
+         
+            /**
+             * Merge the where constraints from another query to the current query.
+             *
+             * @param \Illuminate\Database\Eloquent\Builder $from
+             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @static 
+             */ 
+            public static function mergeConstraintsFrom($from)
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->mergeConstraintsFrom($from);
+            }
+         
+            /**
+             * Set the columns to be selected.
+             *
+             * @param array|mixed $columns
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function select($columns = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->select($columns);
+            }
+         
+            /**
+             * Add a subselect expression to the query.
+             *
+             * @param \Closure|$this|string $query
+             * @param string $as
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function selectSub($query, $as)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->selectSub($query, $as);
+            }
+         
+            /**
+             * Add a new "raw" select expression to the query.
+             *
+             * @param string $expression
+             * @param array $bindings
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function selectRaw($expression, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->selectRaw($expression, $bindings);
+            }
+         
+            /**
+             * Makes "from" fetch from a subquery.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @param string $as
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function fromSub($query, $as)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->fromSub($query, $as);
+            }
+         
+            /**
+             * Add a raw from clause to the query.
+             *
+             * @param string $expression
+             * @param mixed $bindings
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function fromRaw($expression, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->fromRaw($expression, $bindings);
+            }
+         
+            /**
+             * Add a new select column to the query.
+             *
+             * @param array|mixed $column
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function addSelect($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addSelect($column);
+            }
+         
+            /**
+             * Force the query to only return distinct results.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function distinct()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->distinct();
+            }
+         
+            /**
+             * Set the table which the query is targeting.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $table
+             * @param string|null $as
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function from($table, $as = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->from($table, $as);
+            }
+         
+            /**
+             * Add a join clause to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @param string $type
+             * @param bool $where
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->join($table, $first, $operator, $second, $type, $where);
+            }
+         
+            /**
+             * Add a "join where" clause to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string $operator
+             * @param string $second
+             * @param string $type
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function joinWhere($table, $first, $operator, $second, $type = 'inner')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->joinWhere($table, $first, $operator, $second, $type);
+            }
+         
+            /**
+             * Add a subquery join clause to the query.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @param string $as
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @param string $type
+             * @param bool $where
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->joinSub($query, $as, $first, $operator, $second, $type, $where);
+            }
+         
+            /**
+             * Add a left join to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function leftJoin($table, $first, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoin($table, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a "join where" clause to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string $operator
+             * @param string $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function leftJoinWhere($table, $first, $operator, $second)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoinWhere($table, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a subquery left join to the query.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @param string $as
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function leftJoinSub($query, $as, $first, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoinSub($query, $as, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a right join to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function rightJoin($table, $first, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoin($table, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a "right join where" clause to the query.
+             *
+             * @param string $table
+             * @param \Closure|string $first
+             * @param string $operator
+             * @param string $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function rightJoinWhere($table, $first, $operator, $second)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoinWhere($table, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a subquery right join to the query.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @param string $as
+             * @param \Closure|string $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function rightJoinSub($query, $as, $first, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoinSub($query, $as, $first, $operator, $second);
+            }
+         
+            /**
+             * Add a "cross join" clause to the query.
+             *
+             * @param string $table
+             * @param \Closure|string|null $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function crossJoin($table, $first = null, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->crossJoin($table, $first, $operator, $second);
+            }
+         
+            /**
+             * Merge an array of where clauses and bindings.
+             *
+             * @param array $wheres
+             * @param array $bindings
+             * @return void 
+             * @static 
+             */ 
+            public static function mergeWheres($wheres, $bindings)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                $instance->mergeWheres($wheres, $bindings);
+            }
+         
+            /**
+             * Prepare the value and operator for a where clause.
+             *
+             * @param string $value
+             * @param string $operator
+             * @param bool $useDefault
+             * @return array 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function prepareValueAndOperator($value, $operator, $useDefault = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->prepareValueAndOperator($value, $operator, $useDefault);
+            }
+         
+            /**
+             * Add a "where" clause comparing two columns to the query.
+             *
+             * @param string|array $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @param string|null $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereColumn($first, $operator, $second, $boolean);
+            }
+         
+            /**
+             * Add an "or where" clause comparing two columns to the query.
+             *
+             * @param string|array $first
+             * @param string|null $operator
+             * @param string|null $second
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereColumn($first, $operator = null, $second = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereColumn($first, $operator, $second);
+            }
+         
+            /**
+             * Add a raw where clause to the query.
+             *
+             * @param string $sql
+             * @param mixed $bindings
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereRaw($sql, $bindings = [], $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereRaw($sql, $bindings, $boolean);
+            }
+         
+            /**
+             * Add a raw or where clause to the query.
+             *
+             * @param string $sql
+             * @param mixed $bindings
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereRaw($sql, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereRaw($sql, $bindings);
+            }
+         
+            /**
+             * Add a "where in" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereIn($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIn($column, $values, $boolean, $not);
+            }
+         
+            /**
+             * Add an "or where in" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $values
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereIn($column, $values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereIn($column, $values);
+            }
+         
+            /**
+             * Add a "where not in" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $values
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereNotIn($column, $values, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotIn($column, $values, $boolean);
+            }
+         
+            /**
+             * Add an "or where not in" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $values
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereNotIn($column, $values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotIn($column, $values);
+            }
+         
+            /**
+             * Add a "where in raw" clause for integer values to the query.
+             *
+             * @param string $column
+             * @param \Illuminate\Contracts\Support\Arrayable|array $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIntegerInRaw($column, $values, $boolean, $not);
+            }
+         
+            /**
+             * Add a "where not in raw" clause for integer values to the query.
+             *
+             * @param string $column
+             * @param \Illuminate\Contracts\Support\Arrayable|array $values
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereIntegerNotInRaw($column, $values, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIntegerNotInRaw($column, $values, $boolean);
+            }
+         
+            /**
+             * Add a "where null" clause to the query.
+             *
+             * @param string|array $columns
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereNull($columns, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNull($columns, $boolean, $not);
+            }
+         
+            /**
+             * Add an "or where null" clause to the query.
+             *
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereNull($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNull($column);
+            }
+         
+            /**
+             * Add a "where not null" clause to the query.
+             *
+             * @param string|array $columns
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereNotNull($columns, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotNull($columns, $boolean);
+            }
+         
+            /**
+             * Add a where between statement to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereBetween($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereBetween($column, $values, $boolean, $not);
+            }
+         
+            /**
+             * Add an or where between statement to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereBetween($column, $values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereBetween($column, $values);
+            }
+         
+            /**
+             * Add a where not between statement to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereNotBetween($column, $values, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotBetween($column, $values, $boolean);
+            }
+         
+            /**
+             * Add an or where not between statement to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereNotBetween($column, $values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotBetween($column, $values);
+            }
+         
+            /**
+             * Add an "or where not null" clause to the query.
+             *
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereNotNull($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotNull($column);
+            }
+         
+            /**
+             * Add a "where date" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereDate($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereDate($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where date" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereDate($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereDate($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "where time" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereTime($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereTime($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where time" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereTime($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereTime($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "where day" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereDay($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereDay($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where day" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereDay($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereDay($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "where month" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereMonth($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereMonth($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where month" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereMonth($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereMonth($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "where year" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|int|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereYear($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereYear($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add an "or where year" statement to the query.
+             *
+             * @param string $column
+             * @param string $operator
+             * @param \DateTimeInterface|string|int|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereYear($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereYear($column, $operator, $value);
+            }
+         
+            /**
+             * Add a nested where statement to the query.
+             *
+             * @param \Closure $callback
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereNested($callback, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNested($callback, $boolean);
+            }
+         
+            /**
+             * Create a new query instance for nested where condition.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function forNestedWhere()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forNestedWhere();
+            }
+         
+            /**
+             * Add another query builder as a nested where to the query builder.
+             *
+             * @param \Illuminate\Database\Query\Builder|static $query
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function addNestedWhereQuery($query, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addNestedWhereQuery($query, $boolean);
+            }
+         
+            /**
+             * Add an exists clause to the query.
+             *
+             * @param \Closure $callback
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereExists($callback, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereExists($callback, $boolean, $not);
+            }
+         
+            /**
+             * Add an or exists clause to the query.
+             *
+             * @param \Closure $callback
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereExists($callback, $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereExists($callback, $not);
+            }
+         
+            /**
+             * Add a where not exists clause to the query.
+             *
+             * @param \Closure $callback
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function whereNotExists($callback, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotExists($callback, $boolean);
+            }
+         
+            /**
+             * Add a where not exists clause to the query.
+             *
+             * @param \Closure $callback
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orWhereNotExists($callback)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotExists($callback);
+            }
+         
+            /**
+             * Add an exists clause to the query.
+             *
+             * @param \Illuminate\Database\Query\Builder $query
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function addWhereExistsQuery($query, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addWhereExistsQuery($query, $boolean, $not);
+            }
+         
+            /**
+             * Adds a where condition using row values.
+             *
+             * @param array $columns
+             * @param string $operator
+             * @param array $values
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function whereRowValues($columns, $operator, $values, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereRowValues($columns, $operator, $values, $boolean);
+            }
+         
+            /**
+             * Adds a or where condition using row values.
+             *
+             * @param array $columns
+             * @param string $operator
+             * @param array $values
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orWhereRowValues($columns, $operator, $values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereRowValues($columns, $operator, $values);
+            }
+         
+            /**
+             * Add a "where JSON contains" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $value
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereJsonContains($column, $value, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonContains($column, $value, $boolean, $not);
+            }
+         
+            /**
+             * Add a "or where JSON contains" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orWhereJsonContains($column, $value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonContains($column, $value);
+            }
+         
+            /**
+             * Add a "where JSON not contains" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereJsonDoesntContain($column, $value, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonDoesntContain($column, $value, $boolean);
+            }
+         
+            /**
+             * Add a "or where JSON not contains" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orWhereJsonDoesntContain($column, $value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonDoesntContain($column, $value);
+            }
+         
+            /**
+             * Add a "where JSON length" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $operator
+             * @param mixed $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereJsonLength($column, $operator, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonLength($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add a "or where JSON length" clause to the query.
+             *
+             * @param string $column
+             * @param mixed $operator
+             * @param mixed $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orWhereJsonLength($column, $operator, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonLength($column, $operator, $value);
+            }
+         
+            /**
+             * Handles dynamic "where" clauses to the query.
+             *
+             * @param string $method
+             * @param array $parameters
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function dynamicWhere($method, $parameters)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->dynamicWhere($method, $parameters);
+            }
+         
+            /**
+             * Add a "group by" clause to the query.
+             *
+             * @param array|string $groups
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function groupBy(...$groups)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->groupBy(...$groups);
+            }
+         
+            /**
+             * Add a raw groupBy clause to the query.
+             *
+             * @param string $sql
+             * @param array $bindings
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function groupByRaw($sql, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->groupByRaw($sql, $bindings);
+            }
+         
+            /**
+             * Add a "having" clause to the query.
+             *
+             * @param string $column
+             * @param string|null $operator
+             * @param string|null $value
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function having($column, $operator = null, $value = null, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->having($column, $operator, $value, $boolean);
+            }
+         
+            /**
+             * Add a "or having" clause to the query.
+             *
+             * @param string $column
+             * @param string|null $operator
+             * @param string|null $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orHaving($column, $operator = null, $value = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orHaving($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "having between " clause to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function havingBetween($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->havingBetween($column, $values, $boolean, $not);
+            }
+         
+            /**
+             * Add a raw having clause to the query.
+             *
+             * @param string $sql
+             * @param array $bindings
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function havingRaw($sql, $bindings = [], $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->havingRaw($sql, $bindings, $boolean);
+            }
+         
+            /**
+             * Add a raw or having clause to the query.
+             *
+             * @param string $sql
+             * @param array $bindings
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function orHavingRaw($sql, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orHavingRaw($sql, $bindings);
+            }
+         
+            /**
+             * Add an "order by" clause to the query.
+             *
+             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column
+             * @param string $direction
+             * @return \Illuminate\Database\Query\Builder 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function orderBy($column, $direction = 'asc')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderBy($column, $direction);
+            }
+         
+            /**
+             * Add a descending "order by" clause to the query.
+             *
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orderByDesc($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderByDesc($column);
+            }
+         
+            /**
+             * Put the query's results in random order.
+             *
+             * @param string $seed
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function inRandomOrder($seed = '')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->inRandomOrder($seed);
+            }
+         
+            /**
+             * Add a raw "order by" clause to the query.
+             *
+             * @param string $sql
+             * @param array $bindings
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function orderByRaw($sql, $bindings = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderByRaw($sql, $bindings);
+            }
+         
+            /**
+             * Alias to set the "offset" value of the query.
+             *
+             * @param int $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function skip($value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->skip($value);
+            }
+         
+            /**
+             * Set the "offset" value of the query.
+             *
+             * @param int $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function offset($value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->offset($value);
+            }
+         
+            /**
+             * Alias to set the "limit" value of the query.
+             *
+             * @param int $value
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function take($value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->take($value);
+            }
+         
+            /**
+             * Set the "limit" value of the query.
+             *
+             * @param int $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function limit($value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->limit($value);
+            }
+         
+            /**
+             * Set the limit and offset for a given page.
+             *
+             * @param int $page
+             * @param int $perPage
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function forPage($page, $perPage = 15)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPage($page, $perPage);
+            }
+         
+            /**
+             * Constrain the query to the previous "page" of results before a given ID.
+             *
+             * @param int $perPage
+             * @param int|null $lastId
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPageBeforeId($perPage, $lastId, $column);
+            }
+         
+            /**
+             * Constrain the query to the next "page" of results after a given ID.
+             *
+             * @param int $perPage
+             * @param int|null $lastId
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPageAfterId($perPage, $lastId, $column);
+            }
+         
+            /**
+             * Add a union statement to the query.
+             *
+             * @param \Illuminate\Database\Query\Builder|\Closure $query
+             * @param bool $all
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function union($query, $all = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->union($query, $all);
+            }
+         
+            /**
+             * Add a union all statement to the query.
+             *
+             * @param \Illuminate\Database\Query\Builder|\Closure $query
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function unionAll($query)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->unionAll($query);
+            }
+         
+            /**
+             * Lock the selected rows in the table.
+             *
+             * @param string|bool $value
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function lock($value = true)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->lock($value);
+            }
+         
+            /**
+             * Lock the selected rows in the table for updating.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function lockForUpdate()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->lockForUpdate();
+            }
+         
+            /**
+             * Share lock the selected rows in the table.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function sharedLock()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->sharedLock();
+            }
+         
+            /**
+             * Get the SQL representation of the query.
+             *
+             * @return string 
+             * @static 
+             */ 
+            public static function toSql()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->toSql();
+            }
+         
+            /**
+             * Get the count of the total records for the paginator.
+             *
+             * @param array $columns
+             * @return int 
+             * @static 
+             */ 
+            public static function getCountForPagination($columns = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getCountForPagination($columns);
+            }
+         
+            /**
+             * Concatenate values of a given column as a string.
+             *
+             * @param string $column
+             * @param string $glue
+             * @return string 
+             * @static 
+             */ 
+            public static function implode($column, $glue = '')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->implode($column, $glue);
+            }
+         
+            /**
+             * Determine if any rows exist for the current query.
+             *
+             * @return bool 
+             * @static 
+             */ 
+            public static function exists()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->exists();
+            }
+         
+            /**
+             * Determine if no rows exist for the current query.
+             *
+             * @return bool 
+             * @static 
+             */ 
+            public static function doesntExist()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->doesntExist();
+            }
+         
+            /**
+             * Execute the given callback if no rows exist for the current query.
+             *
+             * @param \Closure $callback
+             * @return mixed 
+             * @static 
+             */ 
+            public static function existsOr($callback)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->existsOr($callback);
+            }
+         
+            /**
+             * Execute the given callback if rows exist for the current query.
+             *
+             * @param \Closure $callback
+             * @return mixed 
+             * @static 
+             */ 
+            public static function doesntExistOr($callback)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->doesntExistOr($callback);
+            }
+         
+            /**
+             * Retrieve the "count" result of the query.
+             *
+             * @param string $columns
+             * @return int 
+             * @static 
+             */ 
+            public static function count($columns = '*')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->count($columns);
+            }
+         
+            /**
+             * Retrieve the minimum value of a given column.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function min($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->min($column);
+            }
+         
+            /**
+             * Retrieve the maximum value of a given column.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function max($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->max($column);
+            }
+         
+            /**
+             * Retrieve the sum of the values of a given column.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function sum($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->sum($column);
+            }
+         
+            /**
+             * Retrieve the average of the values of a given column.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function avg($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->avg($column);
+            }
+         
+            /**
+             * Alias for the "avg" method.
+             *
+             * @param string $column
+             * @return mixed 
+             * @static 
+             */ 
+            public static function average($column)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->average($column);
+            }
+         
+            /**
+             * Execute an aggregate function on the database.
+             *
+             * @param string $function
+             * @param array $columns
+             * @return mixed 
+             * @static 
+             */ 
+            public static function aggregate($function, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->aggregate($function, $columns);
+            }
+         
+            /**
+             * Execute a numeric aggregate function on the database.
+             *
+             * @param string $function
+             * @param array $columns
+             * @return float|int 
+             * @static 
+             */ 
+            public static function numericAggregate($function, $columns = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->numericAggregate($function, $columns);
+            }
+         
+            /**
+             * Insert a new record into the database.
+             *
+             * @param array $values
+             * @return bool 
+             * @static 
+             */ 
+            public static function insert($values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insert($values);
+            }
+         
+            /**
+             * Insert a new record into the database while ignoring errors.
+             *
+             * @param array $values
+             * @return int 
+             * @static 
+             */ 
+            public static function insertOrIgnore($values)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insertOrIgnore($values);
+            }
+         
+            /**
+             * Insert a new record and get the value of the primary key.
+             *
+             * @param array $values
+             * @param string|null $sequence
+             * @return int 
+             * @static 
+             */ 
+            public static function insertGetId($values, $sequence = null)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insertGetId($values, $sequence);
+            }
+         
+            /**
+             * Insert new records into the table using a subquery.
+             *
+             * @param array $columns
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @return int 
+             * @static 
+             */ 
+            public static function insertUsing($columns, $query)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insertUsing($columns, $query);
+            }
+         
+            /**
+             * Insert or update a record matching the attributes, and fill it with values.
+             *
+             * @param array $attributes
+             * @param array $values
+             * @return bool 
+             * @static 
+             */ 
+            public static function updateOrInsert($attributes, $values = [])
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->updateOrInsert($attributes, $values);
+            }
+         
+            /**
+             * Run a truncate statement on the table.
+             *
+             * @return void 
+             * @static 
+             */ 
+            public static function truncate()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                $instance->truncate();
+            }
+         
+            /**
+             * Create a raw database expression.
+             *
+             * @param mixed $value
+             * @return \Illuminate\Database\Query\Expression 
+             * @static 
+             */ 
+            public static function raw($value)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->raw($value);
+            }
+         
+            /**
+             * Get the current query value bindings in a flattened array.
+             *
+             * @return array 
+             * @static 
+             */ 
+            public static function getBindings()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getBindings();
+            }
+         
+            /**
+             * Get the raw array of bindings.
+             *
+             * @return array 
+             * @static 
+             */ 
+            public static function getRawBindings()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getRawBindings();
+            }
+         
+            /**
+             * Set the bindings on the query builder.
+             *
+             * @param array $bindings
+             * @param string $type
+             * @return \Illuminate\Database\Query\Builder 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function setBindings($bindings, $type = 'where')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->setBindings($bindings, $type);
+            }
+         
+            /**
+             * Add a binding to the query.
+             *
+             * @param mixed $value
+             * @param string $type
+             * @return \Illuminate\Database\Query\Builder 
+             * @throws \InvalidArgumentException
+             * @static 
+             */ 
+            public static function addBinding($value, $type = 'where')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addBinding($value, $type);
+            }
+         
+            /**
+             * Merge an array of bindings into our bindings.
+             *
+             * @param \Illuminate\Database\Query\Builder $query
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function mergeBindings($query)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->mergeBindings($query);
+            }
+         
+            /**
+             * Get the database query processor instance.
+             *
+             * @return \Illuminate\Database\Query\Processors\Processor 
+             * @static 
+             */ 
+            public static function getProcessor()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getProcessor();
+            }
+         
+            /**
+             * Get the query grammar instance.
+             *
+             * @return \Illuminate\Database\Query\Grammars\Grammar 
+             * @static 
+             */ 
+            public static function getGrammar()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getGrammar();
+            }
+         
+            /**
+             * Use the write pdo for query.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function useWritePdo()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->useWritePdo();
+            }
+         
+            /**
+             * Clone the query without the given properties.
+             *
+             * @param array $properties
+             * @return static 
+             * @static 
+             */ 
+            public static function cloneWithout($properties)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->cloneWithout($properties);
+            }
+         
+            /**
+             * Clone the query without the given bindings.
+             *
+             * @param array $except
+             * @return static 
+             * @static 
+             */ 
+            public static function cloneWithoutBindings($except)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->cloneWithoutBindings($except);
+            }
+         
+            /**
+             * Dump the current SQL and bindings.
+             *
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function dump()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->dump();
+            }
+         
+            /**
+             * Die and dump the current SQL and bindings.
+             *
+             * @return void 
+             * @static 
+             */ 
+            public static function dd()
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                $instance->dd();
+            }
+         
+            /**
+             * Register a custom macro.
+             *
+             * @param string $name
+             * @param object|callable $macro
+             * @return void 
+             * @static 
+             */ 
+            public static function macro($name, $macro)
+            {
+                                \Illuminate\Database\Query\Builder::macro($name, $macro);
+            }
+         
+            /**
+             * Mix another object into the class.
+             *
+             * @param object $mixin
+             * @param bool $replace
+             * @return void 
+             * @throws \ReflectionException
+             * @static 
+             */ 
+            public static function mixin($mixin, $replace = true)
+            {
+                                \Illuminate\Database\Query\Builder::mixin($mixin, $replace);
+            }
+         
+            /**
+             * Dynamically handle calls to the class.
+             *
+             * @param string $method
+             * @param array $parameters
+             * @return mixed 
+             * @throws \BadMethodCallException
+             * @static 
+             */ 
+            public static function macroCall($method, $parameters)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->macroCall($method, $parameters);
+            }
+        }
+
+    class Event extends \Illuminate\Support\Facades\Event {}
+
+    class File extends \Illuminate\Support\Facades\File {}
+
+    class Gate extends \Illuminate\Support\Facades\Gate {}
+
+    class Hash extends \Illuminate\Support\Facades\Hash {}
+
+    class Lang extends \Illuminate\Support\Facades\Lang {}
+
+    class Log extends \Illuminate\Support\Facades\Log {}
+
+    class Mail extends \Illuminate\Support\Facades\Mail {}
+
+    class Notification extends \Illuminate\Support\Facades\Notification {}
+
+    class Password extends \Illuminate\Support\Facades\Password {}
+
+    class Queue extends \Illuminate\Support\Facades\Queue {}
+
+    class Redirect extends \Illuminate\Support\Facades\Redirect {}
+
+    class Request extends \Illuminate\Support\Facades\Request {}
+
+    class Response extends \Illuminate\Support\Facades\Response {}
+
+    class Route extends \Illuminate\Support\Facades\Route {}
+
+    class Schema extends \Illuminate\Support\Facades\Schema {}
+
+    class Session extends \Illuminate\Support\Facades\Session {}
+
+    class Storage extends \Illuminate\Support\Facades\Storage {}
+
+    class Str extends \Illuminate\Support\Str {}
+
+    class URL extends \Illuminate\Support\Facades\URL {}
+
+    class Validator extends \Illuminate\Support\Facades\Validator {}
+
+    class View extends \Illuminate\Support\Facades\View {}
+
+    class Debugbar extends \Barryvdh\Debugbar\Facade {}
+
+    class Flare extends \Facade\Ignition\Facades\Flare {}
+
+    class Image extends \Intervention\Image\Facades\Image {}
+ 
+}
+
+
+
+
Index: laravel58/config/hashing.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/hashing.php	(date 1592582522763)
+++ laravel58/config/hashing.php	(date 1592582522763)
@@ -0,0 +1,52 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Hash Driver
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default hash driver that will be used to hash
+    | passwords for your application. By default, the bcrypt algorithm is
+    | used; however, you remain free to modify this option if you wish.
+    |
+    | Supported: "bcrypt", "argon", "argon2id"
+    |
+    */
+
+    'driver' => 'bcrypt',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Bcrypt Options
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the configuration options that should be used when
+    | passwords are hashed using the Bcrypt algorithm. This will allow you
+    | to control the amount of time it takes to hash the given password.
+    |
+    */
+
+    'bcrypt' => [
+        'rounds' => env('BCRYPT_ROUNDS', 10),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Argon Options
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the configuration options that should be used when
+    | passwords are hashed using the Argon algorithm. These will allow you
+    | to control the amount of time it takes to hash the given password.
+    |
+    */
+
+    'argon' => [
+        'memory' => 1024,
+        'threads' => 2,
+        'time' => 2,
+    ],
+
+];
Index: laravel58/.phpstorm.meta.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.phpstorm.meta.php	(date 1599913452163)
+++ laravel58/.phpstorm.meta.php	(date 1599913452163)
@@ -0,0 +1,1301 @@
+<?php
+// @formatter:off
+
+namespace PHPSTORM_META {
+
+   /**
+    * PhpStorm Meta file, to provide autocomplete information for PhpStorm
+    * Generated on 2020-09-12 12:24:12.
+    *
+    * @author Barry vd. Heuvel <barryvdh@gmail.com>
+    * @see https://github.com/barryvdh/laravel-ide-helper
+    */
+    override(new \Illuminate\Contracts\Container\Container, map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\Illuminate\Container\Container::makeWith(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\Illuminate\Contracts\Container\Container::make(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\Illuminate\Contracts\Container\Container::makeWith(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\App::make(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\App::makeWith(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\app(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+    override(\resolve(0), map([
+        '' => '@',
+        'Barryvdh\Debugbar\LaravelDebugbar' => \Barryvdh\Debugbar\LaravelDebugbar::class,
+        'Facade\IgnitionContracts\SolutionProviderRepository' => \Facade\Ignition\SolutionProviders\SolutionProviderRepository::class,
+        'Facade\Ignition\DumpRecorder\DumpRecorder' => \Facade\Ignition\DumpRecorder\DumpRecorder::class,
+        'Facade\Ignition\ErrorPage\Renderer' => \Facade\Ignition\ErrorPage\Renderer::class,
+        'Facade\Ignition\IgnitionConfig' => \Facade\Ignition\IgnitionConfig::class,
+        'Facade\Ignition\LogRecorder\LogRecorder' => \Facade\Ignition\LogRecorder\LogRecorder::class,
+        'Facade\Ignition\QueryRecorder\QueryRecorder' => \Facade\Ignition\QueryRecorder\QueryRecorder::class,
+        'Illuminate\Auth\Middleware\RequirePassword' => \Illuminate\Auth\Middleware\RequirePassword::class,
+        'Illuminate\Broadcasting\BroadcastManager' => \Illuminate\Broadcasting\BroadcastManager::class,
+        'Illuminate\Bus\Dispatcher' => \Illuminate\Bus\Dispatcher::class,
+        'Illuminate\Console\Scheduling\Schedule' => \Illuminate\Console\Scheduling\Schedule::class,
+        'Illuminate\Console\Scheduling\ScheduleFinishCommand' => \Illuminate\Console\Scheduling\ScheduleFinishCommand::class,
+        'Illuminate\Console\Scheduling\ScheduleRunCommand' => \Illuminate\Console\Scheduling\ScheduleRunCommand::class,
+        'Illuminate\Contracts\Auth\Access\Gate' => \Illuminate\Auth\Access\Gate::class,
+        'Illuminate\Contracts\Broadcasting\Broadcaster' => \Illuminate\Broadcasting\Broadcasters\LogBroadcaster::class,
+        'Illuminate\Contracts\Console\Kernel' => \App\Console\Kernel::class,
+        'Illuminate\Contracts\Debug\ExceptionHandler' => \NunoMaduro\Collision\Adapters\Laravel\ExceptionHandler::class,
+        'Illuminate\Contracts\Http\Kernel' => \App\Http\Kernel::class,
+        'Illuminate\Contracts\Pipeline\Hub' => \Illuminate\Pipeline\Hub::class,
+        'Illuminate\Contracts\Queue\EntityResolver' => \Illuminate\Database\Eloquent\QueueEntityResolver::class,
+        'Illuminate\Contracts\Routing\ResponseFactory' => \Illuminate\Routing\ResponseFactory::class,
+        'Illuminate\Foundation\Mix' => \Illuminate\Foundation\Mix::class,
+        'Illuminate\Mail\Markdown' => \Illuminate\Mail\Markdown::class,
+        'Illuminate\Notifications\ChannelManager' => \Illuminate\Notifications\ChannelManager::class,
+        'Illuminate\Routing\Contracts\ControllerDispatcher' => \Illuminate\Routing\ControllerDispatcher::class,
+        'Illuminate\Session\Middleware\StartSession' => \Illuminate\Session\Middleware\StartSession::class,
+        'NunoMaduro\Collision\Contracts\Adapters\Phpunit\Listener' => \NunoMaduro\Collision\Adapters\Phpunit\Listener::class,
+        'NunoMaduro\Collision\Contracts\Provider' => \NunoMaduro\Collision\Provider::class,
+        'Whoops\Handler\HandlerInterface' => \Facade\Ignition\ErrorPage\IgnitionWhoopsHandler::class,
+        'auth' => \Illuminate\Auth\AuthManager::class,
+        'auth.driver' => \Illuminate\Auth\SessionGuard::class,
+        'auth.password' => \Illuminate\Auth\Passwords\PasswordBrokerManager::class,
+        'auth.password.broker' => \Illuminate\Auth\Passwords\PasswordBroker::class,
+        'blade.compiler' => \Illuminate\View\Compilers\BladeCompiler::class,
+        'cache' => \Illuminate\Cache\CacheManager::class,
+        'cache.store' => \Illuminate\Cache\Repository::class,
+        'command.auth.resets.clear' => \Illuminate\Auth\Console\ClearResetsCommand::class,
+        'command.cache.clear' => \Illuminate\Cache\Console\ClearCommand::class,
+        'command.cache.forget' => \Illuminate\Cache\Console\ForgetCommand::class,
+        'command.cache.table' => \Illuminate\Cache\Console\CacheTableCommand::class,
+        'command.channel.make' => \Illuminate\Foundation\Console\ChannelMakeCommand::class,
+        'command.clear-compiled' => \Illuminate\Foundation\Console\ClearCompiledCommand::class,
+        'command.config.cache' => \Illuminate\Foundation\Console\ConfigCacheCommand::class,
+        'command.config.clear' => \Illuminate\Foundation\Console\ConfigClearCommand::class,
+        'command.console.make' => \Illuminate\Foundation\Console\ConsoleMakeCommand::class,
+        'command.controller.make' => \Illuminate\Routing\Console\ControllerMakeCommand::class,
+        'command.db.wipe' => \Illuminate\Database\Console\WipeCommand::class,
+        'command.debugbar.clear' => \Barryvdh\Debugbar\Console\ClearCommand::class,
+        'command.down' => \Illuminate\Foundation\Console\DownCommand::class,
+        'command.dumpserver' => \BeyondCode\DumpServer\DumpServerCommand::class,
+        'command.environment' => \Illuminate\Foundation\Console\EnvironmentCommand::class,
+        'command.event.cache' => \Illuminate\Foundation\Console\EventCacheCommand::class,
+        'command.event.clear' => \Illuminate\Foundation\Console\EventClearCommand::class,
+        'command.event.generate' => \Illuminate\Foundation\Console\EventGenerateCommand::class,
+        'command.event.list' => \Illuminate\Foundation\Console\EventListCommand::class,
+        'command.event.make' => \Illuminate\Foundation\Console\EventMakeCommand::class,
+        'command.exception.make' => \Illuminate\Foundation\Console\ExceptionMakeCommand::class,
+        'command.factory.make' => \Illuminate\Database\Console\Factories\FactoryMakeCommand::class,
+        'command.flare:test' => \Facade\Ignition\Commands\TestCommand::class,
+        'command.ide-helper.eloquent' => \Barryvdh\LaravelIdeHelper\Console\EloquentCommand::class,
+        'command.ide-helper.generate' => \Barryvdh\LaravelIdeHelper\Console\GeneratorCommand::class,
+        'command.ide-helper.meta' => \Barryvdh\LaravelIdeHelper\Console\MetaCommand::class,
+        'command.ide-helper.models' => \Barryvdh\LaravelIdeHelper\Console\ModelsCommand::class,
+        'command.job.make' => \Illuminate\Foundation\Console\JobMakeCommand::class,
+        'command.key.generate' => \Illuminate\Foundation\Console\KeyGenerateCommand::class,
+        'command.listener.make' => \Illuminate\Foundation\Console\ListenerMakeCommand::class,
+        'command.mail.make' => \Illuminate\Foundation\Console\MailMakeCommand::class,
+        'command.make:solution' => \Facade\Ignition\Commands\SolutionMakeCommand::class,
+        'command.middleware.make' => \Illuminate\Routing\Console\MiddlewareMakeCommand::class,
+        'command.migrate' => \Illuminate\Database\Console\Migrations\MigrateCommand::class,
+        'command.migrate.fresh' => \Illuminate\Database\Console\Migrations\FreshCommand::class,
+        'command.migrate.install' => \Illuminate\Database\Console\Migrations\InstallCommand::class,
+        'command.migrate.make' => \Illuminate\Database\Console\Migrations\MigrateMakeCommand::class,
+        'command.migrate.refresh' => \Illuminate\Database\Console\Migrations\RefreshCommand::class,
+        'command.migrate.reset' => \Illuminate\Database\Console\Migrations\ResetCommand::class,
+        'command.migrate.rollback' => \Illuminate\Database\Console\Migrations\RollbackCommand::class,
+        'command.migrate.status' => \Illuminate\Database\Console\Migrations\StatusCommand::class,
+        'command.model.make' => \Illuminate\Foundation\Console\ModelMakeCommand::class,
+        'command.notification.make' => \Illuminate\Foundation\Console\NotificationMakeCommand::class,
+        'command.notification.table' => \Illuminate\Notifications\Console\NotificationTableCommand::class,
+        'command.observer.make' => \Illuminate\Foundation\Console\ObserverMakeCommand::class,
+        'command.optimize' => \Illuminate\Foundation\Console\OptimizeCommand::class,
+        'command.optimize.clear' => \Illuminate\Foundation\Console\OptimizeClearCommand::class,
+        'command.package.discover' => \Illuminate\Foundation\Console\PackageDiscoverCommand::class,
+        'command.policy.make' => \Illuminate\Foundation\Console\PolicyMakeCommand::class,
+        'command.preset' => \Illuminate\Foundation\Console\PresetCommand::class,
+        'command.provider.make' => \Illuminate\Foundation\Console\ProviderMakeCommand::class,
+        'command.queue.failed' => \Illuminate\Queue\Console\ListFailedCommand::class,
+        'command.queue.failed-table' => \Illuminate\Queue\Console\FailedTableCommand::class,
+        'command.queue.flush' => \Illuminate\Queue\Console\FlushFailedCommand::class,
+        'command.queue.forget' => \Illuminate\Queue\Console\ForgetFailedCommand::class,
+        'command.queue.listen' => \Illuminate\Queue\Console\ListenCommand::class,
+        'command.queue.restart' => \Illuminate\Queue\Console\RestartCommand::class,
+        'command.queue.retry' => \Illuminate\Queue\Console\RetryCommand::class,
+        'command.queue.table' => \Illuminate\Queue\Console\TableCommand::class,
+        'command.queue.work' => \Illuminate\Queue\Console\WorkCommand::class,
+        'command.request.make' => \Illuminate\Foundation\Console\RequestMakeCommand::class,
+        'command.resource.make' => \Illuminate\Foundation\Console\ResourceMakeCommand::class,
+        'command.route.cache' => \Illuminate\Foundation\Console\RouteCacheCommand::class,
+        'command.route.clear' => \Illuminate\Foundation\Console\RouteClearCommand::class,
+        'command.route.list' => \Illuminate\Foundation\Console\RouteListCommand::class,
+        'command.rule.make' => \Illuminate\Foundation\Console\RuleMakeCommand::class,
+        'command.seed' => \Illuminate\Database\Console\Seeds\SeedCommand::class,
+        'command.seeder.make' => \Illuminate\Database\Console\Seeds\SeederMakeCommand::class,
+        'command.serve' => \Illuminate\Foundation\Console\ServeCommand::class,
+        'command.session.table' => \Illuminate\Session\Console\SessionTableCommand::class,
+        'command.storage.link' => \Illuminate\Foundation\Console\StorageLinkCommand::class,
+        'command.test.make' => \Illuminate\Foundation\Console\TestMakeCommand::class,
+        'command.tinker' => \Laravel\Tinker\Console\TinkerCommand::class,
+        'command.up' => \Illuminate\Foundation\Console\UpCommand::class,
+        'command.vendor.publish' => \Illuminate\Foundation\Console\VendorPublishCommand::class,
+        'command.view.cache' => \Illuminate\Foundation\Console\ViewCacheCommand::class,
+        'command.view.clear' => \Illuminate\Foundation\Console\ViewClearCommand::class,
+        'composer' => \Illuminate\Support\Composer::class,
+        'cookie' => \Illuminate\Cookie\CookieJar::class,
+        'db' => \Illuminate\Database\DatabaseManager::class,
+        'db.connection' => \Illuminate\Database\MySqlConnection::class,
+        'db.factory' => \Illuminate\Database\Connectors\ConnectionFactory::class,
+        'encrypter' => \Illuminate\Encryption\Encrypter::class,
+        'events' => \Illuminate\Events\Dispatcher::class,
+        'files' => \Illuminate\Filesystem\Filesystem::class,
+        'filesystem' => \Illuminate\Filesystem\FilesystemManager::class,
+        'filesystem.disk' => \Illuminate\Filesystem\FilesystemAdapter::class,
+        'flare.client' => \Facade\FlareClient\Flare::class,
+        'flare.http' => \Facade\FlareClient\Http\Client::class,
+        'flare.logger' => \Monolog\Logger::class,
+        'hash' => \Illuminate\Hashing\HashManager::class,
+        'hash.driver' => \Illuminate\Hashing\BcryptHasher::class,
+        'image' => \Intervention\Image\ImageManager::class,
+        'log' => \Illuminate\Log\LogManager::class,
+        'mailer' => \Illuminate\Mail\Mailer::class,
+        'memcached.connector' => \Illuminate\Cache\MemcachedConnector::class,
+        'migration.creator' => \Illuminate\Database\Migrations\MigrationCreator::class,
+        'migration.repository' => \Illuminate\Database\Migrations\DatabaseMigrationRepository::class,
+        'migrator' => \Illuminate\Database\Migrations\Migrator::class,
+        'queue' => \Illuminate\Queue\QueueManager::class,
+        'queue.connection' => \Illuminate\Queue\DatabaseQueue::class,
+        'queue.failer' => \Illuminate\Queue\Failed\DatabaseFailedJobProvider::class,
+        'queue.listener' => \Illuminate\Queue\Listener::class,
+        'queue.worker' => \Illuminate\Queue\Worker::class,
+        'redirect' => \Illuminate\Routing\Redirector::class,
+        'redis' => \Illuminate\Redis\RedisManager::class,
+        'router' => \Illuminate\Routing\Router::class,
+        'session' => \Illuminate\Session\SessionManager::class,
+        'session.store' => \Illuminate\Session\Store::class,
+        'swift.mailer' => \Swift_Mailer::class,
+        'swift.transport' => \Illuminate\Mail\TransportManager::class,
+        'translation.loader' => \Illuminate\Translation\FileLoader::class,
+        'translator' => \Illuminate\Translation\Translator::class,
+        'url' => \Illuminate\Routing\UrlGenerator::class,
+        'validation.presence' => \Illuminate\Validation\DatabasePresenceVerifier::class,
+        'view' => \Illuminate\View\Factory::class,
+        'view.engine.resolver' => \Illuminate\View\Engines\EngineResolver::class,
+        'view.finder' => \Illuminate\View\FileViewFinder::class,
+    ]));
+
+
+    override(\Illuminate\Support\Arr::add(0), type(0));
+    override(\Illuminate\Support\Arr::except(0), type(0));
+    override(\Illuminate\Support\Arr::first(0), elementType(0));
+    override(\Illuminate\Support\Arr::last(0), elementType(0));
+    override(\Illuminate\Support\Arr::get(0), elementType(0));
+    override(\Illuminate\Support\Arr::only(0), type(0));
+    override(\Illuminate\Support\Arr::prepend(0), type(0));
+    override(\Illuminate\Support\Arr::pull(0), elementType(0));
+    override(\Illuminate\Support\Arr::set(0), type(0));
+    override(\Illuminate\Support\Arr::shuffle(0), type(0));
+    override(\Illuminate\Support\Arr::sort(0), type(0));
+    override(\Illuminate\Support\Arr::sortRecursive(0), type(0));
+    override(\Illuminate\Support\Arr::where(0), type(0));
+    override(\array_add(0), type(0));
+    override(\array_except(0), type(0));
+    override(\array_first(0), elementType(0));
+    override(\array_last(0), elementType(0));
+    override(\array_get(0), elementType(0));
+    override(\array_only(0), type(0));
+    override(\array_prepend(0), type(0));
+    override(\array_pull(0), elementType(0));
+    override(\array_set(0), type(0));
+    override(\array_sort(0), type(0));
+    override(\array_sort_recursive(0), type(0));
+    override(\array_where(0), type(0));
+    override(\head(0), elementType(0));
+    override(\last(0), elementType(0));
+    override(\with(0), type(0));
+    override(\tap(0), type(0));
+
+}
Index: laravel58/config/logging.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/logging.php	(date 1592582522763)
+++ laravel58/config/logging.php	(date 1592582522763)
@@ -0,0 +1,94 @@
+<?php
+
+use Monolog\Handler\StreamHandler;
+use Monolog\Handler\SyslogUdpHandler;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Log Channel
+    |--------------------------------------------------------------------------
+    |
+    | This option defines the default log channel that gets used when writing
+    | messages to the logs. The name specified in this option should match
+    | one of the channels defined in the "channels" configuration array.
+    |
+    */
+
+    'default' => env('LOG_CHANNEL', 'stack'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Log Channels
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure the log channels for your application. Out of
+    | the box, Laravel uses the Monolog PHP logging library. This gives
+    | you a variety of powerful log handlers / formatters to utilize.
+    |
+    | Available Drivers: "single", "daily", "slack", "syslog",
+    |                    "errorlog", "monolog",
+    |                    "custom", "stack"
+    |
+    */
+
+    'channels' => [
+        'stack' => [
+            'driver' => 'stack',
+            'channels' => ['daily'],
+            'ignore_exceptions' => false,
+        ],
+
+        'single' => [
+            'driver' => 'single',
+            'path' => storage_path('logs/laravel.log'),
+            'level' => 'debug',
+        ],
+
+        'daily' => [
+            'driver' => 'daily',
+            'path' => storage_path('logs/laravel.log'),
+            'level' => 'debug',
+            'days' => 14,
+        ],
+
+        'slack' => [
+            'driver' => 'slack',
+            'url' => env('LOG_SLACK_WEBHOOK_URL'),
+            'username' => 'Laravel Log',
+            'emoji' => ':boom:',
+            'level' => 'critical',
+        ],
+
+        'papertrail' => [
+            'driver' => 'monolog',
+            'level' => 'debug',
+            'handler' => SyslogUdpHandler::class,
+            'handler_with' => [
+                'host' => env('PAPERTRAIL_URL'),
+                'port' => env('PAPERTRAIL_PORT'),
+            ],
+        ],
+
+        'stderr' => [
+            'driver' => 'monolog',
+            'handler' => StreamHandler::class,
+            'formatter' => env('LOG_STDERR_FORMATTER'),
+            'with' => [
+                'stream' => 'php://stderr',
+            ],
+        ],
+
+        'syslog' => [
+            'driver' => 'syslog',
+            'level' => 'debug',
+        ],
+
+        'errorlog' => [
+            'driver' => 'errorlog',
+            'level' => 'debug',
+        ],
+    ],
+
+];
Index: laravel58/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/package.json	(date 1592582522772)
+++ laravel58/package.json	(date 1592582522772)
@@ -0,0 +1,25 @@
+{
+    "private": true,
+    "scripts": {
+        "dev": "npm run development",
+        "development": "cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js",
+        "watch": "npm run development -- --watch",
+        "watch-poll": "npm run watch -- --watch-poll",
+        "hot": "cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js",
+        "prod": "npm run production",
+        "production": "cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js"
+    },
+    "devDependencies": {
+        "axios": "^0.19",
+        "bootstrap": "^4.1.0",
+        "cross-env": "^5.1",
+        "jquery": "^3.2",
+        "laravel-mix": "^4.0.7",
+        "lodash": "^4.17.13",
+        "popper.js": "^1.12",
+        "resolve-url-loader": "^2.3.1",
+        "sass": "^1.15.2",
+        "sass-loader": "^7.1.0",
+        "vue": "^2.5.17"
+    }
+}
Index: laravel58/config/mail.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/mail.php	(date 1592582522764)
+++ laravel58/config/mail.php	(date 1592582522764)
@@ -0,0 +1,136 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Mail Driver
+    |--------------------------------------------------------------------------
+    |
+    | Laravel supports both SMTP and PHP's "mail" function as drivers for the
+    | sending of e-mail. You may specify which one you're using throughout
+    | your application here. By default, Laravel is setup for SMTP mail.
+    |
+    | Supported: "smtp", "sendmail", "mailgun", "mandrill", "ses",
+    |            "sparkpost", "postmark", "log", "array"
+    |
+    */
+
+    'driver' => env('MAIL_DRIVER', 'smtp'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | SMTP Host Address
+    |--------------------------------------------------------------------------
+    |
+    | Here you may provide the host address of the SMTP server used by your
+    | applications. A default option is provided that is compatible with
+    | the Mailgun mail service which will provide reliable deliveries.
+    |
+    */
+
+    'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | SMTP Host Port
+    |--------------------------------------------------------------------------
+    |
+    | This is the SMTP port used by your application to deliver e-mails to
+    | users of the application. Like the host we have set this value to
+    | stay compatible with the Mailgun e-mail application by default.
+    |
+    */
+
+    'port' => env('MAIL_PORT', 587),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Global "From" Address
+    |--------------------------------------------------------------------------
+    |
+    | You may wish for all e-mails sent by your application to be sent from
+    | the same address. Here, you may specify a name and address that is
+    | used globally for all e-mails that are sent by your application.
+    |
+    */
+
+    'from' => [
+        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
+        'name' => env('MAIL_FROM_NAME', 'Example'),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | E-Mail Encryption Protocol
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the encryption protocol that should be used when
+    | the application send e-mail messages. A sensible default using the
+    | transport layer security protocol should provide great security.
+    |
+    */
+
+    'encryption' => env('MAIL_ENCRYPTION', 'tls'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | SMTP Server Username
+    |--------------------------------------------------------------------------
+    |
+    | If your SMTP server requires a username for authentication, you should
+    | set it here. This will get used to authenticate with your server on
+    | connection. You may also set the "password" value below this one.
+    |
+    */
+
+    'username' => env('MAIL_USERNAME'),
+
+    'password' => env('MAIL_PASSWORD'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Sendmail System Path
+    |--------------------------------------------------------------------------
+    |
+    | When using the "sendmail" driver to send e-mails, we will need to know
+    | the path to where Sendmail lives on this server. A default path has
+    | been provided here, which will work well on most of your systems.
+    |
+    */
+
+    'sendmail' => '/usr/sbin/sendmail -bs',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Markdown Mail Settings
+    |--------------------------------------------------------------------------
+    |
+    | If you are using Markdown based email rendering, you may configure your
+    | theme and component paths here, allowing you to customize the design
+    | of the emails. Or, you may simply stick with the Laravel defaults!
+    |
+    */
+
+    'markdown' => [
+        'theme' => 'default',
+
+        'paths' => [
+            resource_path('views/vendor/mail'),
+        ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Log Channel
+    |--------------------------------------------------------------------------
+    |
+    | If you are using the "log" driver, you may specify the logging channel
+    | if you prefer to keep mail messages separate from other log entries
+    | for simpler reading. Otherwise, the default channel will be used.
+    |
+    */
+
+    'log_channel' => env('MAIL_LOG_CHANNEL'),
+
+];
Index: laravel58/phpunit.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/phpunit.xml	(date 1592582522772)
+++ laravel58/phpunit.xml	(date 1592582522772)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<phpunit backupGlobals="false"
+         backupStaticAttributes="false"
+         bootstrap="vendor/autoload.php"
+         colors="true"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         processIsolation="false"
+         stopOnFailure="false">
+    <testsuites>
+        <testsuite name="Unit">
+            <directory suffix="Test.php">./tests/Unit</directory>
+        </testsuite>
+
+        <testsuite name="Feature">
+            <directory suffix="Test.php">./tests/Feature</directory>
+        </testsuite>
+    </testsuites>
+    <filter>
+        <whitelist processUncoveredFilesFromWhitelist="true">
+            <directory suffix=".php">./app</directory>
+        </whitelist>
+    </filter>
+    <php>
+        <server name="APP_ENV" value="testing"/>
+        <server name="BCRYPT_ROUNDS" value="4"/>
+        <server name="CACHE_DRIVER" value="array"/>
+        <server name="MAIL_DRIVER" value="array"/>
+        <server name="QUEUE_CONNECTION" value="sync"/>
+        <server name="SESSION_DRIVER" value="array"/>
+    </php>
+</phpunit>
Index: laravel58/composer.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/composer.lock	(date 1599913444989)
+++ laravel58/composer.lock	(date 1599913444989)
@@ -0,0 +1,6958 @@
+{
+    "_readme": [
+        "This file locks the dependencies of your project to a known state",
+        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
+        "This file is @generated automatically"
+    ],
+    "content-hash": "92e80d1e3e92186844a2a11be2c2aca9",
+    "packages": [
+        {
+            "name": "dnoegel/php-xdg-base-dir",
+            "version": "v0.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/dnoegel/php-xdg-base-dir.git",
+                "reference": "8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd",
+                "reference": "8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~7.0|~6.0|~5.0|~4.8.35"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "XdgBaseDir\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "implementation of xdg base directory specification for php",
+            "time": "2019-12-04T15:06:13+00:00"
+        },
+        {
+            "name": "doctrine/inflector",
+            "version": "2.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/inflector.git",
+                "reference": "9cf661f4eb38f7c881cac67c75ea9b00bf97b210"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/inflector/zipball/9cf661f4eb38f7c881cac67c75ea9b00bf97b210",
+                "reference": "9cf661f4eb38f7c881cac67c75ea9b00bf97b210",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2 || ^8.0"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^7.0",
+                "phpstan/phpstan": "^0.11",
+                "phpstan/phpstan-phpunit": "^0.11",
+                "phpstan/phpstan-strict-rules": "^0.11",
+                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Inflector\\": "lib/Doctrine/Inflector"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Benjamin Eberlei",
+                    "email": "kontakt@beberlei.de"
+                },
+                {
+                    "name": "Jonathan Wage",
+                    "email": "jonwage@gmail.com"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.",
+            "homepage": "https://www.doctrine-project.org/projects/inflector.html",
+            "keywords": [
+                "inflection",
+                "inflector",
+                "lowercase",
+                "manipulation",
+                "php",
+                "plural",
+                "singular",
+                "strings",
+                "uppercase",
+                "words"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finflector",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-29T15:13:26+00:00"
+        },
+        {
+            "name": "doctrine/lexer",
+            "version": "1.2.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/lexer.git",
+                "reference": "e864bbf5904cb8f5bb334f99209b48018522f042"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/lexer/zipball/e864bbf5904cb8f5bb334f99209b48018522f042",
+                "reference": "e864bbf5904cb8f5bb334f99209b48018522f042",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2 || ^8.0"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^6.0",
+                "phpstan/phpstan": "^0.11.8",
+                "phpunit/phpunit": "^8.2"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Common\\Lexer\\": "lib/Doctrine/Common/Lexer"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.",
+            "homepage": "https://www.doctrine-project.org/projects/lexer.html",
+            "keywords": [
+                "annotations",
+                "docblock",
+                "lexer",
+                "parser",
+                "php"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Flexer",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-25T17:44:05+00:00"
+        },
+        {
+            "name": "dragonmantank/cron-expression",
+            "version": "v2.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/dragonmantank/cron-expression.git",
+                "reference": "72b6fbf76adb3cf5bc0db68559b33d41219aba27"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/dragonmantank/cron-expression/zipball/72b6fbf76adb3cf5bc0db68559b33d41219aba27",
+                "reference": "72b6fbf76adb3cf5bc0db68559b33d41219aba27",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.4|^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.3-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Cron\\": "src/Cron/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Michael Dowling",
+                    "email": "mtdowling@gmail.com",
+                    "homepage": "https://github.com/mtdowling"
+                },
+                {
+                    "name": "Chris Tankersley",
+                    "email": "chris@ctankersley.com",
+                    "homepage": "https://github.com/dragonmantank"
+                }
+            ],
+            "description": "CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due",
+            "keywords": [
+                "cron",
+                "schedule"
+            ],
+            "time": "2019-03-31T00:38:28+00:00"
+        },
+        {
+            "name": "egulias/email-validator",
+            "version": "2.1.18",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/egulias/EmailValidator.git",
+                "reference": "cfa3d44471c7f5bfb684ac2b0da7114283d78441"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/cfa3d44471c7f5bfb684ac2b0da7114283d78441",
+                "reference": "cfa3d44471c7f5bfb684ac2b0da7114283d78441",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/lexer": "^1.0.1",
+                "php": ">=5.5",
+                "symfony/polyfill-intl-idn": "^1.10"
+            },
+            "require-dev": {
+                "dominicsayers/isemail": "^3.0.7",
+                "phpunit/phpunit": "^4.8.36|^7.5.15",
+                "satooshi/php-coveralls": "^1.0.1"
+            },
+            "suggest": {
+                "ext-intl": "PHP Internationalization Libraries are required to use the SpoofChecking validation"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Egulias\\EmailValidator\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Eduardo Gulias Davis"
+                }
+            ],
+            "description": "A library for validating emails against several RFCs",
+            "homepage": "https://github.com/egulias/EmailValidator",
+            "keywords": [
+                "email",
+                "emailvalidation",
+                "emailvalidator",
+                "validation",
+                "validator"
+            ],
+            "time": "2020-06-16T20:11:17+00:00"
+        },
+        {
+            "name": "fideloper/proxy",
+            "version": "4.4.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/fideloper/TrustedProxy.git",
+                "reference": "9beebf48a1c344ed67c1d36bb1b8709db7c3c1a8"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/fideloper/TrustedProxy/zipball/9beebf48a1c344ed67c1d36bb1b8709db7c3c1a8",
+                "reference": "9beebf48a1c344ed67c1d36bb1b8709db7c3c1a8",
+                "shasum": ""
+            },
+            "require": {
+                "illuminate/contracts": "^5.0|^6.0|^7.0|^8.0",
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "illuminate/http": "^5.0|^6.0|^7.0|^8.0",
+                "mockery/mockery": "^1.0",
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "laravel": {
+                    "providers": [
+                        "Fideloper\\Proxy\\TrustedProxyServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Fideloper\\Proxy\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Fidao",
+                    "email": "fideloper@gmail.com"
+                }
+            ],
+            "description": "Set trusted proxies for Laravel",
+            "keywords": [
+                "load balancing",
+                "proxy",
+                "trusted proxy"
+            ],
+            "time": "2020-06-23T01:36:47+00:00"
+        },
+        {
+            "name": "guzzlehttp/psr7",
+            "version": "1.6.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/guzzle/psr7.git",
+                "reference": "239400de7a173fe9901b9ac7c06497751f00727a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/guzzle/psr7/zipball/239400de7a173fe9901b9ac7c06497751f00727a",
+                "reference": "239400de7a173fe9901b9ac7c06497751f00727a",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.4.0",
+                "psr/http-message": "~1.0",
+                "ralouphie/getallheaders": "^2.0.5 || ^3.0.0"
+            },
+            "provide": {
+                "psr/http-message-implementation": "1.0"
+            },
+            "require-dev": {
+                "ext-zlib": "*",
+                "phpunit/phpunit": "~4.8.36 || ^5.7.27 || ^6.5.8"
+            },
+            "suggest": {
+                "zendframework/zend-httphandlerrunner": "Emit PSR-7 responses"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.6-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "GuzzleHttp\\Psr7\\": "src/"
+                },
+                "files": [
+                    "src/functions_include.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Michael Dowling",
+                    "email": "mtdowling@gmail.com",
+                    "homepage": "https://github.com/mtdowling"
+                },
+                {
+                    "name": "Tobias Schultze",
+                    "homepage": "https://github.com/Tobion"
+                }
+            ],
+            "description": "PSR-7 message implementation that also provides common utility methods",
+            "keywords": [
+                "http",
+                "message",
+                "psr-7",
+                "request",
+                "response",
+                "stream",
+                "uri",
+                "url"
+            ],
+            "time": "2019-07-01T23:21:34+00:00"
+        },
+        {
+            "name": "intervention/image",
+            "version": "2.5.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Intervention/image.git",
+                "reference": "abbf18d5ab8367f96b3205ca3c89fb2fa598c69e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Intervention/image/zipball/abbf18d5ab8367f96b3205ca3c89fb2fa598c69e",
+                "reference": "abbf18d5ab8367f96b3205ca3c89fb2fa598c69e",
+                "shasum": ""
+            },
+            "require": {
+                "ext-fileinfo": "*",
+                "guzzlehttp/psr7": "~1.1",
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "mockery/mockery": "~0.9.2",
+                "phpunit/phpunit": "^4.8 || ^5.7"
+            },
+            "suggest": {
+                "ext-gd": "to use GD library based image processing.",
+                "ext-imagick": "to use Imagick based image processing.",
+                "intervention/imagecache": "Caching extension for the Intervention Image library"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.4-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Intervention\\Image\\ImageServiceProvider"
+                    ],
+                    "aliases": {
+                        "Image": "Intervention\\Image\\Facades\\Image"
+                    }
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Intervention\\Image\\": "src/Intervention/Image"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Oliver Vogel",
+                    "email": "oliver@olivervogel.com",
+                    "homepage": "http://olivervogel.com/"
+                }
+            ],
+            "description": "Image handling and manipulation library with support for Laravel integration",
+            "homepage": "http://image.intervention.io/",
+            "keywords": [
+                "gd",
+                "image",
+                "imagick",
+                "laravel",
+                "thumbnail",
+                "watermark"
+            ],
+            "time": "2019-11-02T09:15:47+00:00"
+        },
+        {
+            "name": "laravel/framework",
+            "version": "v6.18.22",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/laravel/framework.git",
+                "reference": "95f33151375bb2e4747b871854c8becc23502901"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/laravel/framework/zipball/95f33151375bb2e4747b871854c8becc23502901",
+                "reference": "95f33151375bb2e4747b871854c8becc23502901",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/inflector": "^1.4|^2.0",
+                "dragonmantank/cron-expression": "^2.0",
+                "egulias/email-validator": "^2.1.10",
+                "ext-json": "*",
+                "ext-mbstring": "*",
+                "ext-openssl": "*",
+                "league/commonmark": "^1.3",
+                "league/flysystem": "^1.0.34",
+                "monolog/monolog": "^1.12|^2.0",
+                "nesbot/carbon": "^2.0",
+                "opis/closure": "^3.1",
+                "php": "^7.2",
+                "psr/container": "^1.0",
+                "psr/simple-cache": "^1.0",
+                "ramsey/uuid": "^3.7",
+                "swiftmailer/swiftmailer": "^6.0",
+                "symfony/console": "^4.3.4",
+                "symfony/debug": "^4.3.4",
+                "symfony/finder": "^4.3.4",
+                "symfony/http-foundation": "^4.3.4",
+                "symfony/http-kernel": "^4.3.4",
+                "symfony/polyfill-php73": "^1.17",
+                "symfony/process": "^4.3.4",
+                "symfony/routing": "^4.3.4",
+                "symfony/var-dumper": "^4.3.4",
+                "tijsverkoyen/css-to-inline-styles": "^2.2.1",
+                "vlucas/phpdotenv": "^3.3"
+            },
+            "conflict": {
+                "tightenco/collect": "<5.5.33"
+            },
+            "replace": {
+                "illuminate/auth": "self.version",
+                "illuminate/broadcasting": "self.version",
+                "illuminate/bus": "self.version",
+                "illuminate/cache": "self.version",
+                "illuminate/config": "self.version",
+                "illuminate/console": "self.version",
+                "illuminate/container": "self.version",
+                "illuminate/contracts": "self.version",
+                "illuminate/cookie": "self.version",
+                "illuminate/database": "self.version",
+                "illuminate/encryption": "self.version",
+                "illuminate/events": "self.version",
+                "illuminate/filesystem": "self.version",
+                "illuminate/hashing": "self.version",
+                "illuminate/http": "self.version",
+                "illuminate/log": "self.version",
+                "illuminate/mail": "self.version",
+                "illuminate/notifications": "self.version",
+                "illuminate/pagination": "self.version",
+                "illuminate/pipeline": "self.version",
+                "illuminate/queue": "self.version",
+                "illuminate/redis": "self.version",
+                "illuminate/routing": "self.version",
+                "illuminate/session": "self.version",
+                "illuminate/support": "self.version",
+                "illuminate/translation": "self.version",
+                "illuminate/validation": "self.version",
+                "illuminate/view": "self.version"
+            },
+            "require-dev": {
+                "aws/aws-sdk-php": "^3.0",
+                "doctrine/dbal": "^2.6",
+                "filp/whoops": "^2.4",
+                "guzzlehttp/guzzle": "^6.3|^7.0",
+                "league/flysystem-cached-adapter": "^1.0",
+                "mockery/mockery": "^1.3.1",
+                "moontoast/math": "^1.1",
+                "orchestra/testbench-core": "^4.0",
+                "pda/pheanstalk": "^4.0",
+                "phpunit/phpunit": "^7.5.15|^8.4|^9.0",
+                "predis/predis": "^1.1.1",
+                "symfony/cache": "^4.3.4"
+            },
+            "suggest": {
+                "aws/aws-sdk-php": "Required to use the SQS queue driver, DynamoDb failed job storage and SES mail driver (^3.0).",
+                "doctrine/dbal": "Required to rename columns and drop SQLite columns (^2.6).",
+                "ext-ftp": "Required to use the Flysystem FTP driver.",
+                "ext-gd": "Required to use Illuminate\\Http\\Testing\\FileFactory::image().",
+                "ext-memcached": "Required to use the memcache cache driver.",
+                "ext-pcntl": "Required to use all features of the queue worker.",
+                "ext-posix": "Required to use all features of the queue worker.",
+                "ext-redis": "Required to use the Redis cache and queue drivers (^4.0|^5.0).",
+                "filp/whoops": "Required for friendly error pages in development (^2.4).",
+                "fzaninotto/faker": "Required to use the eloquent factory builder (^1.9.1).",
+                "guzzlehttp/guzzle": "Required to use the Mailgun mail driver and the ping methods on schedules (^6.0|^7.0).",
+                "laravel/tinker": "Required to use the tinker console command (^2.0).",
+                "league/flysystem-aws-s3-v3": "Required to use the Flysystem S3 driver (^1.0).",
+                "league/flysystem-cached-adapter": "Required to use the Flysystem cache (^1.0).",
+                "league/flysystem-sftp": "Required to use the Flysystem SFTP driver (^1.0).",
+                "moontoast/math": "Required to use ordered UUIDs (^1.1).",
+                "nyholm/psr7": "Required to use PSR-7 bridging features (^1.2).",
+                "pda/pheanstalk": "Required to use the beanstalk queue driver (^4.0).",
+                "psr/http-message": "Required to allow Storage::put to accept a StreamInterface (^1.0).",
+                "pusher/pusher-php-server": "Required to use the Pusher broadcast driver (^4.0).",
+                "symfony/cache": "Required to PSR-6 cache bridge (^4.3.4).",
+                "symfony/psr-http-message-bridge": "Required to use PSR-7 bridging features (^1.2).",
+                "wildbit/swiftmailer-postmark": "Required to use Postmark mail driver (^3.0)."
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "6.x-dev"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "src/Illuminate/Foundation/helpers.php",
+                    "src/Illuminate/Support/helpers.php"
+                ],
+                "psr-4": {
+                    "Illuminate\\": "src/Illuminate/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Taylor Otwell",
+                    "email": "taylor@laravel.com"
+                }
+            ],
+            "description": "The Laravel Framework.",
+            "homepage": "https://laravel.com",
+            "keywords": [
+                "framework",
+                "laravel"
+            ],
+            "time": "2020-06-24T13:08:51+00:00"
+        },
+        {
+            "name": "laravel/tinker",
+            "version": "v2.4.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/laravel/tinker.git",
+                "reference": "cde90a7335a2130a4488beb68f4b2141869241db"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/laravel/tinker/zipball/cde90a7335a2130a4488beb68f4b2141869241db",
+                "reference": "cde90a7335a2130a4488beb68f4b2141869241db",
+                "shasum": ""
+            },
+            "require": {
+                "illuminate/console": "^6.0|^7.0|^8.0",
+                "illuminate/contracts": "^6.0|^7.0|^8.0",
+                "illuminate/support": "^6.0|^7.0|^8.0",
+                "php": "^7.2",
+                "psy/psysh": "^0.10.3",
+                "symfony/var-dumper": "^4.3|^5.0"
+            },
+            "require-dev": {
+                "mockery/mockery": "^1.3.1",
+                "phpunit/phpunit": "^8.4|^9.0"
+            },
+            "suggest": {
+                "illuminate/database": "The Illuminate Database package (^6.0|^7.0|^8.0)."
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.x-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Laravel\\Tinker\\TinkerServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Laravel\\Tinker\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Taylor Otwell",
+                    "email": "taylor@laravel.com"
+                }
+            ],
+            "description": "Powerful REPL for the Laravel framework.",
+            "keywords": [
+                "REPL",
+                "Tinker",
+                "laravel",
+                "psysh"
+            ],
+            "time": "2020-04-07T15:01:31+00:00"
+        },
+        {
+            "name": "league/commonmark",
+            "version": "1.5.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/thephpleague/commonmark.git",
+                "reference": "6d74caf6abeed5fd85d6ec20da23d7269cd0b46f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/thephpleague/commonmark/zipball/6d74caf6abeed5fd85d6ec20da23d7269cd0b46f",
+                "reference": "6d74caf6abeed5fd85d6ec20da23d7269cd0b46f",
+                "shasum": ""
+            },
+            "require": {
+                "ext-mbstring": "*",
+                "php": "^7.1 || ^8.0"
+            },
+            "conflict": {
+                "scrutinizer/ocular": "1.7.*"
+            },
+            "require-dev": {
+                "cebe/markdown": "~1.0",
+                "commonmark/commonmark.js": "0.29.1",
+                "erusev/parsedown": "~1.0",
+                "ext-json": "*",
+                "github/gfm": "0.29.0",
+                "michelf/php-markdown": "~1.4",
+                "mikehaertl/php-shellcommand": "^1.4",
+                "phpstan/phpstan": "^0.12",
+                "phpunit/phpunit": "^7.5",
+                "scrutinizer/ocular": "^1.5",
+                "symfony/finder": "^4.2"
+            },
+            "bin": [
+                "bin/commonmark"
+            ],
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "League\\CommonMark\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Colin O'Dell",
+                    "email": "colinodell@gmail.com",
+                    "homepage": "https://www.colinodell.com",
+                    "role": "Lead Developer"
+                }
+            ],
+            "description": "Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and Github-Flavored Markdown (GFM)",
+            "homepage": "https://commonmark.thephpleague.com",
+            "keywords": [
+                "commonmark",
+                "flavored",
+                "gfm",
+                "github",
+                "github-flavored",
+                "markdown",
+                "md",
+                "parser"
+            ],
+            "funding": [
+                {
+                    "url": "https://enjoy.gitstore.app/repositories/thephpleague/commonmark",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.colinodell.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.paypal.me/colinpodell/10.00",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/colinodell",
+                    "type": "github"
+                },
+                {
+                    "url": "https://www.patreon.com/colinodell",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/league/commonmark",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-27T12:50:08+00:00"
+        },
+        {
+            "name": "league/flysystem",
+            "version": "1.0.69",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/thephpleague/flysystem.git",
+                "reference": "7106f78428a344bc4f643c233a94e48795f10967"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/7106f78428a344bc4f643c233a94e48795f10967",
+                "reference": "7106f78428a344bc4f643c233a94e48795f10967",
+                "shasum": ""
+            },
+            "require": {
+                "ext-fileinfo": "*",
+                "php": ">=5.5.9"
+            },
+            "conflict": {
+                "league/flysystem-sftp": "<1.0.6"
+            },
+            "require-dev": {
+                "phpspec/phpspec": "^3.4",
+                "phpunit/phpunit": "^5.7.26"
+            },
+            "suggest": {
+                "ext-fileinfo": "Required for MimeType",
+                "ext-ftp": "Allows you to use FTP server storage",
+                "ext-openssl": "Allows you to use FTPS server storage",
+                "league/flysystem-aws-s3-v2": "Allows you to use S3 storage with AWS SDK v2",
+                "league/flysystem-aws-s3-v3": "Allows you to use S3 storage with AWS SDK v3",
+                "league/flysystem-azure": "Allows you to use Windows Azure Blob storage",
+                "league/flysystem-cached-adapter": "Flysystem adapter decorator for metadata caching",
+                "league/flysystem-eventable-filesystem": "Allows you to use EventableFilesystem",
+                "league/flysystem-rackspace": "Allows you to use Rackspace Cloud Files",
+                "league/flysystem-sftp": "Allows you to use SFTP server storage via phpseclib",
+                "league/flysystem-webdav": "Allows you to use WebDAV storage",
+                "league/flysystem-ziparchive": "Allows you to use ZipArchive adapter",
+                "spatie/flysystem-dropbox": "Allows you to use Dropbox storage",
+                "srmklive/flysystem-dropbox-v2": "Allows you to use Dropbox storage for PHP 5 applications"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "League\\Flysystem\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Frank de Jonge",
+                    "email": "info@frenky.net"
+                }
+            ],
+            "description": "Filesystem abstraction: Many filesystems, one API.",
+            "keywords": [
+                "Cloud Files",
+                "WebDAV",
+                "abstraction",
+                "aws",
+                "cloud",
+                "copy.com",
+                "dropbox",
+                "file systems",
+                "files",
+                "filesystem",
+                "filesystems",
+                "ftp",
+                "rackspace",
+                "remote",
+                "s3",
+                "sftp",
+                "storage"
+            ],
+            "funding": [
+                {
+                    "url": "https://offset.earth/frankdejonge",
+                    "type": "other"
+                }
+            ],
+            "time": "2020-05-18T15:13:39+00:00"
+        },
+        {
+            "name": "monolog/monolog",
+            "version": "2.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Seldaek/monolog.git",
+                "reference": "38914429aac460e8e4616c8cb486ecb40ec90bb1"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/38914429aac460e8e4616c8cb486ecb40ec90bb1",
+                "reference": "38914429aac460e8e4616c8cb486ecb40ec90bb1",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2",
+                "psr/log": "^1.0.1"
+            },
+            "provide": {
+                "psr/log-implementation": "1.0.0"
+            },
+            "require-dev": {
+                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
+                "doctrine/couchdb": "~1.0@dev",
+                "elasticsearch/elasticsearch": "^6.0",
+                "graylog2/gelf-php": "^1.4.2",
+                "php-amqplib/php-amqplib": "~2.4",
+                "php-console/php-console": "^3.1.3",
+                "php-parallel-lint/php-parallel-lint": "^1.0",
+                "phpspec/prophecy": "^1.6.1",
+                "phpunit/phpunit": "^8.5",
+                "predis/predis": "^1.1",
+                "rollbar/rollbar": "^1.3",
+                "ruflin/elastica": ">=0.90 <3.0",
+                "swiftmailer/swiftmailer": "^5.3|^6.0"
+            },
+            "suggest": {
+                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
+                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
+                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
+                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
+                "ext-mbstring": "Allow to work properly with unicode symbols",
+                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
+                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
+                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
+                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
+                "php-console/php-console": "Allow sending log messages to Google Chrome",
+                "rollbar/rollbar": "Allow sending log messages to Rollbar",
+                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Monolog\\": "src/Monolog"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                }
+            ],
+            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
+            "homepage": "http://github.com/Seldaek/monolog",
+            "keywords": [
+                "log",
+                "logging",
+                "psr-3"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/Seldaek",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-22T08:12:19+00:00"
+        },
+        {
+            "name": "nesbot/carbon",
+            "version": "2.35.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/briannesbitt/Carbon.git",
+                "reference": "4b9bd835261ef23d36397a46a76b496a458305e5"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/briannesbitt/Carbon/zipball/4b9bd835261ef23d36397a46a76b496a458305e5",
+                "reference": "4b9bd835261ef23d36397a46a76b496a458305e5",
+                "shasum": ""
+            },
+            "require": {
+                "ext-json": "*",
+                "php": "^7.1.8 || ^8.0",
+                "symfony/polyfill-mbstring": "^1.0",
+                "symfony/translation": "^3.4 || ^4.0 || ^5.0"
+            },
+            "require-dev": {
+                "doctrine/orm": "^2.7",
+                "friendsofphp/php-cs-fixer": "^2.14 || ^3.0",
+                "kylekatarnls/multi-tester": "^1.1",
+                "phpmd/phpmd": "^2.8",
+                "phpstan/phpstan": "^0.11",
+                "phpunit/phpunit": "^7.5 || ^8.0",
+                "squizlabs/php_codesniffer": "^3.4"
+            },
+            "bin": [
+                "bin/carbon"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.x-dev",
+                    "dev-3.x": "3.x-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Carbon\\Laravel\\ServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Carbon\\": "src/Carbon/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Brian Nesbitt",
+                    "email": "brian@nesbot.com",
+                    "homepage": "http://nesbot.com"
+                },
+                {
+                    "name": "kylekatarnls",
+                    "homepage": "http://github.com/kylekatarnls"
+                }
+            ],
+            "description": "An API extension for DateTime that supports 281 different languages.",
+            "homepage": "http://carbon.nesbot.com",
+            "keywords": [
+                "date",
+                "datetime",
+                "time"
+            ],
+            "funding": [
+                {
+                    "url": "https://opencollective.com/Carbon",
+                    "type": "open_collective"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/nesbot/carbon",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-24T18:27:52+00:00"
+        },
+        {
+            "name": "nikic/php-parser",
+            "version": "v4.5.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/nikic/PHP-Parser.git",
+                "reference": "53c2753d756f5adb586dca79c2ec0e2654dd9463"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/53c2753d756f5adb586dca79c2ec0e2654dd9463",
+                "reference": "53c2753d756f5adb586dca79c2ec0e2654dd9463",
+                "shasum": ""
+            },
+            "require": {
+                "ext-tokenizer": "*",
+                "php": ">=7.0"
+            },
+            "require-dev": {
+                "ircmaxell/php-yacc": "0.0.5",
+                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0"
+            },
+            "bin": [
+                "bin/php-parse"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.3-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "PhpParser\\": "lib/PhpParser"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Nikita Popov"
+                }
+            ],
+            "description": "A PHP parser written in PHP",
+            "keywords": [
+                "parser",
+                "php"
+            ],
+            "time": "2020-06-03T07:24:19+00:00"
+        },
+        {
+            "name": "opis/closure",
+            "version": "3.5.5",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/opis/closure.git",
+                "reference": "dec9fc5ecfca93f45cd6121f8e6f14457dff372c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/opis/closure/zipball/dec9fc5ecfca93f45cd6121f8e6f14457dff372c",
+                "reference": "dec9fc5ecfca93f45cd6121f8e6f14457dff372c",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.4 || ^7.0"
+            },
+            "require-dev": {
+                "jeremeamia/superclosure": "^2.0",
+                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.5.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Opis\\Closure\\": "src/"
+                },
+                "files": [
+                    "functions.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Marius Sarca",
+                    "email": "marius.sarca@gmail.com"
+                },
+                {
+                    "name": "Sorin Sarca",
+                    "email": "sarca_sorin@hotmail.com"
+                }
+            ],
+            "description": "A library that can be used to serialize closures (anonymous functions) and arbitrary objects.",
+            "homepage": "https://opis.io/closure",
+            "keywords": [
+                "anonymous functions",
+                "closure",
+                "function",
+                "serializable",
+                "serialization",
+                "serialize"
+            ],
+            "time": "2020-06-17T14:59:55+00:00"
+        },
+        {
+            "name": "paragonie/random_compat",
+            "version": "v9.99.99",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/paragonie/random_compat.git",
+                "reference": "84b4dfb120c6f9b4ff7b3685f9b8f1aa365a0c95"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/paragonie/random_compat/zipball/84b4dfb120c6f9b4ff7b3685f9b8f1aa365a0c95",
+                "reference": "84b4dfb120c6f9b4ff7b3685f9b8f1aa365a0c95",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "4.*|5.*",
+                "vimeo/psalm": "^1"
+            },
+            "suggest": {
+                "ext-libsodium": "Provides a modern crypto API that can be used to generate random bytes."
+            },
+            "type": "library",
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Paragon Initiative Enterprises",
+                    "email": "security@paragonie.com",
+                    "homepage": "https://paragonie.com"
+                }
+            ],
+            "description": "PHP 5.x polyfill for random_bytes() and random_int() from PHP 7",
+            "keywords": [
+                "csprng",
+                "polyfill",
+                "pseudorandom",
+                "random"
+            ],
+            "time": "2018-07-02T15:55:56+00:00"
+        },
+        {
+            "name": "phpoption/phpoption",
+            "version": "1.7.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/schmittjoh/php-option.git",
+                "reference": "b2ada2ad5d8a32b89088b8adc31ecd2e3a13baf3"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/b2ada2ad5d8a32b89088b8adc31ecd2e3a13baf3",
+                "reference": "b2ada2ad5d8a32b89088b8adc31ecd2e3a13baf3",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.5.9 || ^7.0 || ^8.0"
+            },
+            "require-dev": {
+                "bamarni/composer-bin-plugin": "^1.3",
+                "phpunit/phpunit": "^4.8.35 || ^5.0 || ^6.0 || ^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.7-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "PhpOption\\": "src/PhpOption/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache-2.0"
+            ],
+            "authors": [
+                {
+                    "name": "Johannes M. Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                },
+                {
+                    "name": "Graham Campbell",
+                    "email": "graham@alt-three.com"
+                }
+            ],
+            "description": "Option Type for PHP",
+            "keywords": [
+                "language",
+                "option",
+                "php",
+                "type"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/GrahamCampbell",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/phpoption/phpoption",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-07T10:40:07+00:00"
+        },
+        {
+            "name": "psr/container",
+            "version": "1.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/container.git",
+                "reference": "b7ce3b176482dbbc1245ebf52b181af44c2cf55f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/container/zipball/b7ce3b176482dbbc1245ebf52b181af44c2cf55f",
+                "reference": "b7ce3b176482dbbc1245ebf52b181af44c2cf55f",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Container\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common Container Interface (PHP FIG PSR-11)",
+            "homepage": "https://github.com/php-fig/container",
+            "keywords": [
+                "PSR-11",
+                "container",
+                "container-interface",
+                "container-interop",
+                "psr"
+            ],
+            "time": "2017-02-14T16:28:37+00:00"
+        },
+        {
+            "name": "psr/http-message",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/http-message.git",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Http\\Message\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for HTTP messages",
+            "homepage": "https://github.com/php-fig/http-message",
+            "keywords": [
+                "http",
+                "http-message",
+                "psr",
+                "psr-7",
+                "request",
+                "response"
+            ],
+            "time": "2016-08-06T14:39:51+00:00"
+        },
+        {
+            "name": "psr/log",
+            "version": "1.1.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/log.git",
+                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
+                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Log\\": "Psr/Log/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for logging libraries",
+            "homepage": "https://github.com/php-fig/log",
+            "keywords": [
+                "log",
+                "psr",
+                "psr-3"
+            ],
+            "time": "2020-03-23T09:12:05+00:00"
+        },
+        {
+            "name": "psr/simple-cache",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/simple-cache.git",
+                "reference": "408d5eafb83c57f6365a3ca330ff23aa4a5fa39b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/simple-cache/zipball/408d5eafb83c57f6365a3ca330ff23aa4a5fa39b",
+                "reference": "408d5eafb83c57f6365a3ca330ff23aa4a5fa39b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\SimpleCache\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interfaces for simple caching",
+            "keywords": [
+                "cache",
+                "caching",
+                "psr",
+                "psr-16",
+                "simple-cache"
+            ],
+            "time": "2017-10-23T01:57:42+00:00"
+        },
+        {
+            "name": "psy/psysh",
+            "version": "v0.10.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/bobthecow/psysh.git",
+                "reference": "a8aec1b2981ab66882a01cce36a49b6317dc3560"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/bobthecow/psysh/zipball/a8aec1b2981ab66882a01cce36a49b6317dc3560",
+                "reference": "a8aec1b2981ab66882a01cce36a49b6317dc3560",
+                "shasum": ""
+            },
+            "require": {
+                "dnoegel/php-xdg-base-dir": "0.1.*",
+                "ext-json": "*",
+                "ext-tokenizer": "*",
+                "nikic/php-parser": "~4.0|~3.0|~2.0|~1.3",
+                "php": "^8.0 || ^7.0 || ^5.5.9",
+                "symfony/console": "~5.0|~4.0|~3.0|^2.4.2|~2.3.10",
+                "symfony/var-dumper": "~5.0|~4.0|~3.0|~2.7"
+            },
+            "require-dev": {
+                "bamarni/composer-bin-plugin": "^1.2",
+                "hoa/console": "3.17.*"
+            },
+            "suggest": {
+                "ext-pcntl": "Enabling the PCNTL extension makes PsySH a lot happier :)",
+                "ext-pdo-sqlite": "The doc command requires SQLite to work.",
+                "ext-posix": "If you have PCNTL, you'll want the POSIX extension as well.",
+                "ext-readline": "Enables support for arrow-key history navigation, and showing and manipulating command history.",
+                "hoa/console": "A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit."
+            },
+            "bin": [
+                "bin/psysh"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "0.10.x-dev"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "src/functions.php"
+                ],
+                "psr-4": {
+                    "Psy\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Justin Hileman",
+                    "email": "justin@justinhileman.info",
+                    "homepage": "http://justinhileman.com"
+                }
+            ],
+            "description": "An interactive shell for modern PHP.",
+            "homepage": "http://psysh.org",
+            "keywords": [
+                "REPL",
+                "console",
+                "interactive",
+                "shell"
+            ],
+            "time": "2020-05-03T19:32:03+00:00"
+        },
+        {
+            "name": "ralouphie/getallheaders",
+            "version": "3.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ralouphie/getallheaders.git",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.6"
+            },
+            "require-dev": {
+                "php-coveralls/php-coveralls": "^2.1",
+                "phpunit/phpunit": "^5 || ^6.5"
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "src/getallheaders.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ralph Khattar",
+                    "email": "ralph.khattar@gmail.com"
+                }
+            ],
+            "description": "A polyfill for getallheaders.",
+            "time": "2019-03-08T08:55:37+00:00"
+        },
+        {
+            "name": "ramsey/uuid",
+            "version": "3.9.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ramsey/uuid.git",
+                "reference": "7e1633a6964b48589b142d60542f9ed31bd37a92"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ramsey/uuid/zipball/7e1633a6964b48589b142d60542f9ed31bd37a92",
+                "reference": "7e1633a6964b48589b142d60542f9ed31bd37a92",
+                "shasum": ""
+            },
+            "require": {
+                "ext-json": "*",
+                "paragonie/random_compat": "^1 | ^2 | 9.99.99",
+                "php": "^5.4 | ^7 | ^8",
+                "symfony/polyfill-ctype": "^1.8"
+            },
+            "replace": {
+                "rhumsaa/uuid": "self.version"
+            },
+            "require-dev": {
+                "codeception/aspect-mock": "^1 | ^2",
+                "doctrine/annotations": "^1.2",
+                "goaop/framework": "1.0.0-alpha.2 | ^1 | ^2.1",
+                "jakub-onderka/php-parallel-lint": "^1",
+                "mockery/mockery": "^0.9.11 | ^1",
+                "moontoast/math": "^1.1",
+                "paragonie/random-lib": "^2",
+                "php-mock/php-mock-phpunit": "^0.3 | ^1.1",
+                "phpunit/phpunit": "^4.8 | ^5.4 | ^6.5",
+                "squizlabs/php_codesniffer": "^3.5"
+            },
+            "suggest": {
+                "ext-ctype": "Provides support for PHP Ctype functions",
+                "ext-libsodium": "Provides the PECL libsodium extension for use with the SodiumRandomGenerator",
+                "ext-openssl": "Provides the OpenSSL extension for use with the OpenSslGenerator",
+                "ext-uuid": "Provides the PECL UUID extension for use with the PeclUuidTimeGenerator and PeclUuidRandomGenerator",
+                "moontoast/math": "Provides support for converting UUID to 128-bit integer (in string form).",
+                "paragonie/random-lib": "Provides RandomLib for use with the RandomLibAdapter",
+                "ramsey/uuid-console": "A console application for generating UUIDs with ramsey/uuid",
+                "ramsey/uuid-doctrine": "Allows the use of Ramsey\\Uuid\\Uuid as Doctrine field type."
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Ramsey\\Uuid\\": "src/"
+                },
+                "files": [
+                    "src/functions.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ben Ramsey",
+                    "email": "ben@benramsey.com",
+                    "homepage": "https://benramsey.com"
+                },
+                {
+                    "name": "Marijn Huizendveld",
+                    "email": "marijn.huizendveld@gmail.com"
+                },
+                {
+                    "name": "Thibaud Fabre",
+                    "email": "thibaud@aztech.io"
+                }
+            ],
+            "description": "Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID).",
+            "homepage": "https://github.com/ramsey/uuid",
+            "keywords": [
+                "guid",
+                "identifier",
+                "uuid"
+            ],
+            "time": "2020-02-21T04:36:14+00:00"
+        },
+        {
+            "name": "swiftmailer/swiftmailer",
+            "version": "v6.2.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/swiftmailer/swiftmailer.git",
+                "reference": "149cfdf118b169f7840bbe3ef0d4bc795d1780c9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/swiftmailer/swiftmailer/zipball/149cfdf118b169f7840bbe3ef0d4bc795d1780c9",
+                "reference": "149cfdf118b169f7840bbe3ef0d4bc795d1780c9",
+                "shasum": ""
+            },
+            "require": {
+                "egulias/email-validator": "~2.0",
+                "php": ">=7.0.0",
+                "symfony/polyfill-iconv": "^1.0",
+                "symfony/polyfill-intl-idn": "^1.10",
+                "symfony/polyfill-mbstring": "^1.0"
+            },
+            "require-dev": {
+                "mockery/mockery": "~0.9.1",
+                "symfony/phpunit-bridge": "^3.4.19|^4.1.8"
+            },
+            "suggest": {
+                "ext-intl": "Needed to support internationalized email addresses",
+                "true/punycode": "Needed to support internationalized email addresses, if ext-intl is not installed"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "6.2-dev"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "lib/swift_required.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Corbyn"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Swiftmailer, free feature-rich PHP mailer",
+            "homepage": "https://swiftmailer.symfony.com",
+            "keywords": [
+                "email",
+                "mail",
+                "mailer"
+            ],
+            "time": "2019-11-12T09:31:26+00:00"
+        },
+        {
+            "name": "symfony/console",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/console.git",
+                "reference": "326b064d804043005526f5a0494cfb49edb59bb0"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/console/zipball/326b064d804043005526f5a0494cfb49edb59bb0",
+                "reference": "326b064d804043005526f5a0494cfb49edb59bb0",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "symfony/polyfill-mbstring": "~1.0",
+                "symfony/polyfill-php73": "^1.8",
+                "symfony/polyfill-php80": "^1.15",
+                "symfony/service-contracts": "^1.1|^2"
+            },
+            "conflict": {
+                "symfony/dependency-injection": "<3.4",
+                "symfony/event-dispatcher": "<4.3|>=5",
+                "symfony/lock": "<4.4",
+                "symfony/process": "<3.3"
+            },
+            "provide": {
+                "psr/log-implementation": "1.0"
+            },
+            "require-dev": {
+                "psr/log": "~1.0",
+                "symfony/config": "^3.4|^4.0|^5.0",
+                "symfony/dependency-injection": "^3.4|^4.0|^5.0",
+                "symfony/event-dispatcher": "^4.3",
+                "symfony/lock": "^4.4|^5.0",
+                "symfony/process": "^3.4|^4.0|^5.0",
+                "symfony/var-dumper": "^4.3|^5.0"
+            },
+            "suggest": {
+                "psr/log": "For using the console logger",
+                "symfony/event-dispatcher": "",
+                "symfony/lock": "",
+                "symfony/process": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Console\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Console Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:06:45+00:00"
+        },
+        {
+            "name": "symfony/css-selector",
+            "version": "v5.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/css-selector.git",
+                "reference": "e544e24472d4c97b2d11ade7caacd446727c6bf9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/css-selector/zipball/e544e24472d4c97b2d11ade7caacd446727c6bf9",
+                "reference": "e544e24472d4c97b2d11ade7caacd446727c6bf9",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2.5"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "5.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\CssSelector\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Jean-François Simon",
+                    "email": "jeanfrancois.simon@sensiolabs.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony CssSelector Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-20T17:43:50+00:00"
+        },
+        {
+            "name": "symfony/debug",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/debug.git",
+                "reference": "28f92d08bb6d1fddf8158e02c194ad43870007e6"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/debug/zipball/28f92d08bb6d1fddf8158e02c194ad43870007e6",
+                "reference": "28f92d08bb6d1fddf8158e02c194ad43870007e6",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "psr/log": "~1.0",
+                "symfony/polyfill-php80": "^1.15"
+            },
+            "conflict": {
+                "symfony/http-kernel": "<3.4"
+            },
+            "require-dev": {
+                "symfony/http-kernel": "^3.4|^4.0|^5.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Debug\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Debug Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-24T08:33:35+00:00"
+        },
+        {
+            "name": "symfony/error-handler",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/error-handler.git",
+                "reference": "0df9a23c0f9eddbb6682479fee6fd58b88add75b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/error-handler/zipball/0df9a23c0f9eddbb6682479fee6fd58b88add75b",
+                "reference": "0df9a23c0f9eddbb6682479fee6fd58b88add75b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "psr/log": "~1.0",
+                "symfony/debug": "^4.4.5",
+                "symfony/polyfill-php80": "^1.15",
+                "symfony/var-dumper": "^4.4|^5.0"
+            },
+            "require-dev": {
+                "symfony/http-kernel": "^4.4|^5.0",
+                "symfony/serializer": "^4.4|^5.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\ErrorHandler\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony ErrorHandler Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-28T10:39:14+00:00"
+        },
+        {
+            "name": "symfony/event-dispatcher",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/event-dispatcher.git",
+                "reference": "a5370aaa7807c7a439b21386661ffccf3dff2866"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/a5370aaa7807c7a439b21386661ffccf3dff2866",
+                "reference": "a5370aaa7807c7a439b21386661ffccf3dff2866",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "symfony/event-dispatcher-contracts": "^1.1"
+            },
+            "conflict": {
+                "symfony/dependency-injection": "<3.4"
+            },
+            "provide": {
+                "psr/event-dispatcher-implementation": "1.0",
+                "symfony/event-dispatcher-implementation": "1.1"
+            },
+            "require-dev": {
+                "psr/log": "~1.0",
+                "symfony/config": "^3.4|^4.0|^5.0",
+                "symfony/dependency-injection": "^3.4|^4.0|^5.0",
+                "symfony/expression-language": "^3.4|^4.0|^5.0",
+                "symfony/http-foundation": "^3.4|^4.0|^5.0",
+                "symfony/service-contracts": "^1.1|^2",
+                "symfony/stopwatch": "^3.4|^4.0|^5.0"
+            },
+            "suggest": {
+                "symfony/dependency-injection": "",
+                "symfony/http-kernel": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\EventDispatcher\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony EventDispatcher Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-20T08:37:50+00:00"
+        },
+        {
+            "name": "symfony/event-dispatcher-contracts",
+            "version": "v1.1.7",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/event-dispatcher-contracts.git",
+                "reference": "c43ab685673fb6c8d84220c77897b1d6cdbe1d18"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/c43ab685673fb6c8d84220c77897b1d6cdbe1d18",
+                "reference": "c43ab685673fb6c8d84220c77897b1d6cdbe1d18",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1.3"
+            },
+            "suggest": {
+                "psr/event-dispatcher": "",
+                "symfony/event-dispatcher-implementation": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Contracts\\EventDispatcher\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Generic abstractions related to dispatching event",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "abstractions",
+                "contracts",
+                "decoupling",
+                "interfaces",
+                "interoperability",
+                "standards"
+            ],
+            "time": "2019-09-17T09:54:03+00:00"
+        },
+        {
+            "name": "symfony/finder",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/finder.git",
+                "reference": "5729f943f9854c5781984ed4907bbb817735776b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/finder/zipball/5729f943f9854c5781984ed4907bbb817735776b",
+                "reference": "5729f943f9854c5781984ed4907bbb817735776b",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Finder\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Finder Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-03-27T16:54:36+00:00"
+        },
+        {
+            "name": "symfony/http-foundation",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/http-foundation.git",
+                "reference": "3adfbd7098c850b02d107330b7b9deacf2581578"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/3adfbd7098c850b02d107330b7b9deacf2581578",
+                "reference": "3adfbd7098c850b02d107330b7b9deacf2581578",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "symfony/mime": "^4.3|^5.0",
+                "symfony/polyfill-mbstring": "~1.1"
+            },
+            "require-dev": {
+                "predis/predis": "~1.0",
+                "symfony/expression-language": "^3.4|^4.0|^5.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\HttpFoundation\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony HttpFoundation Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-23T09:11:46+00:00"
+        },
+        {
+            "name": "symfony/http-kernel",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/http-kernel.git",
+                "reference": "81d42148474e1852a333ed7a732f2a014af75430"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/81d42148474e1852a333ed7a732f2a014af75430",
+                "reference": "81d42148474e1852a333ed7a732f2a014af75430",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "psr/log": "~1.0",
+                "symfony/error-handler": "^4.4",
+                "symfony/event-dispatcher": "^4.4",
+                "symfony/http-foundation": "^4.4|^5.0",
+                "symfony/polyfill-ctype": "^1.8",
+                "symfony/polyfill-php73": "^1.9",
+                "symfony/polyfill-php80": "^1.15"
+            },
+            "conflict": {
+                "symfony/browser-kit": "<4.3",
+                "symfony/config": "<3.4",
+                "symfony/console": ">=5",
+                "symfony/dependency-injection": "<4.3",
+                "symfony/translation": "<4.2",
+                "twig/twig": "<1.34|<2.4,>=2"
+            },
+            "provide": {
+                "psr/log-implementation": "1.0"
+            },
+            "require-dev": {
+                "psr/cache": "~1.0",
+                "symfony/browser-kit": "^4.3|^5.0",
+                "symfony/config": "^3.4|^4.0|^5.0",
+                "symfony/console": "^3.4|^4.0",
+                "symfony/css-selector": "^3.4|^4.0|^5.0",
+                "symfony/dependency-injection": "^4.3|^5.0",
+                "symfony/dom-crawler": "^3.4|^4.0|^5.0",
+                "symfony/expression-language": "^3.4|^4.0|^5.0",
+                "symfony/finder": "^3.4|^4.0|^5.0",
+                "symfony/process": "^3.4|^4.0|^5.0",
+                "symfony/routing": "^3.4|^4.0|^5.0",
+                "symfony/stopwatch": "^3.4|^4.0|^5.0",
+                "symfony/templating": "^3.4|^4.0|^5.0",
+                "symfony/translation": "^4.2|^5.0",
+                "symfony/translation-contracts": "^1.1|^2",
+                "twig/twig": "^1.34|^2.4|^3.0"
+            },
+            "suggest": {
+                "symfony/browser-kit": "",
+                "symfony/config": "",
+                "symfony/console": "",
+                "symfony/dependency-injection": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\HttpKernel\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony HttpKernel Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-12T11:15:37+00:00"
+        },
+        {
+            "name": "symfony/mime",
+            "version": "v5.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/mime.git",
+                "reference": "c0c418f05e727606e85b482a8591519c4712cf45"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/mime/zipball/c0c418f05e727606e85b482a8591519c4712cf45",
+                "reference": "c0c418f05e727606e85b482a8591519c4712cf45",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2.5",
+                "symfony/polyfill-intl-idn": "^1.10",
+                "symfony/polyfill-mbstring": "^1.0",
+                "symfony/polyfill-php80": "^1.15"
+            },
+            "conflict": {
+                "symfony/mailer": "<4.4"
+            },
+            "require-dev": {
+                "egulias/email-validator": "^2.1.10",
+                "symfony/dependency-injection": "^4.4|^5.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "5.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Mime\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "A library to manipulate MIME messages",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "mime",
+                "mime-type"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-09T15:07:35+00:00"
+        },
+        {
+            "name": "symfony/polyfill-ctype",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-ctype.git",
+                "reference": "2edd75b8b35d62fd3eeabba73b26b8f1f60ce13d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/2edd75b8b35d62fd3eeabba73b26b8f1f60ce13d",
+                "reference": "2edd75b8b35d62fd3eeabba73b26b8f1f60ce13d",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "suggest": {
+                "ext-ctype": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Ctype\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Gert de Pagter",
+                    "email": "BackEndTea@gmail.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for ctype functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "ctype",
+                "polyfill",
+                "portable"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-iconv",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-iconv.git",
+                "reference": "ba6c9c18db36235b859cc29b8372d1c01298c035"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-iconv/zipball/ba6c9c18db36235b859cc29b8372d1c01298c035",
+                "reference": "ba6c9c18db36235b859cc29b8372d1c01298c035",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "suggest": {
+                "ext-iconv": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Iconv\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for the Iconv extension",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "iconv",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-intl-idn",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-idn.git",
+                "reference": "a57f8161502549a742a63c09f0a604997bf47027"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/a57f8161502549a742a63c09f0a604997bf47027",
+                "reference": "a57f8161502549a742a63c09f0a604997bf47027",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "symfony/polyfill-mbstring": "^1.3",
+                "symfony/polyfill-php72": "^1.10"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Laurent Bassin",
+                    "email": "laurent@bassin.info"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "idn",
+                "intl",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-mbstring",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-mbstring.git",
+                "reference": "7110338d81ce1cbc3e273136e4574663627037a7"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/7110338d81ce1cbc3e273136e4574663627037a7",
+                "reference": "7110338d81ce1cbc3e273136e4574663627037a7",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "suggest": {
+                "ext-mbstring": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Mbstring\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for the Mbstring extension",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "mbstring",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-php72",
+            "version": "v1.17.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-php72.git",
+                "reference": "f048e612a3905f34931127360bdd2def19a5e582"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/f048e612a3905f34931127360bdd2def19a5e582",
+                "reference": "f048e612a3905f34931127360bdd2def19a5e582",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Php72\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-12T16:47:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-php73",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-php73.git",
+                "reference": "fa0837fe02d617d31fbb25f990655861bb27bd1a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-php73/zipball/fa0837fe02d617d31fbb25f990655861bb27bd1a",
+                "reference": "fa0837fe02d617d31fbb25f990655861bb27bd1a",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Php73\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ],
+                "classmap": [
+                    "Resources/stubs"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill backporting some PHP 7.3+ features to lower PHP versions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/polyfill-php80",
+            "version": "v1.17.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-php80.git",
+                "reference": "4a5b6bba3259902e386eb80dd1956181ee90b5b2"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/4a5b6bba3259902e386eb80dd1956181ee90b5b2",
+                "reference": "4a5b6bba3259902e386eb80dd1956181ee90b5b2",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.0.8"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.17-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Php80\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ],
+                "classmap": [
+                    "Resources/stubs"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ion Bazan",
+                    "email": "ion.bazan@gmail.com"
+                },
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-06T08:46:27+00:00"
+        },
+        {
+            "name": "symfony/process",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/process.git",
+                "reference": "c714958428a85c86ab97e3a0c96db4c4f381b7f5"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/process/zipball/c714958428a85c86ab97e3a0c96db4c4f381b7f5",
+                "reference": "c714958428a85c86ab97e3a0c96db4c4f381b7f5",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Process\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Process Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:06:45+00:00"
+        },
+        {
+            "name": "symfony/routing",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/routing.git",
+                "reference": "0f557911dde75c2a9652b8097bd7c9f54507f646"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/routing/zipball/0f557911dde75c2a9652b8097bd7c9f54507f646",
+                "reference": "0f557911dde75c2a9652b8097bd7c9f54507f646",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1.3"
+            },
+            "conflict": {
+                "symfony/config": "<4.2",
+                "symfony/dependency-injection": "<3.4",
+                "symfony/yaml": "<3.4"
+            },
+            "require-dev": {
+                "doctrine/annotations": "~1.2",
+                "psr/log": "~1.0",
+                "symfony/config": "^4.2|^5.0",
+                "symfony/dependency-injection": "^3.4|^4.0|^5.0",
+                "symfony/expression-language": "^3.4|^4.0|^5.0",
+                "symfony/http-foundation": "^3.4|^4.0|^5.0",
+                "symfony/yaml": "^3.4|^4.0|^5.0"
+            },
+            "suggest": {
+                "doctrine/annotations": "For using the annotation loader",
+                "symfony/config": "For using the all-in-one router or any loader",
+                "symfony/expression-language": "For using expression matching",
+                "symfony/http-foundation": "For using a Symfony Request object",
+                "symfony/yaml": "For using the YAML loader"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Routing\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Routing Component",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "router",
+                "routing",
+                "uri",
+                "url"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:07:26+00:00"
+        },
+        {
+            "name": "symfony/service-contracts",
+            "version": "v2.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/service-contracts.git",
+                "reference": "66a8f0957a3ca54e4f724e49028ab19d75a8918b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/service-contracts/zipball/66a8f0957a3ca54e4f724e49028ab19d75a8918b",
+                "reference": "66a8f0957a3ca54e4f724e49028ab19d75a8918b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2.5",
+                "psr/container": "^1.0"
+            },
+            "suggest": {
+                "symfony/service-implementation": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Contracts\\Service\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Generic abstractions related to writing services",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "abstractions",
+                "contracts",
+                "decoupling",
+                "interfaces",
+                "interoperability",
+                "standards"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-20T17:43:50+00:00"
+        },
+        {
+            "name": "symfony/translation",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/translation.git",
+                "reference": "79d3ef9096a6a6047dbc69218b68c7b7f63193af"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/translation/zipball/79d3ef9096a6a6047dbc69218b68c7b7f63193af",
+                "reference": "79d3ef9096a6a6047dbc69218b68c7b7f63193af",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "symfony/polyfill-mbstring": "~1.0",
+                "symfony/translation-contracts": "^1.1.6|^2"
+            },
+            "conflict": {
+                "symfony/config": "<3.4",
+                "symfony/dependency-injection": "<3.4",
+                "symfony/http-kernel": "<4.4",
+                "symfony/yaml": "<3.4"
+            },
+            "provide": {
+                "symfony/translation-implementation": "1.0"
+            },
+            "require-dev": {
+                "psr/log": "~1.0",
+                "symfony/config": "^3.4|^4.0|^5.0",
+                "symfony/console": "^3.4|^4.0|^5.0",
+                "symfony/dependency-injection": "^3.4|^4.0|^5.0",
+                "symfony/finder": "~2.8|~3.0|~4.0|^5.0",
+                "symfony/http-kernel": "^4.4",
+                "symfony/intl": "^3.4|^4.0|^5.0",
+                "symfony/service-contracts": "^1.1.2|^2",
+                "symfony/yaml": "^3.4|^4.0|^5.0"
+            },
+            "suggest": {
+                "psr/log-implementation": "To use logging capability in translator",
+                "symfony/config": "",
+                "symfony/yaml": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Translation\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Translation Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:06:45+00:00"
+        },
+        {
+            "name": "symfony/translation-contracts",
+            "version": "v2.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/translation-contracts.git",
+                "reference": "e5ca07c8f817f865f618aa072c2fe8e0e637340e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/e5ca07c8f817f865f618aa072c2fe8e0e637340e",
+                "reference": "e5ca07c8f817f865f618aa072c2fe8e0e637340e",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2.5"
+            },
+            "suggest": {
+                "symfony/translation-implementation": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Contracts\\Translation\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Generic abstractions related to translation",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "abstractions",
+                "contracts",
+                "decoupling",
+                "interfaces",
+                "interoperability",
+                "standards"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-20T17:43:50+00:00"
+        },
+        {
+            "name": "symfony/var-dumper",
+            "version": "v4.4.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/var-dumper.git",
+                "reference": "56b3aa5eab0ac6720dcd559fd1d590ce301594ac"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/56b3aa5eab0ac6720dcd559fd1d590ce301594ac",
+                "reference": "56b3aa5eab0ac6720dcd559fd1d590ce301594ac",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1.3",
+                "symfony/polyfill-mbstring": "~1.0",
+                "symfony/polyfill-php72": "~1.5",
+                "symfony/polyfill-php80": "^1.15"
+            },
+            "conflict": {
+                "phpunit/phpunit": "<4.8.35|<5.4.3,>=5.0",
+                "symfony/console": "<3.4"
+            },
+            "require-dev": {
+                "ext-iconv": "*",
+                "symfony/console": "^3.4|^4.0|^5.0",
+                "symfony/process": "^4.4|^5.0",
+                "twig/twig": "^1.34|^2.4|^3.0"
+            },
+            "suggest": {
+                "ext-iconv": "To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).",
+                "ext-intl": "To show region name in time zone dump",
+                "symfony/console": "To use the ServerDumpCommand and/or the bin/var-dump-server script"
+            },
+            "bin": [
+                "Resources/bin/var-dump-server"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.4-dev"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "Resources/functions/dump.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Component\\VarDumper\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony mechanism for exploring and dumping PHP variables",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "debug",
+                "dump"
+            ],
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:06:45+00:00"
+        },
+        {
+            "name": "tijsverkoyen/css-to-inline-styles",
+            "version": "2.2.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/tijsverkoyen/CssToInlineStyles.git",
+                "reference": "dda2ee426acd6d801d5b7fd1001cde9b5f790e15"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/dda2ee426acd6d801d5b7fd1001cde9b5f790e15",
+                "reference": "dda2ee426acd6d801d5b7fd1001cde9b5f790e15",
+                "shasum": ""
+            },
+            "require": {
+                "ext-dom": "*",
+                "ext-libxml": "*",
+                "php": "^5.5 || ^7.0",
+                "symfony/css-selector": "^2.7 || ^3.0 || ^4.0 || ^5.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "TijsVerkoyen\\CssToInlineStyles\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Tijs Verkoyen",
+                    "email": "css_to_inline_styles@verkoyen.eu",
+                    "role": "Developer"
+                }
+            ],
+            "description": "CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.",
+            "homepage": "https://github.com/tijsverkoyen/CssToInlineStyles",
+            "time": "2019-10-24T08:53:34+00:00"
+        },
+        {
+            "name": "vlucas/phpdotenv",
+            "version": "v3.6.6",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/vlucas/phpdotenv.git",
+                "reference": "4669484ccbc38fe7c4e0c50456778f2010566aad"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/4669484ccbc38fe7c4e0c50456778f2010566aad",
+                "reference": "4669484ccbc38fe7c4e0c50456778f2010566aad",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.4 || ^7.0 || ^8.0",
+                "phpoption/phpoption": "^1.5.2",
+                "symfony/polyfill-ctype": "^1.16"
+            },
+            "require-dev": {
+                "ext-filter": "*",
+                "ext-pcre": "*",
+                "phpunit/phpunit": "^4.8.35 || ^5.7.27 || ^6.5.6 || ^7.0"
+            },
+            "suggest": {
+                "ext-filter": "Required to use the boolean validator.",
+                "ext-pcre": "Required to use most of the library."
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.6-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Dotenv\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Graham Campbell",
+                    "email": "graham@alt-three.com",
+                    "homepage": "https://gjcampbell.co.uk/"
+                },
+                {
+                    "name": "Vance Lucas",
+                    "email": "vance@vancelucas.com",
+                    "homepage": "https://vancelucas.com/"
+                }
+            ],
+            "description": "Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.",
+            "keywords": [
+                "dotenv",
+                "env",
+                "environment"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/GrahamCampbell",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/vlucas/phpdotenv",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-02T14:08:54+00:00"
+        }
+    ],
+    "packages-dev": [
+        {
+            "name": "barryvdh/laravel-debugbar",
+            "version": "v3.3.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/barryvdh/laravel-debugbar.git",
+                "reference": "57f2219f6d9efe41ed1bc880d86701c52f261bf5"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/barryvdh/laravel-debugbar/zipball/57f2219f6d9efe41ed1bc880d86701c52f261bf5",
+                "reference": "57f2219f6d9efe41ed1bc880d86701c52f261bf5",
+                "shasum": ""
+            },
+            "require": {
+                "illuminate/routing": "^5.5|^6|^7",
+                "illuminate/session": "^5.5|^6|^7",
+                "illuminate/support": "^5.5|^6|^7",
+                "maximebf/debugbar": "^1.15.1",
+                "php": ">=7.0",
+                "symfony/debug": "^3|^4|^5",
+                "symfony/finder": "^3|^4|^5"
+            },
+            "require-dev": {
+                "laravel/framework": "5.5.x"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.2-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Barryvdh\\Debugbar\\ServiceProvider"
+                    ],
+                    "aliases": {
+                        "Debugbar": "Barryvdh\\Debugbar\\Facade"
+                    }
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Barryvdh\\Debugbar\\": "src/"
+                },
+                "files": [
+                    "src/helpers.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Barry vd. Heuvel",
+                    "email": "barryvdh@gmail.com"
+                }
+            ],
+            "description": "PHP Debugbar integration for Laravel",
+            "keywords": [
+                "debug",
+                "debugbar",
+                "laravel",
+                "profiler",
+                "webprofiler"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/barryvdh",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-05-05T10:53:32+00:00"
+        },
+        {
+            "name": "barryvdh/laravel-ide-helper",
+            "version": "v2.7.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/barryvdh/laravel-ide-helper.git",
+                "reference": "5f677edc14bdcfdcac36633e6eea71b2728a4dbc"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/barryvdh/laravel-ide-helper/zipball/5f677edc14bdcfdcac36633e6eea71b2728a4dbc",
+                "reference": "5f677edc14bdcfdcac36633e6eea71b2728a4dbc",
+                "shasum": ""
+            },
+            "require": {
+                "barryvdh/reflection-docblock": "^2.0.6",
+                "composer/composer": "^1.6",
+                "doctrine/dbal": "~2.3",
+                "illuminate/console": "^5.5|^6|^7",
+                "illuminate/filesystem": "^5.5|^6|^7",
+                "illuminate/support": "^5.5|^6|^7",
+                "php": ">=7.2"
+            },
+            "require-dev": {
+                "illuminate/config": "^5.5|^6|^7",
+                "illuminate/view": "^5.5|^6|^7",
+                "mockery/mockery": "^1.3",
+                "orchestra/testbench": "^3|^4|^5",
+                "phpro/grumphp": "^0.17.1",
+                "squizlabs/php_codesniffer": "^3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.6-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Barryvdh\\LaravelIdeHelper\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Barry vd. Heuvel",
+                    "email": "barryvdh@gmail.com"
+                }
+            ],
+            "description": "Laravel IDE Helper, generates correct PHPDocs for all Facade classes, to improve auto-completion.",
+            "keywords": [
+                "autocomplete",
+                "codeintel",
+                "helper",
+                "ide",
+                "laravel",
+                "netbeans",
+                "phpdoc",
+                "phpstorm",
+                "sublime"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/barryvdh",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-04-22T09:57:26+00:00"
+        },
+        {
+            "name": "barryvdh/reflection-docblock",
+            "version": "v2.0.6",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/barryvdh/ReflectionDocBlock.git",
+                "reference": "6b69015d83d3daf9004a71a89f26e27d27ef6a16"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/barryvdh/ReflectionDocBlock/zipball/6b69015d83d3daf9004a71a89f26e27d27ef6a16",
+                "reference": "6b69015d83d3daf9004a71a89f26e27d27ef6a16",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~4.0,<4.5"
+            },
+            "suggest": {
+                "dflydev/markdown": "~1.0",
+                "erusev/parsedown": "~1.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Barryvdh": [
+                        "src/"
+                    ]
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Mike van Riel",
+                    "email": "mike.vanriel@naenius.com"
+                }
+            ],
+            "time": "2018-12-13T10:34:14+00:00"
+        },
+        {
+            "name": "beyondcode/laravel-dump-server",
+            "version": "1.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/beyondcode/laravel-dump-server.git",
+                "reference": "fcc88fa66895f8c1ff83f6145a5eff5fa2a0739a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/beyondcode/laravel-dump-server/zipball/fcc88fa66895f8c1ff83f6145a5eff5fa2a0739a",
+                "reference": "fcc88fa66895f8c1ff83f6145a5eff5fa2a0739a",
+                "shasum": ""
+            },
+            "require": {
+                "illuminate/console": "5.6.*|5.7.*|5.8.*|^6.0",
+                "illuminate/http": "5.6.*|5.7.*|5.8.*|^6.0",
+                "illuminate/support": "5.6.*|5.7.*|5.8.*|^6.0",
+                "php": "^7.1",
+                "symfony/var-dumper": "^4.1.1"
+            },
+            "require-dev": {
+                "larapack/dd": "^1.0",
+                "phpunit/phpunit": "^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "laravel": {
+                    "providers": [
+                        "BeyondCode\\DumpServer\\DumpServerServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "BeyondCode\\DumpServer\\": "src"
+                },
+                "files": [
+                    "helpers.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Marcel Pociot",
+                    "email": "marcel@beyondco.de",
+                    "homepage": "https://beyondco.de",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Symfony Var-Dump Server for Laravel",
+            "homepage": "https://github.com/beyondcode/laravel-dump-server",
+            "keywords": [
+                "beyondcode",
+                "laravel-dump-server"
+            ],
+            "time": "2019-08-11T13:17:40+00:00"
+        },
+        {
+            "name": "composer/ca-bundle",
+            "version": "1.2.7",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/composer/ca-bundle.git",
+                "reference": "95c63ab2117a72f48f5a55da9740a3273d45b7fd"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/composer/ca-bundle/zipball/95c63ab2117a72f48f5a55da9740a3273d45b7fd",
+                "reference": "95c63ab2117a72f48f5a55da9740a3273d45b7fd",
+                "shasum": ""
+            },
+            "require": {
+                "ext-openssl": "*",
+                "ext-pcre": "*",
+                "php": "^5.3.2 || ^7.0 || ^8.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || 6.5 - 8",
+                "psr/log": "^1.0",
+                "symfony/process": "^2.5 || ^3.0 || ^4.0 || ^5.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Composer\\CaBundle\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                }
+            ],
+            "description": "Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.",
+            "keywords": [
+                "cabundle",
+                "cacert",
+                "certificate",
+                "ssl",
+                "tls"
+            ],
+            "funding": [
+                {
+                    "url": "https://packagist.com",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/composer/composer",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-04-08T08:27:21+00:00"
+        },
+        {
+            "name": "composer/composer",
+            "version": "1.10.8",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/composer/composer.git",
+                "reference": "56e0e094478f30935e9128552188355fa9712291"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/composer/composer/zipball/56e0e094478f30935e9128552188355fa9712291",
+                "reference": "56e0e094478f30935e9128552188355fa9712291",
+                "shasum": ""
+            },
+            "require": {
+                "composer/ca-bundle": "^1.0",
+                "composer/semver": "^1.0",
+                "composer/spdx-licenses": "^1.2",
+                "composer/xdebug-handler": "^1.1",
+                "justinrainbow/json-schema": "^5.2.10",
+                "php": "^5.3.2 || ^7.0",
+                "psr/log": "^1.0",
+                "seld/jsonlint": "^1.4",
+                "seld/phar-utils": "^1.0",
+                "symfony/console": "^2.7 || ^3.0 || ^4.0 || ^5.0",
+                "symfony/filesystem": "^2.7 || ^3.0 || ^4.0 || ^5.0",
+                "symfony/finder": "^2.7 || ^3.0 || ^4.0 || ^5.0",
+                "symfony/process": "^2.7 || ^3.0 || ^4.0 || ^5.0"
+            },
+            "conflict": {
+                "symfony/console": "2.8.38"
+            },
+            "require-dev": {
+                "phpspec/prophecy": "^1.10",
+                "symfony/phpunit-bridge": "^4.2"
+            },
+            "suggest": {
+                "ext-openssl": "Enabling the openssl extension allows you to access https URLs for repositories and packages",
+                "ext-zip": "Enabling the zip extension allows you to unzip archives",
+                "ext-zlib": "Allow gzip compression of HTTP requests"
+            },
+            "bin": [
+                "bin/composer"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.10-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Composer\\": "src/Composer"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nils Adermann",
+                    "email": "naderman@naderman.de",
+                    "homepage": "http://www.naderman.de"
+                },
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                }
+            ],
+            "description": "Composer helps you declare, manage and install dependencies of PHP projects. It ensures you have the right stack everywhere.",
+            "homepage": "https://getcomposer.org/",
+            "keywords": [
+                "autoload",
+                "dependency",
+                "package"
+            ],
+            "funding": [
+                {
+                    "url": "https://packagist.com",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/composer",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/composer/composer",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-24T19:23:30+00:00"
+        },
+        {
+            "name": "composer/semver",
+            "version": "1.5.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/composer/semver.git",
+                "reference": "c6bea70230ef4dd483e6bbcab6005f682ed3a8de"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/composer/semver/zipball/c6bea70230ef4dd483e6bbcab6005f682ed3a8de",
+                "reference": "c6bea70230ef4dd483e6bbcab6005f682ed3a8de",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3.2 || ^7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.5 || ^5.0.5"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Composer\\Semver\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nils Adermann",
+                    "email": "naderman@naderman.de",
+                    "homepage": "http://www.naderman.de"
+                },
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                },
+                {
+                    "name": "Rob Bast",
+                    "email": "rob.bast@gmail.com",
+                    "homepage": "http://robbast.nl"
+                }
+            ],
+            "description": "Semver library that offers utilities, version constraint parsing and validation.",
+            "keywords": [
+                "semantic",
+                "semver",
+                "validation",
+                "versioning"
+            ],
+            "time": "2020-01-13T12:06:48+00:00"
+        },
+        {
+            "name": "composer/spdx-licenses",
+            "version": "1.5.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/composer/spdx-licenses.git",
+                "reference": "0c3e51e1880ca149682332770e25977c70cf9dae"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/composer/spdx-licenses/zipball/0c3e51e1880ca149682332770e25977c70cf9dae",
+                "reference": "0c3e51e1880ca149682332770e25977c70cf9dae",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3.2 || ^7.0 || ^8.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || 6.5 - 7"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Composer\\Spdx\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nils Adermann",
+                    "email": "naderman@naderman.de",
+                    "homepage": "http://www.naderman.de"
+                },
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                },
+                {
+                    "name": "Rob Bast",
+                    "email": "rob.bast@gmail.com",
+                    "homepage": "http://robbast.nl"
+                }
+            ],
+            "description": "SPDX licenses list and validation library.",
+            "keywords": [
+                "license",
+                "spdx",
+                "validator"
+            ],
+            "time": "2020-02-14T07:44:31+00:00"
+        },
+        {
+            "name": "composer/xdebug-handler",
+            "version": "1.4.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/composer/xdebug-handler.git",
+                "reference": "fa2aaf99e2087f013a14f7432c1cd2dd7d8f1f51"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/composer/xdebug-handler/zipball/fa2aaf99e2087f013a14f7432c1cd2dd7d8f1f51",
+                "reference": "fa2aaf99e2087f013a14f7432c1cd2dd7d8f1f51",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3.2 || ^7.0 || ^8.0",
+                "psr/log": "^1.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || 6.5 - 8"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Composer\\XdebugHandler\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "John Stevenson",
+                    "email": "john-stevenson@blueyonder.co.uk"
+                }
+            ],
+            "description": "Restarts a process without Xdebug.",
+            "keywords": [
+                "Xdebug",
+                "performance"
+            ],
+            "funding": [
+                {
+                    "url": "https://packagist.com",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/composer",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/composer/composer",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-04T11:16:35+00:00"
+        },
+        {
+            "name": "doctrine/cache",
+            "version": "1.10.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/cache.git",
+                "reference": "35a4a70cd94e09e2259dfae7488afc6b474ecbd3"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/cache/zipball/35a4a70cd94e09e2259dfae7488afc6b474ecbd3",
+                "reference": "35a4a70cd94e09e2259dfae7488afc6b474ecbd3",
+                "shasum": ""
+            },
+            "require": {
+                "php": "~7.1 || ^8.0"
+            },
+            "conflict": {
+                "doctrine/common": ">2.2,<2.4"
+            },
+            "require-dev": {
+                "alcaeus/mongo-php-adapter": "^1.1",
+                "doctrine/coding-standard": "^6.0",
+                "mongodb/mongodb": "^1.1",
+                "phpunit/phpunit": "^7.0",
+                "predis/predis": "~1.0"
+            },
+            "suggest": {
+                "alcaeus/mongo-php-adapter": "Required to use legacy MongoDB driver"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.9.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Common\\Cache\\": "lib/Doctrine/Common/Cache"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Benjamin Eberlei",
+                    "email": "kontakt@beberlei.de"
+                },
+                {
+                    "name": "Jonathan Wage",
+                    "email": "jonwage@gmail.com"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "PHP Doctrine Cache library is a popular cache implementation that supports many different drivers such as redis, memcache, apc, mongodb and others.",
+            "homepage": "https://www.doctrine-project.org/projects/cache.html",
+            "keywords": [
+                "abstraction",
+                "apcu",
+                "cache",
+                "caching",
+                "couchdb",
+                "memcached",
+                "php",
+                "redis",
+                "xcache"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Fcache",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-27T16:24:54+00:00"
+        },
+        {
+            "name": "doctrine/dbal",
+            "version": "2.10.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/dbal.git",
+                "reference": "aab745e7b6b2de3b47019da81e7225e14dcfdac8"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/dbal/zipball/aab745e7b6b2de3b47019da81e7225e14dcfdac8",
+                "reference": "aab745e7b6b2de3b47019da81e7225e14dcfdac8",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/cache": "^1.0",
+                "doctrine/event-manager": "^1.0",
+                "ext-pdo": "*",
+                "php": "^7.2"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^6.0",
+                "jetbrains/phpstorm-stubs": "^2019.1",
+                "nikic/php-parser": "^4.4",
+                "phpstan/phpstan": "^0.12",
+                "phpunit/phpunit": "^8.4.1",
+                "symfony/console": "^2.0.5|^3.0|^4.0|^5.0",
+                "vimeo/psalm": "^3.11"
+            },
+            "suggest": {
+                "symfony/console": "For helpful console commands such as SQL execution and import of files."
+            },
+            "bin": [
+                "bin/doctrine-dbal"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.10.x-dev",
+                    "dev-develop": "3.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\DBAL\\": "lib/Doctrine/DBAL"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Benjamin Eberlei",
+                    "email": "kontakt@beberlei.de"
+                },
+                {
+                    "name": "Jonathan Wage",
+                    "email": "jonwage@gmail.com"
+                }
+            ],
+            "description": "Powerful PHP database abstraction layer (DBAL) with many features for database schema introspection and management.",
+            "homepage": "https://www.doctrine-project.org/projects/dbal.html",
+            "keywords": [
+                "abstraction",
+                "database",
+                "db2",
+                "dbal",
+                "mariadb",
+                "mssql",
+                "mysql",
+                "oci8",
+                "oracle",
+                "pdo",
+                "pgsql",
+                "postgresql",
+                "queryobject",
+                "sasql",
+                "sql",
+                "sqlanywhere",
+                "sqlite",
+                "sqlserver",
+                "sqlsrv"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Fdbal",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-04-20T17:19:26+00:00"
+        },
+        {
+            "name": "doctrine/event-manager",
+            "version": "1.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/event-manager.git",
+                "reference": "629572819973f13486371cb611386eb17851e85c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/event-manager/zipball/629572819973f13486371cb611386eb17851e85c",
+                "reference": "629572819973f13486371cb611386eb17851e85c",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "conflict": {
+                "doctrine/common": "<2.9@dev"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^6.0",
+                "phpunit/phpunit": "^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Common\\": "lib/Doctrine/Common"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Benjamin Eberlei",
+                    "email": "kontakt@beberlei.de"
+                },
+                {
+                    "name": "Jonathan Wage",
+                    "email": "jonwage@gmail.com"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                },
+                {
+                    "name": "Marco Pivetta",
+                    "email": "ocramius@gmail.com"
+                }
+            ],
+            "description": "The Doctrine Event Manager is a simple PHP event system that was built to be used with the various Doctrine projects.",
+            "homepage": "https://www.doctrine-project.org/projects/event-manager.html",
+            "keywords": [
+                "event",
+                "event dispatcher",
+                "event manager",
+                "event system",
+                "events"
+            ],
+            "time": "2019-11-10T09:48:07+00:00"
+        },
+        {
+            "name": "doctrine/instantiator",
+            "version": "1.3.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/instantiator.git",
+                "reference": "f350df0268e904597e3bd9c4685c53e0e333feea"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/f350df0268e904597e3bd9c4685c53e0e333feea",
+                "reference": "f350df0268e904597e3bd9c4685c53e0e333feea",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1 || ^8.0"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^6.0",
+                "ext-pdo": "*",
+                "ext-phar": "*",
+                "phpbench/phpbench": "^0.13",
+                "phpstan/phpstan-phpunit": "^0.11",
+                "phpstan/phpstan-shim": "^0.11",
+                "phpunit/phpunit": "^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Marco Pivetta",
+                    "email": "ocramius@gmail.com",
+                    "homepage": "http://ocramius.github.com/"
+                }
+            ],
+            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
+            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
+            "keywords": [
+                "constructor",
+                "instantiate"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-29T17:27:14+00:00"
+        },
+        {
+            "name": "facade/flare-client-php",
+            "version": "1.3.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/facade/flare-client-php.git",
+                "reference": "db1e03426e7f9472c9ecd1092aff00f56aa6c004"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/facade/flare-client-php/zipball/db1e03426e7f9472c9ecd1092aff00f56aa6c004",
+                "reference": "db1e03426e7f9472c9ecd1092aff00f56aa6c004",
+                "shasum": ""
+            },
+            "require": {
+                "facade/ignition-contracts": "~1.0",
+                "illuminate/pipeline": "^5.5|^6.0|^7.0",
+                "php": "^7.1",
+                "symfony/http-foundation": "^3.3|^4.1|^5.0",
+                "symfony/var-dumper": "^3.4|^4.0|^5.0"
+            },
+            "require-dev": {
+                "larapack/dd": "^1.1",
+                "phpunit/phpunit": "^7.5.16",
+                "spatie/phpunit-snapshot-assertions": "^2.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Facade\\FlareClient\\": "src"
+                },
+                "files": [
+                    "src/helpers.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "Send PHP errors to Flare",
+            "homepage": "https://github.com/facade/flare-client-php",
+            "keywords": [
+                "exception",
+                "facade",
+                "flare",
+                "reporting"
+            ],
+            "funding": [
+                {
+                    "url": "https://www.patreon.com/spatie",
+                    "type": "patreon"
+                }
+            ],
+            "time": "2020-03-02T15:52:04+00:00"
+        },
+        {
+            "name": "facade/ignition",
+            "version": "1.16.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/facade/ignition.git",
+                "reference": "af05ac5ee8587395d7474ec0681c08776a2cb09d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/facade/ignition/zipball/af05ac5ee8587395d7474ec0681c08776a2cb09d",
+                "reference": "af05ac5ee8587395d7474ec0681c08776a2cb09d",
+                "shasum": ""
+            },
+            "require": {
+                "ext-json": "*",
+                "ext-mbstring": "*",
+                "facade/flare-client-php": "^1.3",
+                "facade/ignition-contracts": "^1.0",
+                "filp/whoops": "^2.4",
+                "illuminate/support": "~5.5.0 || ~5.6.0 || ~5.7.0 || ~5.8.0 || ^6.0",
+                "monolog/monolog": "^1.12 || ^2.0",
+                "php": "^7.1",
+                "scrivo/highlight.php": "^9.15",
+                "symfony/console": "^3.4 || ^4.0",
+                "symfony/var-dumper": "^3.4 || ^4.0"
+            },
+            "require-dev": {
+                "friendsofphp/php-cs-fixer": "^2.14",
+                "mockery/mockery": "^1.2",
+                "orchestra/testbench": "^3.5 || ^3.6 || ^3.7 || ^3.8 || ^4.0"
+            },
+            "suggest": {
+                "laravel/telescope": "^2.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Facade\\Ignition\\IgnitionServiceProvider"
+                    ],
+                    "aliases": {
+                        "Flare": "Facade\\Ignition\\Facades\\Flare"
+                    }
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Facade\\Ignition\\": "src"
+                },
+                "files": [
+                    "src/helpers.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "A beautiful error page for Laravel applications.",
+            "homepage": "https://github.com/facade/ignition",
+            "keywords": [
+                "error",
+                "flare",
+                "laravel",
+                "page"
+            ],
+            "time": "2020-03-05T12:39:07+00:00"
+        },
+        {
+            "name": "facade/ignition-contracts",
+            "version": "1.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/facade/ignition-contracts.git",
+                "reference": "f445db0fb86f48e205787b2592840dd9c80ded28"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/facade/ignition-contracts/zipball/f445db0fb86f48e205787b2592840dd9c80ded28",
+                "reference": "f445db0fb86f48e205787b2592840dd9c80ded28",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Facade\\IgnitionContracts\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Freek Van der Herten",
+                    "email": "freek@spatie.be",
+                    "homepage": "https://flareapp.io",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Solution contracts for Ignition",
+            "homepage": "https://github.com/facade/ignition-contracts",
+            "keywords": [
+                "contracts",
+                "flare",
+                "ignition"
+            ],
+            "time": "2019-08-30T14:06:08+00:00"
+        },
+        {
+            "name": "filp/whoops",
+            "version": "2.7.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/filp/whoops.git",
+                "reference": "5d5fe9bb3d656b514d455645b3addc5f7ba7714d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/filp/whoops/zipball/5d5fe9bb3d656b514d455645b3addc5f7ba7714d",
+                "reference": "5d5fe9bb3d656b514d455645b3addc5f7ba7714d",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.5.9 || ^7.0",
+                "psr/log": "^1.0.1"
+            },
+            "require-dev": {
+                "mockery/mockery": "^0.9 || ^1.0",
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0",
+                "symfony/var-dumper": "^2.6 || ^3.0 || ^4.0 || ^5.0"
+            },
+            "suggest": {
+                "symfony/var-dumper": "Pretty print complex values better with var-dumper available",
+                "whoops/soap": "Formats errors as SOAP responses"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.6-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Whoops\\": "src/Whoops/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Filipe Dobreira",
+                    "homepage": "https://github.com/filp",
+                    "role": "Developer"
+                }
+            ],
+            "description": "php error handling for cool kids",
+            "homepage": "https://filp.github.io/whoops/",
+            "keywords": [
+                "error",
+                "exception",
+                "handling",
+                "library",
+                "throwable",
+                "whoops"
+            ],
+            "time": "2020-06-14T09:00:00+00:00"
+        },
+        {
+            "name": "fzaninotto/faker",
+            "version": "v1.9.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/fzaninotto/Faker.git",
+                "reference": "fc10d778e4b84d5bd315dad194661e091d307c6f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/fzaninotto/Faker/zipball/fc10d778e4b84d5bd315dad194661e091d307c6f",
+                "reference": "fc10d778e4b84d5bd315dad194661e091d307c6f",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3.3 || ^7.0"
+            },
+            "require-dev": {
+                "ext-intl": "*",
+                "phpunit/phpunit": "^4.8.35 || ^5.7",
+                "squizlabs/php_codesniffer": "^2.9.2"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.9-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Faker\\": "src/Faker/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "François Zaninotto"
+                }
+            ],
+            "description": "Faker is a PHP library that generates fake data for you.",
+            "keywords": [
+                "data",
+                "faker",
+                "fixtures"
+            ],
+            "time": "2019-12-12T13:22:17+00:00"
+        },
+        {
+            "name": "hamcrest/hamcrest-php",
+            "version": "v2.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/hamcrest/hamcrest-php.git",
+                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/776503d3a8e85d4f9a1148614f95b7a608b046ad",
+                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3|^7.0"
+            },
+            "replace": {
+                "cordoval/hamcrest-php": "*",
+                "davedevelopment/hamcrest-php": "*",
+                "kodova/hamcrest-php": "*"
+            },
+            "require-dev": {
+                "phpunit/php-file-iterator": "1.3.3",
+                "phpunit/phpunit": "~4.0",
+                "satooshi/php-coveralls": "^1.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "hamcrest"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD"
+            ],
+            "description": "This is the PHP port of Hamcrest Matchers",
+            "keywords": [
+                "test"
+            ],
+            "time": "2016-01-20T08:20:44+00:00"
+        },
+        {
+            "name": "jakub-onderka/php-console-color",
+            "version": "v0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/JakubOnderka/PHP-Console-Color.git",
+                "reference": "d5deaecff52a0d61ccb613bb3804088da0307191"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Color/zipball/d5deaecff52a0d61ccb613bb3804088da0307191",
+                "reference": "d5deaecff52a0d61ccb613bb3804088da0307191",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "jakub-onderka/php-code-style": "1.0",
+                "jakub-onderka/php-parallel-lint": "1.0",
+                "jakub-onderka/php-var-dump-check": "0.*",
+                "phpunit/phpunit": "~4.3",
+                "squizlabs/php_codesniffer": "1.*"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "JakubOnderka\\PhpConsoleColor\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-2-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Jakub Onderka",
+                    "email": "jakub.onderka@gmail.com"
+                }
+            ],
+            "abandoned": "php-parallel-lint/php-console-color",
+            "time": "2018-09-29T17:23:10+00:00"
+        },
+        {
+            "name": "jakub-onderka/php-console-highlighter",
+            "version": "v0.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/JakubOnderka/PHP-Console-Highlighter.git",
+                "reference": "9f7a229a69d52506914b4bc61bfdb199d90c5547"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Highlighter/zipball/9f7a229a69d52506914b4bc61bfdb199d90c5547",
+                "reference": "9f7a229a69d52506914b4bc61bfdb199d90c5547",
+                "shasum": ""
+            },
+            "require": {
+                "ext-tokenizer": "*",
+                "jakub-onderka/php-console-color": "~0.2",
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "jakub-onderka/php-code-style": "~1.0",
+                "jakub-onderka/php-parallel-lint": "~1.0",
+                "jakub-onderka/php-var-dump-check": "~0.1",
+                "phpunit/phpunit": "~4.0",
+                "squizlabs/php_codesniffer": "~1.5"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "JakubOnderka\\PhpConsoleHighlighter\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jakub Onderka",
+                    "email": "acci@acci.cz",
+                    "homepage": "http://www.acci.cz/"
+                }
+            ],
+            "description": "Highlight PHP code in terminal",
+            "abandoned": "php-parallel-lint/php-console-highlighter",
+            "time": "2018-09-29T18:48:56+00:00"
+        },
+        {
+            "name": "justinrainbow/json-schema",
+            "version": "5.2.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/justinrainbow/json-schema.git",
+                "reference": "2ba9c8c862ecd5510ed16c6340aa9f6eadb4f31b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/justinrainbow/json-schema/zipball/2ba9c8c862ecd5510ed16c6340aa9f6eadb4f31b",
+                "reference": "2ba9c8c862ecd5510ed16c6340aa9f6eadb4f31b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "friendsofphp/php-cs-fixer": "~2.2.20||~2.15.1",
+                "json-schema/json-schema-test-suite": "1.2.0",
+                "phpunit/phpunit": "^4.8.35"
+            },
+            "bin": [
+                "bin/validate-json"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "5.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "JsonSchema\\": "src/JsonSchema/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Bruno Prieto Reis",
+                    "email": "bruno.p.reis@gmail.com"
+                },
+                {
+                    "name": "Justin Rainbow",
+                    "email": "justin.rainbow@gmail.com"
+                },
+                {
+                    "name": "Igor Wiedler",
+                    "email": "igor@wiedler.ch"
+                },
+                {
+                    "name": "Robert Schönthal",
+                    "email": "seroscho@googlemail.com"
+                }
+            ],
+            "description": "A library to validate a json schema.",
+            "homepage": "https://github.com/justinrainbow/json-schema",
+            "keywords": [
+                "json",
+                "schema"
+            ],
+            "time": "2020-05-27T16:41:55+00:00"
+        },
+        {
+            "name": "maximebf/debugbar",
+            "version": "v1.16.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/maximebf/php-debugbar.git",
+                "reference": "1a1605b8e9bacb34cc0c6278206d699772e1d372"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/maximebf/php-debugbar/zipball/1a1605b8e9bacb34cc0c6278206d699772e1d372",
+                "reference": "1a1605b8e9bacb34cc0c6278206d699772e1d372",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1",
+                "psr/log": "^1.0",
+                "symfony/var-dumper": "^2.6|^3|^4|^5"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^5"
+            },
+            "suggest": {
+                "kriswallsmith/assetic": "The best way to manage assets",
+                "monolog/monolog": "Log using Monolog",
+                "predis/predis": "Redis storage"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.16-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "DebugBar\\": "src/DebugBar/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Maxime Bouroumeau-Fuseau",
+                    "email": "maxime.bouroumeau@gmail.com",
+                    "homepage": "http://maximebf.com"
+                },
+                {
+                    "name": "Barry vd. Heuvel",
+                    "email": "barryvdh@gmail.com"
+                }
+            ],
+            "description": "Debug bar in the browser for php application",
+            "homepage": "https://github.com/maximebf/php-debugbar",
+            "keywords": [
+                "debug",
+                "debugbar"
+            ],
+            "time": "2020-05-06T07:06:27+00:00"
+        },
+        {
+            "name": "mockery/mockery",
+            "version": "1.4.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/mockery/mockery.git",
+                "reference": "6c6a7c533469873deacf998237e7649fc6b36223"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/mockery/mockery/zipball/6c6a7c533469873deacf998237e7649fc6b36223",
+                "reference": "6c6a7c533469873deacf998237e7649fc6b36223",
+                "shasum": ""
+            },
+            "require": {
+                "hamcrest/hamcrest-php": "~2.0",
+                "lib-pcre": ">=7.0",
+                "php": "^7.3.0"
+            },
+            "conflict": {
+                "phpunit/phpunit": "<8.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^8.0.0 || ^9.0.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.4.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Mockery": "library/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Pádraic Brady",
+                    "email": "padraic.brady@gmail.com",
+                    "homepage": "http://blog.astrumfutura.com"
+                },
+                {
+                    "name": "Dave Marshall",
+                    "email": "dave.marshall@atstsolutions.co.uk",
+                    "homepage": "http://davedevelopment.co.uk"
+                }
+            ],
+            "description": "Mockery is a simple yet flexible PHP mock object framework",
+            "homepage": "https://github.com/mockery/mockery",
+            "keywords": [
+                "BDD",
+                "TDD",
+                "library",
+                "mock",
+                "mock objects",
+                "mockery",
+                "stub",
+                "test",
+                "test double",
+                "testing"
+            ],
+            "time": "2020-05-19T14:25:16+00:00"
+        },
+        {
+            "name": "myclabs/deep-copy",
+            "version": "1.10.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/myclabs/DeepCopy.git",
+                "reference": "5796d127b0c4ff505b77455148ea9d5269d99758"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/5796d127b0c4ff505b77455148ea9d5269d99758",
+                "reference": "5796d127b0c4ff505b77455148ea9d5269d99758",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1 || ^8.0"
+            },
+            "replace": {
+                "myclabs/deep-copy": "self.version"
+            },
+            "require-dev": {
+                "doctrine/collections": "^1.0",
+                "doctrine/common": "^2.6",
+                "phpunit/phpunit": "^7.1"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "DeepCopy\\": "src/DeepCopy/"
+                },
+                "files": [
+                    "src/DeepCopy/deep_copy.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "Create deep copies (clones) of your objects",
+            "keywords": [
+                "clone",
+                "copy",
+                "duplicate",
+                "object",
+                "object graph"
+            ],
+            "funding": [
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-06-28T07:02:41+00:00"
+        },
+        {
+            "name": "nunomaduro/collision",
+            "version": "v3.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/nunomaduro/collision.git",
+                "reference": "af42d339fe2742295a54f6fdd42aaa6f8c4aca68"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/nunomaduro/collision/zipball/af42d339fe2742295a54f6fdd42aaa6f8c4aca68",
+                "reference": "af42d339fe2742295a54f6fdd42aaa6f8c4aca68",
+                "shasum": ""
+            },
+            "require": {
+                "filp/whoops": "^2.1.4",
+                "jakub-onderka/php-console-highlighter": "0.3.*|0.4.*",
+                "php": "^7.1",
+                "symfony/console": "~2.8|~3.3|~4.0"
+            },
+            "require-dev": {
+                "laravel/framework": "5.8.*",
+                "nunomaduro/larastan": "^0.3.0",
+                "phpstan/phpstan": "^0.11",
+                "phpunit/phpunit": "~8.0"
+            },
+            "type": "library",
+            "extra": {
+                "laravel": {
+                    "providers": [
+                        "NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider"
+                    ]
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "NunoMaduro\\Collision\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nuno Maduro",
+                    "email": "enunomaduro@gmail.com"
+                }
+            ],
+            "description": "Cli error handling for console/command-line PHP applications.",
+            "keywords": [
+                "artisan",
+                "cli",
+                "command-line",
+                "console",
+                "error",
+                "handling",
+                "laravel",
+                "laravel-zero",
+                "php",
+                "symfony"
+            ],
+            "time": "2019-03-07T21:35:13+00:00"
+        },
+        {
+            "name": "phar-io/manifest",
+            "version": "1.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phar-io/manifest.git",
+                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phar-io/manifest/zipball/7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
+                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
+                "shasum": ""
+            },
+            "require": {
+                "ext-dom": "*",
+                "ext-phar": "*",
+                "phar-io/version": "^2.0",
+                "php": "^5.6 || ^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Arne Blankerts",
+                    "email": "arne@blankerts.de",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Sebastian Heuer",
+                    "email": "sebastian@phpeople.de",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
+            "time": "2018-07-08T19:23:20+00:00"
+        },
+        {
+            "name": "phar-io/version",
+            "version": "2.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phar-io/version.git",
+                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phar-io/version/zipball/45a2ec53a73c70ce41d55cedef9063630abaf1b6",
+                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.6 || ^7.0"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Arne Blankerts",
+                    "email": "arne@blankerts.de",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Sebastian Heuer",
+                    "email": "sebastian@phpeople.de",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Library for handling version information and constraints",
+            "time": "2018-07-08T19:19:57+00:00"
+        },
+        {
+            "name": "phpdocumentor/reflection-common",
+            "version": "2.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
+                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
+                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2 || ^8.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-2.x": "2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "phpDocumentor\\Reflection\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jaap van Otterdijk",
+                    "email": "opensource@ijaap.nl"
+                }
+            ],
+            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
+            "homepage": "http://www.phpdoc.org",
+            "keywords": [
+                "FQSEN",
+                "phpDocumentor",
+                "phpdoc",
+                "reflection",
+                "static analysis"
+            ],
+            "time": "2020-06-27T09:03:43+00:00"
+        },
+        {
+            "name": "phpdocumentor/reflection-docblock",
+            "version": "5.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
+                "reference": "cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e",
+                "reference": "cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e",
+                "shasum": ""
+            },
+            "require": {
+                "ext-filter": "^7.1",
+                "php": "^7.2",
+                "phpdocumentor/reflection-common": "^2.0",
+                "phpdocumentor/type-resolver": "^1.0",
+                "webmozart/assert": "^1"
+            },
+            "require-dev": {
+                "doctrine/instantiator": "^1",
+                "mockery/mockery": "^1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "5.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "phpDocumentor\\Reflection\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Mike van Riel",
+                    "email": "me@mikevanriel.com"
+                },
+                {
+                    "name": "Jaap van Otterdijk",
+                    "email": "account@ijaap.nl"
+                }
+            ],
+            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
+            "time": "2020-02-22T12:28:44+00:00"
+        },
+        {
+            "name": "phpdocumentor/type-resolver",
+            "version": "1.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phpDocumentor/TypeResolver.git",
+                "reference": "e878a14a65245fbe78f8080eba03b47c3b705651"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/e878a14a65245fbe78f8080eba03b47c3b705651",
+                "reference": "e878a14a65245fbe78f8080eba03b47c3b705651",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2 || ^8.0",
+                "phpdocumentor/reflection-common": "^2.0"
+            },
+            "require-dev": {
+                "ext-tokenizer": "*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-1.x": "1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "phpDocumentor\\Reflection\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Mike van Riel",
+                    "email": "me@mikevanriel.com"
+                }
+            ],
+            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
+            "time": "2020-06-27T10:12:23+00:00"
+        },
+        {
+            "name": "phpspec/prophecy",
+            "version": "v1.10.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phpspec/prophecy.git",
+                "reference": "451c3cd1418cf640de218914901e51b064abb093"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/451c3cd1418cf640de218914901e51b064abb093",
+                "reference": "451c3cd1418cf640de218914901e51b064abb093",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/instantiator": "^1.0.2",
+                "php": "^5.3|^7.0",
+                "phpdocumentor/reflection-docblock": "^2.0|^3.0.2|^4.0|^5.0",
+                "sebastian/comparator": "^1.2.3|^2.0|^3.0|^4.0",
+                "sebastian/recursion-context": "^1.0|^2.0|^3.0|^4.0"
+            },
+            "require-dev": {
+                "phpspec/phpspec": "^2.5 || ^3.2",
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.5 || ^7.1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.10.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Prophecy\\": "src/Prophecy"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Konstantin Kudryashov",
+                    "email": "ever.zet@gmail.com",
+                    "homepage": "http://everzet.com"
+                },
+                {
+                    "name": "Marcello Duarte",
+                    "email": "marcello.duarte@gmail.com"
+                }
+            ],
+            "description": "Highly opinionated mocking framework for PHP 5.3+",
+            "homepage": "https://github.com/phpspec/prophecy",
+            "keywords": [
+                "Double",
+                "Dummy",
+                "fake",
+                "mock",
+                "spy",
+                "stub"
+            ],
+            "time": "2020-03-05T15:02:03+00:00"
+        },
+        {
+            "name": "phpunit/php-code-coverage",
+            "version": "7.0.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
+                "reference": "f1884187926fbb755a9aaf0b3836ad3165b478bf"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f1884187926fbb755a9aaf0b3836ad3165b478bf",
+                "reference": "f1884187926fbb755a9aaf0b3836ad3165b478bf",
+                "shasum": ""
+            },
+            "require": {
+                "ext-dom": "*",
+                "ext-xmlwriter": "*",
+                "php": "^7.2",
+                "phpunit/php-file-iterator": "^2.0.2",
+                "phpunit/php-text-template": "^1.2.1",
+                "phpunit/php-token-stream": "^3.1.1",
+                "sebastian/code-unit-reverse-lookup": "^1.0.1",
+                "sebastian/environment": "^4.2.2",
+                "sebastian/version": "^2.0.1",
+                "theseer/tokenizer": "^1.1.3"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^8.2.2"
+            },
+            "suggest": {
+                "ext-xdebug": "^2.7.2"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "7.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
+            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
+            "keywords": [
+                "coverage",
+                "testing",
+                "xunit"
+            ],
+            "time": "2019-11-20T13:55:58+00:00"
+        },
+        {
+            "name": "phpunit/php-file-iterator",
+            "version": "2.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
+                "reference": "050bedf145a257b1ff02746c31894800e5122946"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/050bedf145a257b1ff02746c31894800e5122946",
+                "reference": "050bedf145a257b1ff02746c31894800e5122946",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
+            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
+            "keywords": [
+                "filesystem",
+                "iterator"
+            ],
+            "time": "2018-09-13T20:33:42+00:00"
+        },
+        {
+            "name": "phpunit/php-text-template",
+            "version": "1.2.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-text-template.git",
+                "reference": "31f8b717e51d9a2afca6c9f046f5d69fc27c8686"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686",
+                "reference": "31f8b717e51d9a2afca6c9f046f5d69fc27c8686",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Simple template engine.",
+            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
+            "keywords": [
+                "template"
+            ],
+            "time": "2015-06-21T13:50:34+00:00"
+        },
+        {
+            "name": "phpunit/php-timer",
+            "version": "2.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-timer.git",
+                "reference": "1038454804406b0b5f5f520358e78c1c2f71501e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/1038454804406b0b5f5f520358e78c1c2f71501e",
+                "reference": "1038454804406b0b5f5f520358e78c1c2f71501e",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Utility class for timing",
+            "homepage": "https://github.com/sebastianbergmann/php-timer/",
+            "keywords": [
+                "timer"
+            ],
+            "time": "2019-06-07T04:22:29+00:00"
+        },
+        {
+            "name": "phpunit/php-token-stream",
+            "version": "3.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
+                "reference": "995192df77f63a59e47f025390d2d1fdf8f425ff"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/995192df77f63a59e47f025390d2d1fdf8f425ff",
+                "reference": "995192df77f63a59e47f025390d2d1fdf8f425ff",
+                "shasum": ""
+            },
+            "require": {
+                "ext-tokenizer": "*",
+                "php": "^7.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.1-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Wrapper around PHP's tokenizer extension.",
+            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
+            "keywords": [
+                "tokenizer"
+            ],
+            "time": "2019-09-17T06:23:10+00:00"
+        },
+        {
+            "name": "phpunit/phpunit",
+            "version": "8.5.8",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/phpunit.git",
+                "reference": "34c18baa6a44f1d1fbf0338907139e9dce95b997"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/34c18baa6a44f1d1fbf0338907139e9dce95b997",
+                "reference": "34c18baa6a44f1d1fbf0338907139e9dce95b997",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/instantiator": "^1.2.0",
+                "ext-dom": "*",
+                "ext-json": "*",
+                "ext-libxml": "*",
+                "ext-mbstring": "*",
+                "ext-xml": "*",
+                "ext-xmlwriter": "*",
+                "myclabs/deep-copy": "^1.9.1",
+                "phar-io/manifest": "^1.0.3",
+                "phar-io/version": "^2.0.1",
+                "php": "^7.2",
+                "phpspec/prophecy": "^1.8.1",
+                "phpunit/php-code-coverage": "^7.0.7",
+                "phpunit/php-file-iterator": "^2.0.2",
+                "phpunit/php-text-template": "^1.2.1",
+                "phpunit/php-timer": "^2.1.2",
+                "sebastian/comparator": "^3.0.2",
+                "sebastian/diff": "^3.0.2",
+                "sebastian/environment": "^4.2.2",
+                "sebastian/exporter": "^3.1.1",
+                "sebastian/global-state": "^3.0.0",
+                "sebastian/object-enumerator": "^3.0.3",
+                "sebastian/resource-operations": "^2.0.1",
+                "sebastian/type": "^1.1.3",
+                "sebastian/version": "^2.0.1"
+            },
+            "require-dev": {
+                "ext-pdo": "*"
+            },
+            "suggest": {
+                "ext-soap": "*",
+                "ext-xdebug": "*",
+                "phpunit/php-invoker": "^2.0.0"
+            },
+            "bin": [
+                "phpunit"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "8.5-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "The PHP Unit Testing framework.",
+            "homepage": "https://phpunit.de/",
+            "keywords": [
+                "phpunit",
+                "testing",
+                "xunit"
+            ],
+            "funding": [
+                {
+                    "url": "https://phpunit.de/donate.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/sebastianbergmann",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-06-22T07:06:58+00:00"
+        },
+        {
+            "name": "scrivo/highlight.php",
+            "version": "v9.18.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/scrivo/highlight.php.git",
+                "reference": "52fc21c99fd888e33aed4879e55a3646f8d40558"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/scrivo/highlight.php/zipball/52fc21c99fd888e33aed4879e55a3646f8d40558",
+                "reference": "52fc21c99fd888e33aed4879e55a3646f8d40558",
+                "shasum": ""
+            },
+            "require": {
+                "ext-json": "*",
+                "ext-mbstring": "*",
+                "php": ">=5.4"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8|^5.7",
+                "sabberworm/php-css-parser": "^8.3",
+                "symfony/finder": "^2.8|^3.4",
+                "symfony/var-dumper": "^2.8|^3.4"
+            },
+            "suggest": {
+                "ext-dom": "Needed to make use of the features in the utilities namespace"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-0": {
+                    "Highlight\\": "",
+                    "HighlightUtilities\\": ""
+                },
+                "files": [
+                    "HighlightUtilities/functions.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Geert Bergman",
+                    "homepage": "http://www.scrivo.org/",
+                    "role": "Project Author"
+                },
+                {
+                    "name": "Vladimir Jimenez",
+                    "homepage": "https://allejo.io",
+                    "role": "Maintainer"
+                },
+                {
+                    "name": "Martin Folkers",
+                    "homepage": "https://twobrain.io",
+                    "role": "Contributor"
+                }
+            ],
+            "description": "Server side syntax highlighter that supports 185 languages. It's a PHP port of highlight.js",
+            "keywords": [
+                "code",
+                "highlight",
+                "highlight.js",
+                "highlight.php",
+                "syntax"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/allejo",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-03-02T05:59:21+00:00"
+        },
+        {
+            "name": "sebastian/code-unit-reverse-lookup",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
+                "reference": "4419fcdb5eabb9caa61a27c7a1db532a6b55dd18"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/4419fcdb5eabb9caa61a27c7a1db532a6b55dd18",
+                "reference": "4419fcdb5eabb9caa61a27c7a1db532a6b55dd18",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.6 || ^7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^5.7 || ^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Looks up which function or method a line of code belongs to",
+            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
+            "time": "2017-03-04T06:30:41+00:00"
+        },
+        {
+            "name": "sebastian/comparator",
+            "version": "3.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/comparator.git",
+                "reference": "5de4fc177adf9bce8df98d8d141a7559d7ccf6da"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/5de4fc177adf9bce8df98d8d141a7559d7ccf6da",
+                "reference": "5de4fc177adf9bce8df98d8d141a7559d7ccf6da",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1",
+                "sebastian/diff": "^3.0",
+                "sebastian/exporter": "^3.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Jeff Welch",
+                    "email": "whatthejeff@gmail.com"
+                },
+                {
+                    "name": "Volker Dusch",
+                    "email": "github@wallbash.com"
+                },
+                {
+                    "name": "Bernhard Schussek",
+                    "email": "bschussek@2bepublished.at"
+                },
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Provides the functionality to compare PHP values for equality",
+            "homepage": "https://github.com/sebastianbergmann/comparator",
+            "keywords": [
+                "comparator",
+                "compare",
+                "equality"
+            ],
+            "time": "2018-07-12T15:12:46+00:00"
+        },
+        {
+            "name": "sebastian/diff",
+            "version": "3.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/diff.git",
+                "reference": "720fcc7e9b5cf384ea68d9d930d480907a0c1a29"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/720fcc7e9b5cf384ea68d9d930d480907a0c1a29",
+                "reference": "720fcc7e9b5cf384ea68d9d930d480907a0c1a29",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.5 || ^8.0",
+                "symfony/process": "^2 || ^3.3 || ^4"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Kore Nordmann",
+                    "email": "mail@kore-nordmann.de"
+                },
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Diff implementation",
+            "homepage": "https://github.com/sebastianbergmann/diff",
+            "keywords": [
+                "diff",
+                "udiff",
+                "unidiff",
+                "unified diff"
+            ],
+            "time": "2019-02-04T06:01:07+00:00"
+        },
+        {
+            "name": "sebastian/environment",
+            "version": "4.2.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/environment.git",
+                "reference": "464c90d7bdf5ad4e8a6aea15c091fec0603d4368"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/464c90d7bdf5ad4e8a6aea15c091fec0603d4368",
+                "reference": "464c90d7bdf5ad4e8a6aea15c091fec0603d4368",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^7.5"
+            },
+            "suggest": {
+                "ext-posix": "*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.2-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Provides functionality to handle HHVM/PHP environments",
+            "homepage": "http://www.github.com/sebastianbergmann/environment",
+            "keywords": [
+                "Xdebug",
+                "environment",
+                "hhvm"
+            ],
+            "time": "2019-11-20T08:46:58+00:00"
+        },
+        {
+            "name": "sebastian/exporter",
+            "version": "3.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/exporter.git",
+                "reference": "68609e1261d215ea5b21b7987539cbfbe156ec3e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/68609e1261d215ea5b21b7987539cbfbe156ec3e",
+                "reference": "68609e1261d215ea5b21b7987539cbfbe156ec3e",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.0",
+                "sebastian/recursion-context": "^3.0"
+            },
+            "require-dev": {
+                "ext-mbstring": "*",
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.1.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                },
+                {
+                    "name": "Jeff Welch",
+                    "email": "whatthejeff@gmail.com"
+                },
+                {
+                    "name": "Volker Dusch",
+                    "email": "github@wallbash.com"
+                },
+                {
+                    "name": "Adam Harvey",
+                    "email": "aharvey@php.net"
+                },
+                {
+                    "name": "Bernhard Schussek",
+                    "email": "bschussek@gmail.com"
+                }
+            ],
+            "description": "Provides the functionality to export PHP variables for visualization",
+            "homepage": "http://www.github.com/sebastianbergmann/exporter",
+            "keywords": [
+                "export",
+                "exporter"
+            ],
+            "time": "2019-09-14T09:02:43+00:00"
+        },
+        {
+            "name": "sebastian/global-state",
+            "version": "3.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/global-state.git",
+                "reference": "edf8a461cf1d4005f19fb0b6b8b95a9f7fa0adc4"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/edf8a461cf1d4005f19fb0b6b8b95a9f7fa0adc4",
+                "reference": "edf8a461cf1d4005f19fb0b6b8b95a9f7fa0adc4",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2",
+                "sebastian/object-reflector": "^1.1.1",
+                "sebastian/recursion-context": "^3.0"
+            },
+            "require-dev": {
+                "ext-dom": "*",
+                "phpunit/phpunit": "^8.0"
+            },
+            "suggest": {
+                "ext-uopz": "*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Snapshotting of global state",
+            "homepage": "http://www.github.com/sebastianbergmann/global-state",
+            "keywords": [
+                "global state"
+            ],
+            "time": "2019-02-01T05:30:01+00:00"
+        },
+        {
+            "name": "sebastian/object-enumerator",
+            "version": "3.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
+                "reference": "7cfd9e65d11ffb5af41198476395774d4c8a84c5"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/7cfd9e65d11ffb5af41198476395774d4c8a84c5",
+                "reference": "7cfd9e65d11ffb5af41198476395774d4c8a84c5",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.0",
+                "sebastian/object-reflector": "^1.1.1",
+                "sebastian/recursion-context": "^3.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
+            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
+            "time": "2017-08-03T12:35:26+00:00"
+        },
+        {
+            "name": "sebastian/object-reflector",
+            "version": "1.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/object-reflector.git",
+                "reference": "773f97c67f28de00d397be301821b06708fca0be"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/773f97c67f28de00d397be301821b06708fca0be",
+                "reference": "773f97c67f28de00d397be301821b06708fca0be",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Allows reflection of object attributes, including inherited and non-public ones",
+            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
+            "time": "2017-03-29T09:07:27+00:00"
+        },
+        {
+            "name": "sebastian/recursion-context",
+            "version": "3.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/recursion-context.git",
+                "reference": "5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8",
+                "reference": "5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Jeff Welch",
+                    "email": "whatthejeff@gmail.com"
+                },
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                },
+                {
+                    "name": "Adam Harvey",
+                    "email": "aharvey@php.net"
+                }
+            ],
+            "description": "Provides functionality to recursively process PHP variables",
+            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
+            "time": "2017-03-03T06:23:57+00:00"
+        },
+        {
+            "name": "sebastian/resource-operations",
+            "version": "2.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/resource-operations.git",
+                "reference": "4d7a795d35b889bf80a0cc04e08d77cedfa917a9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/4d7a795d35b889bf80a0cc04e08d77cedfa917a9",
+                "reference": "4d7a795d35b889bf80a0cc04e08d77cedfa917a9",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de"
+                }
+            ],
+            "description": "Provides a list of PHP built-in functions that operate on resources",
+            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
+            "time": "2018-10-04T04:07:39+00:00"
+        },
+        {
+            "name": "sebastian/type",
+            "version": "1.1.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/type.git",
+                "reference": "3aaaa15fa71d27650d62a948be022fe3b48541a3"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/3aaaa15fa71d27650d62a948be022fe3b48541a3",
+                "reference": "3aaaa15fa71d27650d62a948be022fe3b48541a3",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^8.2"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Collection of value objects that represent the types of the PHP type system",
+            "homepage": "https://github.com/sebastianbergmann/type",
+            "time": "2019-07-02T08:10:15+00:00"
+        },
+        {
+            "name": "sebastian/version",
+            "version": "2.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/version.git",
+                "reference": "99732be0ddb3361e16ad77b68ba41efc8e979019"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/99732be0ddb3361e16ad77b68ba41efc8e979019",
+                "reference": "99732be0ddb3361e16ad77b68ba41efc8e979019",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.6"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
+            "homepage": "https://github.com/sebastianbergmann/version",
+            "time": "2016-10-03T07:35:21+00:00"
+        },
+        {
+            "name": "seld/jsonlint",
+            "version": "1.8.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Seldaek/jsonlint.git",
+                "reference": "ff2aa5420bfbc296cf6a0bc785fa5b35736de7c1"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/ff2aa5420bfbc296cf6a0bc785fa5b35736de7c1",
+                "reference": "ff2aa5420bfbc296cf6a0bc785fa5b35736de7c1",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3 || ^7.0 || ^8.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
+            },
+            "bin": [
+                "bin/jsonlint"
+            ],
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be",
+                    "homepage": "http://seld.be"
+                }
+            ],
+            "description": "JSON Linter",
+            "keywords": [
+                "json",
+                "linter",
+                "parser",
+                "validator"
+            ],
+            "funding": [
+                {
+                    "url": "https://github.com/Seldaek",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-04-30T19:05:18+00:00"
+        },
+        {
+            "name": "seld/phar-utils",
+            "version": "1.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Seldaek/phar-utils.git",
+                "reference": "8800503d56b9867d43d9c303b9cbcc26016e82f0"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Seldaek/phar-utils/zipball/8800503d56b9867d43d9c303b9cbcc26016e82f0",
+                "reference": "8800503d56b9867d43d9c303b9cbcc26016e82f0",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Seld\\PharUtils\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jordi Boggiano",
+                    "email": "j.boggiano@seld.be"
+                }
+            ],
+            "description": "PHAR file format utilities, for when PHP phars you up",
+            "keywords": [
+                "phar"
+            ],
+            "time": "2020-02-14T15:25:33+00:00"
+        },
+        {
+            "name": "symfony/filesystem",
+            "version": "v5.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/filesystem.git",
+                "reference": "6e4320f06d5f2cce0d96530162491f4465179157"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/filesystem/zipball/6e4320f06d5f2cce0d96530162491f4465179157",
+                "reference": "6e4320f06d5f2cce0d96530162491f4465179157",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2.5",
+                "symfony/polyfill-ctype": "~1.8"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "5.1-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Filesystem\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony Filesystem Component",
+            "homepage": "https://symfony.com",
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-05-30T20:35:19+00:00"
+        },
+        {
+            "name": "theseer/tokenizer",
+            "version": "1.1.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/theseer/tokenizer.git",
+                "reference": "11336f6f84e16a720dae9d8e6ed5019efa85a0f9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/11336f6f84e16a720dae9d8e6ed5019efa85a0f9",
+                "reference": "11336f6f84e16a720dae9d8e6ed5019efa85a0f9",
+                "shasum": ""
+            },
+            "require": {
+                "ext-dom": "*",
+                "ext-tokenizer": "*",
+                "ext-xmlwriter": "*",
+                "php": "^7.0"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Arne Blankerts",
+                    "email": "arne@blankerts.de",
+                    "role": "Developer"
+                }
+            ],
+            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
+            "time": "2019-06-13T22:48:21+00:00"
+        },
+        {
+            "name": "webmozart/assert",
+            "version": "1.9.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/webmozart/assert.git",
+                "reference": "9dc4f203e36f2b486149058bade43c851dd97451"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/webmozart/assert/zipball/9dc4f203e36f2b486149058bade43c851dd97451",
+                "reference": "9dc4f203e36f2b486149058bade43c851dd97451",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^5.3.3 || ^7.0",
+                "symfony/polyfill-ctype": "^1.8"
+            },
+            "conflict": {
+                "phpstan/phpstan": "<0.12.20",
+                "vimeo/psalm": "<3.9.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8.36 || ^7.5.13"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Webmozart\\Assert\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Bernhard Schussek",
+                    "email": "bschussek@gmail.com"
+                }
+            ],
+            "description": "Assertions to validate method input/output with nice error messages.",
+            "keywords": [
+                "assert",
+                "check",
+                "validate"
+            ],
+            "time": "2020-06-16T10:16:42+00:00"
+        }
+    ],
+    "aliases": [],
+    "minimum-stability": "dev",
+    "stability-flags": [],
+    "prefer-stable": true,
+    "prefer-lowest": false,
+    "platform": {
+        "php": "^7.2"
+    },
+    "platform-dev": [],
+    "plugin-api-version": "1.1.0"
+}
Index: laravel58/config/queue.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/queue.php	(date 1592582522764)
+++ laravel58/config/queue.php	(date 1592582522764)
@@ -0,0 +1,87 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Queue Connection Name
+    |--------------------------------------------------------------------------
+    |
+    | Laravel's queue API supports an assortment of back-ends via a single
+    | API, giving you convenient access to each back-end using the same
+    | syntax for every one. Here you may define a default connection.
+    |
+    */
+
+    'default' => env('QUEUE_CONNECTION', 'sync'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Queue Connections
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure the connection information for each server that
+    | is used by your application. A default configuration has been added
+    | for each back-end shipped with Laravel. You are free to add more.
+    |
+    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
+    |
+    */
+
+    'connections' => [
+
+        'sync' => [
+            'driver' => 'sync',
+        ],
+
+        'database' => [
+            'driver' => 'database',
+            'table' => 'jobs',
+            'queue' => 'default',
+            'retry_after' => 90,
+        ],
+
+        'beanstalkd' => [
+            'driver' => 'beanstalkd',
+            'host' => 'localhost',
+            'queue' => 'default',
+            'retry_after' => 90,
+            'block_for' => 0,
+        ],
+
+        'sqs' => [
+            'driver' => 'sqs',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
+            'queue' => env('SQS_QUEUE', 'your-queue-name'),
+            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+        ],
+
+        'redis' => [
+            'driver' => 'redis',
+            'connection' => 'default',
+            'queue' => env('REDIS_QUEUE', 'default'),
+            'retry_after' => 90,
+            'block_for' => null,
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Failed Queue Jobs
+    |--------------------------------------------------------------------------
+    |
+    | These options configure the behavior of failed queue job logging so you
+    | can control which database and table are used to store the jobs that
+    | have failed. You may change them to any database / table you wish.
+    |
+    */
+
+    'failed' => [
+        'database' => env('DB_CONNECTION', 'mysql'),
+        'table' => 'failed_jobs',
+    ],
+
+];
Index: laravel58/config/services.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/services.php	(date 1592582522765)
+++ laravel58/config/services.php	(date 1592582522765)
@@ -0,0 +1,37 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Third Party Services
+    |--------------------------------------------------------------------------
+    |
+    | This file is for storing the credentials for third party services such
+    | as Mailgun, SparkPost and others. This file provides a sane default
+    | location for this type of information, allowing packages to have
+    | a conventional file to locate the various service credentials.
+    |
+    */
+
+    'mailgun' => [
+        'domain' => env('MAILGUN_DOMAIN'),
+        'secret' => env('MAILGUN_SECRET'),
+        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
+    ],
+
+    'postmark' => [
+        'token' => env('POSTMARK_TOKEN'),
+    ],
+
+    'ses' => [
+        'key' => env('AWS_ACCESS_KEY_ID'),
+        'secret' => env('AWS_SECRET_ACCESS_KEY'),
+        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+    ],
+
+    'sparkpost' => [
+        'secret' => env('SPARKPOST_SECRET'),
+    ],
+
+];
Index: laravel58/config/session.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/session.php	(date 1592582522765)
+++ laravel58/config/session.php	(date 1592582522765)
@@ -0,0 +1,199 @@
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Session Driver
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default session "driver" that will be used on
+    | requests. By default, we will use the lightweight native driver but
+    | you may specify any of the other wonderful drivers provided here.
+    |
+    | Supported: "file", "cookie", "database", "apc",
+    |            "memcached", "redis", "dynamodb", "array"
+    |
+    */
+
+    'driver' => env('SESSION_DRIVER', 'file'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Lifetime
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the number of minutes that you wish the session
+    | to be allowed to remain idle before it expires. If you want them
+    | to immediately expire on the browser closing, set that option.
+    |
+    */
+
+    'lifetime' => env('SESSION_LIFETIME', 120),
+
+    'expire_on_close' => false,
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Encryption
+    |--------------------------------------------------------------------------
+    |
+    | This option allows you to easily specify that all of your session data
+    | should be encrypted before it is stored. All encryption will be run
+    | automatically by Laravel and you can use the Session like normal.
+    |
+    */
+
+    'encrypt' => false,
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session File Location
+    |--------------------------------------------------------------------------
+    |
+    | When using the native session driver, we need a location where session
+    | files may be stored. A default has been set for you but a different
+    | location may be specified. This is only needed for file sessions.
+    |
+    */
+
+    'files' => storage_path('framework/sessions'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Database Connection
+    |--------------------------------------------------------------------------
+    |
+    | When using the "database" or "redis" session drivers, you may specify a
+    | connection that should be used to manage these sessions. This should
+    | correspond to a connection in your database configuration options.
+    |
+    */
+
+    'connection' => env('SESSION_CONNECTION', null),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Database Table
+    |--------------------------------------------------------------------------
+    |
+    | When using the "database" session driver, you may specify the table we
+    | should use to manage the sessions. Of course, a sensible default is
+    | provided for you; however, you are free to change this as needed.
+    |
+    */
+
+    'table' => 'sessions',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cache Store
+    |--------------------------------------------------------------------------
+    |
+    | When using the "apc", "memcached", or "dynamodb" session drivers you may
+    | list a cache store that should be used for these sessions. This value
+    | must match with one of the application's configured cache "stores".
+    |
+    */
+
+    'store' => env('SESSION_STORE', null),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Sweeping Lottery
+    |--------------------------------------------------------------------------
+    |
+    | Some session drivers must manually sweep their storage location to get
+    | rid of old sessions from storage. Here are the chances that it will
+    | happen on a given request. By default, the odds are 2 out of 100.
+    |
+    */
+
+    'lottery' => [2, 100],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Name
+    |--------------------------------------------------------------------------
+    |
+    | Here you may change the name of the cookie used to identify a session
+    | instance by ID. The name specified here will get used every time a
+    | new session cookie is created by the framework for every driver.
+    |
+    */
+
+    'cookie' => env(
+        'SESSION_COOKIE',
+        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
+    ),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Path
+    |--------------------------------------------------------------------------
+    |
+    | The session cookie path determines the path for which the cookie will
+    | be regarded as available. Typically, this will be the root path of
+    | your application but you are free to change this when necessary.
+    |
+    */
+
+    'path' => '/',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Domain
+    |--------------------------------------------------------------------------
+    |
+    | Here you may change the domain of the cookie used to identify a session
+    | in your application. This will determine which domains the cookie is
+    | available to in your application. A sensible default has been set.
+    |
+    */
+
+    'domain' => env('SESSION_DOMAIN', null),
+
+    /*
+    |--------------------------------------------------------------------------
+    | HTTPS Only Cookies
+    |--------------------------------------------------------------------------
+    |
+    | By setting this option to true, session cookies will only be sent back
+    | to the server if the browser has a HTTPS connection. This will keep
+    | the cookie from being sent to you if it can not be done securely.
+    |
+    */
+
+    'secure' => env('SESSION_SECURE_COOKIE', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | HTTP Access Only
+    |--------------------------------------------------------------------------
+    |
+    | Setting this value to true will prevent JavaScript from accessing the
+    | value of the cookie and the cookie will only be accessible through
+    | the HTTP protocol. You are free to modify this option if needed.
+    |
+    */
+
+    'http_only' => true,
+
+    /*
+    |--------------------------------------------------------------------------
+    | Same-Site Cookies
+    |--------------------------------------------------------------------------
+    |
+    | This option determines how your cookies behave when cross-site requests
+    | take place, and can be used to mitigate CSRF attacks. By default, we
+    | do not enable this as other CSRF protection services are in place.
+    |
+    | Supported: "lax", "strict"
+    |
+    */
+
+    'same_site' => null,
+
+];
Index: laravel58/webpack.mix.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/webpack.mix.js	(date 1592582522803)
+++ laravel58/webpack.mix.js	(date 1592582522803)
@@ -0,0 +1,15 @@
+const mix = require('laravel-mix');
+
+/*
+ |--------------------------------------------------------------------------
+ | Mix Asset Management
+ |--------------------------------------------------------------------------
+ |
+ | Mix provides a clean, fluent API for defining some Webpack build steps
+ | for your Laravel application. By default, we are compiling the Sass
+ | file for the application as well as bundling up all the JS files.
+ |
+ */
+
+mix.js('resources/js/app.js', 'public/js')
+    .sass('resources/sass/app.scss', 'public/css');
Index: laravel58/config/view.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/config/view.php	(date 1592582522766)
+++ laravel58/config/view.php	(date 1592582522766)
@@ -0,0 +1,36 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | View Storage Paths
+    |--------------------------------------------------------------------------
+    |
+    | Most templating systems load templates from disk. Here you may specify
+    | an array of paths that should be checked for your views. Of course
+    | the usual Laravel view path has already been registered for you.
+    |
+    */
+
+    'paths' => [
+        resource_path('views'),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Compiled View Path
+    |--------------------------------------------------------------------------
+    |
+    | This option determines where all the compiled Blade templates will be
+    | stored for your application. Typically, this is within the storage
+    | directory. However, as usual, you are free to change this value.
+    |
+    */
+
+    'compiled' => env(
+        'VIEW_COMPILED_PATH',
+        realpath(storage_path('framework/views'))
+    ),
+
+];
Index: laravel58/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/composer.json	(date 1599913387908)
+++ laravel58/composer.json	(date 1599913387908)
@@ -0,0 +1,71 @@
+{
+    "name": "laravel/laravel",
+    "type": "project",
+    "description": "The Laravel Framework.",
+    "keywords": [
+        "framework",
+        "laravel"
+    ],
+    "license": "MIT",
+    "require": {
+        "php": "^7.2",
+        "fideloper/proxy": "^4.0",
+        "intervention/image": "^2.5",
+        "laravel/framework": "^6.2",
+        "laravel/tinker": "^2.0"
+    },
+    "require-dev": {
+        "barryvdh/laravel-debugbar": "^3.3",
+        "barryvdh/laravel-ide-helper": "^2.7",
+        "beyondcode/laravel-dump-server": "^1.0",
+        "filp/whoops": "^2.0",
+        "facade/ignition": "^1.4",
+        "fzaninotto/faker": "^1.9.1",
+        "mockery/mockery": "^1.0",
+        "nunomaduro/collision": "^3.0",
+        "phpunit/phpunit": "^8.0"
+    },
+    "config": {
+        "optimize-autoloader": true,
+        "preferred-install": "dist",
+        "sort-packages": true
+    },
+    "extra": {
+        "laravel": {
+            "dont-discover": []
+        }
+    },
+    "autoload": {
+        "psr-4": {
+            "App\\": "app/"
+        },
+        "classmap": [
+            "database/seeds",
+            "database/factories"
+        ]
+    },
+    "autoload-dev": {
+        "psr-4": {
+            "Tests\\": "tests/"
+        }
+    },
+    "minimum-stability": "dev",
+    "prefer-stable": true,
+    "scripts": {
+        "post-autoload-dump": [
+            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
+            "@php artisan package:discover --ansi"
+        ],
+        "post-root-package-install": [
+            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
+        ],
+        "post-create-project-cmd": [
+            "@php artisan key:generate --ansi"
+        ],
+        "post-update-cmd": [
+            "Illuminate\\Foundation\\ComposerScripts::postUpdate",
+            "@php artisan ide-helper:generate",
+            "@php artisan ide-helper:meta"
+        ]
+    }
+}
Index: laravel58/storage/debugbar/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/storage/debugbar/.gitignore	(date 1592586122097)
+++ laravel58/storage/debugbar/.gitignore	(date 1592586122097)
@@ -0,0 +1,2 @@
+*
+!.gitignore
Index: laravel58/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.gitignore	(date 1592582522739)
+++ laravel58/.gitignore	(date 1592582522739)
@@ -0,0 +1,12 @@
+/node_modules
+/public/hot
+/public/storage
+/storage/*.key
+/vendor
+.env
+.env.backup
+.phpunit.result.cache
+Homestead.json
+Homestead.yaml
+npm-debug.log
+yarn-error.log
Index: laravel58/.env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.env.example	(date 1592582522738)
+++ laravel58/.env.example	(date 1592582522738)
@@ -0,0 +1,44 @@
+APP_NAME=Laravel
+APP_ENV=local
+APP_KEY=
+APP_DEBUG=true
+APP_URL=http://localhost
+
+LOG_CHANNEL=stack
+
+DB_CONNECTION=mysql
+DB_HOST=127.0.0.1
+DB_PORT=3306
+DB_DATABASE=laravel
+DB_USERNAME=root
+DB_PASSWORD=
+
+BROADCAST_DRIVER=log
+CACHE_DRIVER=file
+QUEUE_CONNECTION=sync
+SESSION_DRIVER=file
+SESSION_LIFETIME=120
+
+REDIS_HOST=127.0.0.1
+REDIS_PASSWORD=null
+REDIS_PORT=6379
+
+MAIL_DRIVER=smtp
+MAIL_HOST=smtp.mailtrap.io
+MAIL_PORT=2525
+MAIL_USERNAME=null
+MAIL_PASSWORD=null
+MAIL_ENCRYPTION=null
+
+AWS_ACCESS_KEY_ID=
+AWS_SECRET_ACCESS_KEY=
+AWS_DEFAULT_REGION=us-east-1
+AWS_BUCKET=
+
+PUSHER_APP_ID=
+PUSHER_APP_KEY=
+PUSHER_APP_SECRET=
+PUSHER_APP_CLUSTER=mt1
+
+MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
+MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
Index: laravel58/resources/js/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/js/app.js	(date 1592582522781)
+++ laravel58/resources/js/app.js	(date 1592582522781)
@@ -0,0 +1,32 @@
+/**
+ * First we will load all of this project's JavaScript dependencies which
+ * includes Vue and other libraries. It is a great starting point when
+ * building robust, powerful web applications using Vue and Laravel.
+ */
+
+require('./bootstrap');
+
+window.Vue = require('vue');
+
+/**
+ * The following block of code may be used to automatically register your
+ * Vue components. It will recursively scan this directory for the Vue
+ * components and automatically register them with their "basename".
+ *
+ * Eg. ./components/ExampleComponent.vue -> <example-component></example-component>
+ */
+
+// const files = require.context('./', true, /\.vue$/i);
+// files.keys().map(key => Vue.component(key.split('/').pop().split('.')[0], files(key).default));
+
+Vue.component('example-component', require('./components/ExampleComponent.vue').default);
+
+/**
+ * Next, we will create a fresh Vue application instance and attach it to
+ * the page. Then, you may begin adding components to this application
+ * or customize the JavaScript scaffolding to fit your unique needs.
+ */
+
+const app = new Vue({
+    el: '#app',
+});
Index: laravel58/resources/js/bootstrap.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/js/bootstrap.js	(date 1592582522782)
+++ laravel58/resources/js/bootstrap.js	(date 1592582522782)
@@ -0,0 +1,41 @@
+window._ = require('lodash');
+
+/**
+ * We'll load jQuery and the Bootstrap jQuery plugin which provides support
+ * for JavaScript based Bootstrap features such as modals and tabs. This
+ * code may be modified to fit the specific needs of your application.
+ */
+
+try {
+    window.Popper = require('popper.js').default;
+    window.$ = window.jQuery = require('jquery');
+
+    require('bootstrap');
+} catch (e) {}
+
+/**
+ * We'll load the axios HTTP library which allows us to easily issue requests
+ * to our Laravel back-end. This library automatically handles sending the
+ * CSRF token as a header based on the value of the "XSRF" token cookie.
+ */
+
+window.axios = require('axios');
+
+window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
+
+/**
+ * Echo exposes an expressive API for subscribing to channels and listening
+ * for events that are broadcast by Laravel. Echo and event broadcasting
+ * allows your team to easily build robust real-time web applications.
+ */
+
+// import Echo from 'laravel-echo';
+
+// window.Pusher = require('pusher-js');
+
+// window.Echo = new Echo({
+//     broadcaster: 'pusher',
+//     key: process.env.MIX_PUSHER_APP_KEY,
+//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
+//     encrypted: true
+// });
Index: laravel58/.styleci.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.styleci.yml	(date 1592582522739)
+++ laravel58/.styleci.yml	(date 1592582522739)
@@ -0,0 +1,13 @@
+php:
+  preset: laravel
+  disabled:
+    - unused_use
+  finder:
+    not-name:
+      - index.php
+      - server.php
+js:
+  finder:
+    not-name:
+      - webpack.mix.js
+css: true
Index: laravel58/server.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/server.php	(date 1592582522791)
+++ laravel58/server.php	(date 1592582522791)
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Laravel - A PHP Framework For Web Artisans
+ *
+ * @package  Laravel
+ * @author   Taylor Otwell <taylor@laravel.com>
+ */
+
+$uri = urldecode(
+    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)
+);
+
+// This file allows us to emulate Apache's "mod_rewrite" functionality from the
+// built-in PHP web server. This provides a convenient way to test a Laravel
+// application without having installed a "real" web server software here.
+if ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {
+    return false;
+}
+
+require_once __DIR__.'/public/index.php';
Index: laravel58/resources/sass/app.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/sass/app.scss	(date 1592582522787)
+++ laravel58/resources/sass/app.scss	(date 1592582522787)
@@ -0,0 +1,8 @@
+// Fonts
+@import url('https://fonts.googleapis.com/css?family=Nunito');
+
+// Variables
+@import 'variables';
+
+// Bootstrap
+@import '~bootstrap/scss/bootstrap';
Index: laravel58/.gitattributes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.gitattributes	(date 1592582522738)
+++ laravel58/.gitattributes	(date 1592582522738)
@@ -0,0 +1,5 @@
+* text=auto
+*.css linguist-vendored
+*.scss linguist-vendored
+*.js linguist-vendored
+CHANGELOG.md export-ignore
Index: laravel58/resources/sass/_variables.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/sass/_variables.scss	(date 1592582522787)
+++ laravel58/resources/sass/_variables.scss	(date 1592582522787)
@@ -0,0 +1,19 @@
+// Body
+$body-bg: #f8fafc;
+
+// Typography
+$font-family-sans-serif: 'Nunito', sans-serif;
+$font-size-base: 0.9rem;
+$line-height-base: 1.6;
+
+// Colors
+$blue: #3490dc;
+$indigo: #6574cd;
+$purple: #9561e2;
+$pink: #f66d9b;
+$red: #e3342f;
+$orange: #f6993f;
+$yellow: #ffed4a;
+$green: #38c172;
+$teal: #4dc0b5;
+$cyan: #6cb2eb;
Index: laravel58/resources/views/welcome.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/welcome.blade.php	(date 1591080725329)
+++ laravel58/resources/views/welcome.blade.php	(date 1591080725329)
@@ -0,0 +1,99 @@
+<!doctype html>
+<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
+    <head>
+        <meta charset="utf-8">
+        <meta name="viewport" content="width=device-width, initial-scale=1">
+
+        <title>Laravel</title>
+
+        <!-- Fonts -->
+        <link href="https://fonts.googleapis.com/css?family=Nunito:200,600" rel="stylesheet">
+
+        <!-- Styles -->
+        <style>
+            html, body {
+                background-color: #fff;
+                color: #636b6f;
+                font-family: 'Nunito', sans-serif;
+                font-weight: 200;
+                height: 100vh;
+                margin: 0;
+            }
+
+            .full-height {
+                height: 100vh;
+            }
+
+            .flex-center {
+                align-items: center;
+                display: flex;
+                justify-content: center;
+            }
+
+            .position-ref {
+                position: relative;
+            }
+
+            .top-right {
+                position: absolute;
+                right: 10px;
+                top: 18px;
+            }
+
+            .content {
+                text-align: center;
+            }
+
+            .title {
+                font-size: 84px;
+            }
+
+            .links > a {
+                color: #636b6f;
+                padding: 0 25px;
+                font-size: 13px;
+                font-weight: 600;
+                letter-spacing: .1rem;
+                text-decoration: none;
+                text-transform: uppercase;
+            }
+
+            .m-b-md {
+                margin-bottom: 30px;
+            }
+        </style>
+    </head>
+    <body>
+        <div class="flex-center position-ref full-height">
+            @if (Route::has('login'))
+                <div class="top-right links">
+                    @auth
+                        <a href="{{ url('/home') }}">Home</a>
+                    @else
+                        <a href="{{ route('login') }}">Login</a>
+
+                        @if (Route::has('register'))
+                            <a href="{{ route('register') }}">Register</a>
+                        @endif
+                    @endauth
+                </div>
+            @endif
+
+            <div class="content">
+                <div class="title m-b-md">
+                    Laravel
+                </div>
+
+                <div class="links">
+                    <a href="https://laravel.com/docs">Docs</a>
+                    <a href="https://laracasts.com">Laracasts</a>
+                    <a href="https://laravel-news.com">News</a>
+                    <a href="https://blog.laravel.com">Blog</a>
+                    <a href="https://nova.laravel.com">Nova</a>
+                    <a href="https://forge.laravel.com">Forge</a>
+                    <a href="https://github.com/laravel/laravel">GitHub</a>
+                </div>
+            </div>
+        </div>
+    </body>
+</html>
Index: laravel58/resources/js/components/ExampleComponent.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/js/components/ExampleComponent.vue	(date 1592582522783)
+++ laravel58/resources/js/components/ExampleComponent.vue	(date 1592582522783)
@@ -0,0 +1,23 @@
+<template>
+    <div class="container">
+        <div class="row justify-content-center">
+            <div class="col-md-8">
+                <div class="card">
+                    <div class="card-header">Example Component</div>
+
+                    <div class="card-body">
+                        I'm an example component.
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+</template>
+
+<script>
+    export default {
+        mounted() {
+            console.log('Component mounted.')
+        }
+    }
+</script>
Index: laravel58/resources/lang/en/auth.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/lang/en/auth.php	(date 1592582522784)
+++ laravel58/resources/lang/en/auth.php	(date 1592582522784)
@@ -0,0 +1,19 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Authentication Language Lines
+    |--------------------------------------------------------------------------
+    |
+    | The following language lines are used during authentication for various
+    | messages that we need to display to the user. You are free to modify
+    | these language lines according to your application's requirements.
+    |
+    */
+
+    'failed' => 'These credentials do not match our records.',
+    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',
+
+];
Index: laravel58/resources/lang/en/pagination.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/lang/en/pagination.php	(date 1592582522785)
+++ laravel58/resources/lang/en/pagination.php	(date 1592582522785)
@@ -0,0 +1,19 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Pagination Language Lines
+    |--------------------------------------------------------------------------
+    |
+    | The following language lines are used by the paginator library to build
+    | the simple pagination links. You are free to change them to anything
+    | you want to customize your views to better match your application.
+    |
+    */
+
+    'previous' => '&laquo; Previous',
+    'next' => 'Next &raquo;',
+
+];
Index: laravel58/resources/lang/en/passwords.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/lang/en/passwords.php	(date 1592582522785)
+++ laravel58/resources/lang/en/passwords.php	(date 1592582522785)
@@ -0,0 +1,22 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Password Reset Language Lines
+    |--------------------------------------------------------------------------
+    |
+    | The following language lines are the default lines which match reasons
+    | that are given by the password broker for a password update attempt
+    | has failed, such as for an invalid token or invalid new password.
+    |
+    */
+
+    'password' => 'Passwords must be at least eight characters and match the confirmation.',
+    'reset' => 'Your password has been reset!',
+    'sent' => 'We have e-mailed your password reset link!',
+    'token' => 'This password reset token is invalid.',
+    'user' => "We can't find a user with that e-mail address.",
+
+];
Index: laravel58/resources/lang/en/validation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/lang/en/validation.php	(date 1592582522786)
+++ laravel58/resources/lang/en/validation.php	(date 1592582522786)
@@ -0,0 +1,150 @@
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Validation Language Lines
+    |--------------------------------------------------------------------------
+    |
+    | The following language lines contain the default error messages used by
+    | the validator class. Some of these rules have multiple versions such
+    | as the size rules. Feel free to tweak each of these messages here.
+    |
+    */
+
+    'accepted' => 'The :attribute must be accepted.',
+    'active_url' => 'The :attribute is not a valid URL.',
+    'after' => 'The :attribute must be a date after :date.',
+    'after_or_equal' => 'The :attribute must be a date after or equal to :date.',
+    'alpha' => 'The :attribute may only contain letters.',
+    'alpha_dash' => 'The :attribute may only contain letters, numbers, dashes and underscores.',
+    'alpha_num' => 'The :attribute may only contain letters and numbers.',
+    'array' => 'The :attribute must be an array.',
+    'before' => 'The :attribute must be a date before :date.',
+    'before_or_equal' => 'The :attribute must be a date before or equal to :date.',
+    'between' => [
+        'numeric' => 'The :attribute must be between :min and :max.',
+        'file' => 'The :attribute must be between :min and :max kilobytes.',
+        'string' => 'The :attribute must be between :min and :max characters.',
+        'array' => 'The :attribute must have between :min and :max items.',
+    ],
+    'boolean' => 'The :attribute field must be true or false.',
+    'confirmed' => 'The :attribute confirmation does not match.',
+    'date' => 'The :attribute is not a valid date.',
+    'date_equals' => 'The :attribute must be a date equal to :date.',
+    'date_format' => 'The :attribute does not match the format :format.',
+    'different' => 'The :attribute and :other must be different.',
+    'digits' => 'The :attribute must be :digits digits.',
+    'digits_between' => 'The :attribute must be between :min and :max digits.',
+    'dimensions' => 'The :attribute has invalid image dimensions.',
+    'distinct' => 'The :attribute field has a duplicate value.',
+    'email' => 'The :attribute must be a valid email address.',
+    'ends_with' => 'The :attribute must end with one of the following: :values',
+    'exists' => 'The selected :attribute is invalid.',
+    'file' => 'The :attribute must be a file.',
+    'filled' => 'The :attribute field must have a value.',
+    'gt' => [
+        'numeric' => 'The :attribute must be greater than :value.',
+        'file' => 'The :attribute must be greater than :value kilobytes.',
+        'string' => 'The :attribute must be greater than :value characters.',
+        'array' => 'The :attribute must have more than :value items.',
+    ],
+    'gte' => [
+        'numeric' => 'The :attribute must be greater than or equal :value.',
+        'file' => 'The :attribute must be greater than or equal :value kilobytes.',
+        'string' => 'The :attribute must be greater than or equal :value characters.',
+        'array' => 'The :attribute must have :value items or more.',
+    ],
+    'image' => 'The :attribute must be an image.',
+    'in' => 'The selected :attribute is invalid.',
+    'in_array' => 'The :attribute field does not exist in :other.',
+    'integer' => 'The :attribute must be an integer.',
+    'ip' => 'The :attribute must be a valid IP address.',
+    'ipv4' => 'The :attribute must be a valid IPv4 address.',
+    'ipv6' => 'The :attribute must be a valid IPv6 address.',
+    'json' => 'The :attribute must be a valid JSON string.',
+    'lt' => [
+        'numeric' => 'The :attribute must be less than :value.',
+        'file' => 'The :attribute must be less than :value kilobytes.',
+        'string' => 'The :attribute must be less than :value characters.',
+        'array' => 'The :attribute must have less than :value items.',
+    ],
+    'lte' => [
+        'numeric' => 'The :attribute must be less than or equal :value.',
+        'file' => 'The :attribute must be less than or equal :value kilobytes.',
+        'string' => 'The :attribute must be less than or equal :value characters.',
+        'array' => 'The :attribute must not have more than :value items.',
+    ],
+    'max' => [
+        'numeric' => 'The :attribute may not be greater than :max.',
+        'file' => 'The :attribute may not be greater than :max kilobytes.',
+        'string' => 'The :attribute may not be greater than :max characters.',
+        'array' => 'The :attribute may not have more than :max items.',
+    ],
+    'mimes' => 'The :attribute must be a file of type: :values.',
+    'mimetypes' => 'The :attribute must be a file of type: :values.',
+    'min' => [
+        'numeric' => 'The :attribute must be at least :min.',
+        'file' => 'The :attribute must be at least :min kilobytes.',
+        'string' => 'The :attribute must be at least :min characters.',
+        'array' => 'The :attribute must have at least :min items.',
+    ],
+    'not_in' => 'The selected :attribute is invalid.',
+    'not_regex' => 'The :attribute format is invalid.',
+    'numeric' => 'The :attribute must be a number.',
+    'present' => 'The :attribute field must be present.',
+    'regex' => 'The :attribute format is invalid.',
+    'required' => 'The :attribute field is required.',
+    'required_if' => 'The :attribute field is required when :other is :value.',
+    'required_unless' => 'The :attribute field is required unless :other is in :values.',
+    'required_with' => 'The :attribute field is required when :values is present.',
+    'required_with_all' => 'The :attribute field is required when :values are present.',
+    'required_without' => 'The :attribute field is required when :values is not present.',
+    'required_without_all' => 'The :attribute field is required when none of :values are present.',
+    'same' => 'The :attribute and :other must match.',
+    'size' => [
+        'numeric' => 'The :attribute must be :size.',
+        'file' => 'The :attribute must be :size kilobytes.',
+        'string' => 'The :attribute must be :size characters.',
+        'array' => 'The :attribute must contain :size items.',
+    ],
+    'starts_with' => 'The :attribute must start with one of the following: :values',
+    'string' => 'The :attribute must be a string.',
+    'timezone' => 'The :attribute must be a valid zone.',
+    'unique' => 'The :attribute has already been taken.',
+    'uploaded' => 'The :attribute failed to upload.',
+    'url' => 'The :attribute format is invalid.',
+    'uuid' => 'The :attribute must be a valid UUID.',
+
+    /*
+    |--------------------------------------------------------------------------
+    | Custom Validation Language Lines
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify custom validation messages for attributes using the
+    | convention "attribute.rule" to name the lines. This makes it quick to
+    | specify a specific custom language line for a given attribute rule.
+    |
+    */
+
+    'custom' => [
+        'attribute-name' => [
+            'rule-name' => 'custom-message',
+        ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Custom Validation Attributes
+    |--------------------------------------------------------------------------
+    |
+    | The following language lines are used to swap our attribute placeholder
+    | with something more reader friendly such as "E-Mail Address" instead
+    | of "email". This simply helps us make our message more expressive.
+    |
+    */
+
+    'attributes' => [],
+
+];
Index: laravel58/database/seeds/UsersTableSeeder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/seeds/UsersTableSeeder.php	(date 1591186409608)
+++ laravel58/database/seeds/UsersTableSeeder.php	(date 1591186409608)
@@ -0,0 +1,32 @@
+<?php
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Str;
+use Illuminate\Support\Facades\DB;
+
+class UsersTableSeeder extends Seeder
+{
+    /**
+     * Run the database seeds.
+     *
+     * @return void
+     */
+    public function run()
+    {
+        //
+        $data = [
+            [
+                'name' => 'Автор неизвестен',
+                'email' => 'author_unknown@gmail.com',
+                'password' => bcrypt('secret'),
+            ],
+            [
+                'name' => 'Автор',
+                'email' => 'author@gmail.com',
+                'password' => bcrypt('123'),
+            ]
+        ];
+
+        DB::table('users')->insert($data);
+    }
+}
Index: laravel58/database/seeds/BlogCategoriesTableSeeder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/seeds/BlogCategoriesTableSeeder.php	(date 1592585862397)
+++ laravel58/database/seeds/BlogCategoriesTableSeeder.php	(date 1592585862397)
@@ -0,0 +1,40 @@
+<?php
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Str;
+
+class BlogCategoriesTableSeeder extends Seeder
+{
+    /**
+     * Run the database seeds.
+     *
+     * @return void
+     */
+    public function run()
+    {
+        //
+        $categories = [];
+
+        $cName = "Без категории";
+
+        $categories[] = [ 'title' => $cName,
+                        'slug' => Str::slug($cName),
+                        'parent_id'=> 0,
+                        ];
+
+        for($i = 2; $i <= 11; $i++){
+            $cName = 'Категория #'.$i;
+            $parentId = ($i > 4) ? rand(1, 4) : 1;
+
+            $categories[] = [
+                            'title' => $cName,
+                            'slug' => Str::slug($cName),
+                            'parent_id'=> $parentId,
+                            ];
+        }
+
+        DB::table('blog_categories')->insert($categories);
+
+    }
+}
Index: laravel58/database/migrations/2020_06_03_065051_create_blog_posts_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/migrations/2020_06_03_065051_create_blog_posts_table.php	(date 1592585497919)
+++ laravel58/database/migrations/2020_06_03_065051_create_blog_posts_table.php	(date 1592585497919)
@@ -0,0 +1,56 @@
+<?php
+
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Database\Migrations\Migration;
+
+class CreateBlogPostsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('blog_posts', function (Blueprint $table) {
+            $table->bigIncrements('id');
+
+            $table->bigInteger('category_id')->unsigned();
+            $table->bigInteger('user_id')->unsigned();
+
+            $table->string('slug')->unique();
+            $table->string('title');
+
+            $table->text('excerpt')->nullable();
+
+            $table->text('content_raw');
+            $table->text('content_html');
+
+            $table->boolean('is_published')->default( false);
+            $table->timestamp('published_at')->nullable();
+
+
+           // $table->text('description')->nullable();
+
+            $table->timestamps();
+            $table->softDeletes();
+
+            $table->foreign('user_id')->references('id')->on('users');
+            $table->foreign('category_id')->references('id')->on('blog_categories');
+
+            $table->index('is_published');
+
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('blog_posts');
+    }
+}
Index: laravel58/database/migrations/2020_06_03_065009_create_blog_categories_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/migrations/2020_06_03_065009_create_blog_categories_table.php	(date 1592821834533)
+++ laravel58/database/migrations/2020_06_03_065009_create_blog_categories_table.php	(date 1592821834533)
@@ -0,0 +1,40 @@
+<?php
+
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Database\Migrations\Migration;
+
+class CreateBlogCategoriesTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('blog_categories', function (Blueprint $table) {
+            $table->bigIncrements('id');
+            $table->bigInteger('parent_id')->unsigned()->default( 1);
+            $table->string('slug')->unique();
+            $table->string( 'title');
+            $table->text( 'description')->nullable();
+            $table->timestamps();
+            $table->softDeletes();
+
+            //$table->foreign('parent_id')->references('id')->on('blog_categories');
+        });
+
+
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('blog_categories');
+    }
+}
Index: laravel58/database/factories/BlogPostFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/database/factories/BlogPostFactory.php	(date 1592585862403)
+++ laravel58/database/factories/BlogPostFactory.php	(date 1592585862403)
@@ -0,0 +1,41 @@
+<?php
+
+use Illuminate\Support\Str;
+use Faker\Generator as Faker;
+
+/*
+|--------------------------------------------------------------------------
+| Model Factories
+|--------------------------------------------------------------------------
+|
+| This directory should contain each of the model factory definitions for
+| your application. Factories provide a convenient way to generate new
+| model instances for testing / seeding your application's database.
+|
+*/
+
+$factory->define(App\Models\BlogPost::class, function (Faker $faker) {
+
+    $title = $faker->sentence(rand(3, 8), true);
+    $txt = $faker->realText(rand(1000, 4000));
+    $isPublished = rand(1, 5) > 1;
+
+    $createdAt = $faker->dateTimeBetween('-3 months', ' -2 months' );
+
+    $data = [
+        'category_id'   => rand(1, 11),
+        'user_id'       => (rand(1, 5) == 5) ? 1 : 2,
+        'title'         => $title,
+        'slug'          => Str::slug($title),
+        'excerpt'       =>$faker->text(rand(40, 100)),
+        'content_raw'   => $txt,
+        'content_html'  => $txt,
+        'is_Published'  => $isPublished,
+        'published_at'  => $isPublished ? $faker->dateTimeBetween('-2 months', ' -2 days' ) : null,
+        'created_at'    => $createdAt,
+        'updated_at'    => $createdAt,
+
+    ];
+
+    return $data;
+});
Index: laravel58/app/Repositories/BlogCategoryRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Repositories/BlogCategoryRepository.php	(date 1592902724986)
+++ laravel58/app/Repositories/BlogCategoryRepository.php	(date 1592902724986)
@@ -0,0 +1,90 @@
+<?php
+
+namespace App\Repositories;
+
+use App\Models\BlogCategory as Model;
+use Illuminate\Contracts\Pagination\LengthAwarePaginator;
+use Illuminate\Contracts\Pagination\Paginator;
+use Illuminate\Database\Eloquent\Collection;
+//use Your Model
+
+/**
+ * Class BlogCategoryRepository.
+ */
+
+class BlogCategoryRepository extends CoreRepository
+{
+    /**
+     * @return string
+     *  Return the model
+     */
+    public function getModelClass()
+    {
+        return Model::class;
+    }
+
+    /**
+     * Get Model for edit in Admin
+     *
+     * @param int $id
+     * return Model
+     */
+
+    public function  getEdit($id){
+        return $this->startConditions()->find($id);
+
+    }
+
+    /**
+     * Get Categories List for display in dropdown
+     *
+     * return Collection
+     */
+    public function getForCombobox(){
+
+        $columns = implode(',', [
+            'id',
+            'CONCAT (id,". " , title) AS id_title',
+            ]);
+
+       /* $result[] = $this
+            ->startConditions()->all();
+
+        $result[] = $this
+            ->startConditions()
+            ->select(\DB::raw('CONCAT (id,". " , title) AS id_title'))
+            ->toBase()
+            ->get();*/
+
+        $result= $this
+            ->startConditions()
+            ->selectraw($columns)
+            ->toBase()
+            ->get();
+
+        return $result;
+    }
+
+    /**
+     * получить категории для вывода пагинатором.
+     * @param int|null $perPage
+     * @return LengthAwarePaginator
+     */
+    public function getAllWithPaginate($perPage = null){
+
+        $columns = ['id','title','parent_id'];
+
+        $result = $this
+            ->startConditions()
+            ->select($columns)
+            ->with([
+                'parentCategory:id,title',
+            ])
+            ->paginate($perPage);
+
+       // dd($result);
+
+        return $result;
+
+    }
+}
Index: laravel58/app/Repositories/BlogPostRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Repositories/BlogPostRepository.php	(date 1592639357479)
+++ laravel58/app/Repositories/BlogPostRepository.php	(date 1592639357479)
@@ -0,0 +1,68 @@
+<?php
+
+
+namespace App\Repositories;
+
+use App\Models\BlogPost as Model;
+use Illuminate\Contracts\Pagination\LengthAwarePaginator;
+
+/**
+ * Class BlogPostRepository.
+ *
+ * @package App\Repositories
+ */
+
+class BlogPostRepository extends CoreRepository
+{
+
+    /**
+     * @return string
+     *  Return the model
+     */
+    public function getModelClass()
+    {
+        return Model::class;
+    }
+
+    /**
+     * get posts for display by paginator.
+     * @param int|null $perPage
+     * @return LengthAwarePaginator
+     */
+    public function getAllWithPaginate($perPage = null){
+
+        $columns = [
+            'id',
+            'title',
+            'slug',
+            'is_published',
+            'published_at',
+            'user_id',
+            'category_id',
+            ];
+
+        $result = $this
+            ->startConditions()
+            ->select($columns)
+            ->orderBy('id', 'DESC')
+           // ->with(['category', 'user'])
+            ->with(['category' => function($query){$query->select(['id','title']);},'user:id,name',])
+            ->paginate($perPage);
+
+        // dd($result);
+
+        return $result;
+
+    }
+
+    /**
+     * get model for editing in admin panel.
+     * @param int $id
+     * @return Model
+     */
+
+    public function getEdit($id){
+        return $this->startConditions()->find($id);
+    }
+
+}
Index: laravel58/app/Repositories/CoreRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Repositories/CoreRepository.php	(date 1591887973588)
+++ laravel58/app/Repositories/CoreRepository.php	(date 1591887973588)
@@ -0,0 +1,48 @@
+<?php
+
+namespace App\Repositories;
+
+use Illuminate\Database\Eloquent\Model;
+
+/**
+ * Class CoreRepository
+ * @package App\Repositories
+ *
+ * Repository for making with entity,
+ * can produce datasets,
+ * Cant edit/create the entity
+ *
+ */
+
+abstract class CoreRepository
+{
+    /**
+     * @var Model
+     */
+
+    protected $model;
+
+    /**
+     *  CoreRepository constructor
+     */
+    public function __construct()
+    {
+        $this->model = app($this->getModelClass());
+    }
+
+    /**
+     *  @return mixed
+     */
+
+    abstract protected function getModelClass();
+
+    /**
+     *  @return Model|\Illuminate\Foundation\Application\mixed
+     */
+
+    protected function startConditions(){
+        return clone $this->model;
+    }
+
+
+}
Index: laravel58/app/Models/BlogCategory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Models/BlogCategory.php	(date 1592944403237)
+++ laravel58/app/Models/BlogCategory.php	(date 1592944403237)
@@ -0,0 +1,87 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Class BlogCategory
+ * @package App\Models
+ *
+ * @property-read BlogCategory $parentCategory
+ * @property-read string $parentTitle
+ */
+class BlogCategory extends Model
+{
+    use SoftDeletes;
+
+    /**
+     * Roots id
+     */
+    const ROOT = 1;
+
+    protected $fillable
+        = [
+        'title',
+        'slug',
+        'parent_id',
+        'description',
+        ];
+
+    /** Get parents category of category
+     *
+     * @return BlogCategory
+     */
+    public function parentCategory(){
+
+        $parentCat = $this->belongsTo(BlogCategory::class,'parent_id','id');
+
+        return $parentCat;
+
+    }
+
+    /**
+     * Accessory example (Accessor)
+     *
+     * @url https://laravel.com/docs/5.8/eloquent-mutators
+     * @return string
+     */
+    public function getParentTitleAttribute()
+    {
+
+        $title = $this->parentCategory->title
+           ?? ($this->isRoot()
+           ? 'Root'
+           : '???');
+
+       return $title;
+    }
+
+    /**
+     * whether the current object is root
+     *
+     * @return bool
+     */
+    public function isRoot(){
+        return $this->id === BlogCategory::ROOT;
+    }
+
+    /**
+     *   Accessors Exemple
+     * @param string $valueFormObject
+     * @return bool|false|string|string[]|null
+     *
+     */
+    public function getTitleAttribute($valueFormObject){
+        return mb_strtoupper($valueFormObject);
+    }
+
+    /**
+     * Mutators example
+     * @param string $incomingValue
+     */
+    public function setTitleAttribute($incomingValue){
+        $this->attributes['title'] = mb_strtolower($incomingValue);
+    }
+}
Index: laravel58/app/Models/BlogPost.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Models/BlogPost.php	(date 1592775202714)
+++ laravel58/app/Models/BlogPost.php	(date 1592775202714)
@@ -0,0 +1,59 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Relations\BelongsTo;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Class BlogPost
+ * @package App\Models
+ *
+ * @property BlogCategory   $category
+ *
+ * @property User           $user
+ * @property string         $title
+ * @property string         $slug
+ * @property string         content_html
+ * @property string         $content_raw
+ * @property string         $excerpt
+ * @property string         $published_at
+ * @property boolean        $is_published
+ */
+
+class BlogPost extends Model
+{
+    use SoftDeletes;
+    const UNKNOWN_USER = 1;
+
+    protected $fillable
+        = [
+            'title',
+            'slug',
+            'category_id',
+            'excerpt',
+            'content_raw',
+            'is_published',
+            'published_at',
+            'user_id',
+        ];
+
+    /** Категории статьи
+     *
+     * @return Illuminate\Database\Eloquent\Relations\BelongsTo
+    */
+    public  function category(){
+        //статьи принадлежат категории
+        return $this->belongsTo(BlogCategory::class);
+    }
+
+    /** Автор статьи
+     *
+     * @return Illuminate\Database\Eloquent\Relations\BelongsTo
+     */
+    public  function user(){
+        //статья принадлежат пользователю
+        return $this->belongsTo(User::class);
+    }
+}
Index: laravel58/app/Models/User.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Models/User.php	(date 1591170483202)
+++ laravel58/app/Models/User.php	(date 1591170483202)
@@ -0,0 +1,39 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Notifications\Notifiable;
+use Illuminate\Contracts\Auth\MustVerifyEmail;
+use Illuminate\Foundation\Auth\User as Authenticatable;
+
+class User extends Authenticatable
+{
+    use Notifiable;
+
+    /**
+     * The attributes that are mass assignable.
+     *
+     * @var array
+     */
+    protected $fillable = [
+        'name', 'email', 'password',
+    ];
+
+    /**
+     * The attributes that should be hidden for arrays.
+     *
+     * @var array
+     */
+    protected $hidden = [
+        'password', 'remember_token',
+    ];
+
+    /**
+     * The attributes that should be cast to native types.
+     *
+     * @var array
+     */
+    protected $casts = [
+        'email_verified_at' => 'datetime',
+    ];
+}
Index: laravel58/app/Http/Controllers/HomeController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/HomeController.php	(date 1592583223954)
+++ laravel58/app/Http/Controllers/HomeController.php	(date 1592583223954)
@@ -0,0 +1,28 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+
+class HomeController extends Controller
+{
+    /**
+     * Create a new controller instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        $this->middleware('auth');
+    }
+
+    /**
+     * Show the application dashboard.
+     *
+     * @return \Illuminate\Contracts\Support\Renderable
+     */
+    public function index()
+    {
+        return view('home');
+    }
+}
Index: laravel58/app/Http/Controllers/RestTestController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/RestTestController.php	(date 1591301210028)
+++ laravel58/app/Http/Controllers/RestTestController.php	(date 1591301210028)
@@ -0,0 +1,86 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+
+class RestTestController extends Controller
+{
+    /**
+     * Display a listing of the resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function index()
+    {
+        //
+        //dd(1);
+        return view('welcome');
+    }
+
+    /**
+     * Show the form for creating a new resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function create()
+    {
+        //
+    }
+
+    /**
+     * Store a newly created resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @return \Illuminate\Http\Response
+     */
+    public function store(Request $request)
+    {
+        //
+    }
+
+    /**
+     * Display the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function show($id)
+    {
+        //
+    }
+
+    /**
+     * Show the form for editing the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function edit($id)
+    {
+        //
+    }
+
+    /**
+     * Update the specified resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function update(Request $request, $id)
+    {
+        //
+    }
+
+    /**
+     * Remove the specified resource from storage.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function destroy($id)
+    {
+        //
+    }
+}
Index: laravel58/app/Http/Controllers/Blog/BaseController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Blog/BaseController.php	(date 1591345241674)
+++ laravel58/app/Http/Controllers/Blog/BaseController.php	(date 1591345241674)
@@ -0,0 +1,11 @@
+<?php
+
+namespace App\Http\Controllers\Blog;
+
+use Illuminate\Http\Request;
+use App\Http\Controllers\Controller;
+
+abstract class BaseController extends Controller
+{
+    //
+}
Index: laravel58/app/Http/Controllers/Blog/PostController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Blog/PostController.php	(date 1591360456621)
+++ laravel58/app/Http/Controllers/Blog/PostController.php	(date 1591360456621)
@@ -0,0 +1,90 @@
+<?php
+
+namespace App\Http\Controllers\Blog;
+
+use App\Models\BlogPost;
+use Illuminate\Http\Request;
+
+class PostController extends BaseController
+{
+    /**
+     * Display a listing of the resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function index()
+    {
+        //
+        $items = BlogPost::all();
+
+        //dd($items->first());
+
+        return view('blog.posts.index', compact('items'));
+    }
+
+    /**
+     * Show the form for creating a new resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function create()
+    {
+        //
+    }
+
+    /**
+     * Store a newly created resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @return \Illuminate\Http\Response
+     */
+    public function store(Request $request)
+    {
+        //
+    }
+
+    /**
+     * Display the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function show($id)
+    {
+        //
+    }
+
+    /**
+     * Show the form for editing the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function edit($id)
+    {
+        //
+    }
+
+    /**
+     * Update the specified resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function update(Request $request, $id)
+    {
+        //
+    }
+
+    /**
+     * Remove the specified resource from storage.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function destroy($id)
+    {
+        //
+    }
+}
Index: laravel58/app/Http/Controllers/Blog/Admin/BaseController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Blog/Admin/BaseController.php	(date 1592044774962)
+++ laravel58/app/Http/Controllers/Blog/Admin/BaseController.php	(date 1592044774962)
@@ -0,0 +1,14 @@
+<?php
+
+namespace App\Http\Controllers\Blog\Admin;
+
+use App\Http\Controllers\Blog\BaseController as GuestBaseController;
+
+abstract class BaseController extends GuestBaseController
+{
+    public function __construct()
+    {
+
+    }
+
+}
Index: laravel58/app/Http/Controllers/Blog/Admin/CategoryController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Blog/Admin/CategoryController.php	(date 1593338198510)
+++ laravel58/app/Http/Controllers/Blog/Admin/CategoryController.php	(date 1593338198510)
@@ -0,0 +1,151 @@
+<?php
+
+namespace App\Http\Controllers\Blog\Admin;
+
+use App\Http\Requests\BlogCategoryUpdateRequest;
+use App\Http\Requests\BlogCategoryCreateRequest;
+use App\Models\BlogCategory;
+use App\Repositories\BlogCategoryRepository;
+
+
+
+class CategoryController extends BaseController
+{
+    /**
+     * Display a listing of the resource.
+     *
+     */
+    /**
+     * @var BlogCategoryRepository
+     */
+    private $blogCategoryRepository;
+
+  public function __construct()
+  {
+      parent::__construct();
+
+      $this->blogCategoryRepository = app(BlogCategoryRepository::class);
+  }
+
+    public function index()
+    {
+
+        $paginator = $this->blogCategoryRepository->getAllWithPaginate(5);
+
+        return view('blog.admin.categories.index', compact('paginator'));
+
+    }
+
+    /**
+     * Show the form for creating a new resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function create()
+    {
+        $item = BlogCategory::make();
+        $categoryList = $this->blogCategoryRepository->getForCombobox();
+
+        return view('blog.admin.categories.edit', compact('item','categoryList'));
+    }
+
+    /**
+     * Store a newly created resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @return \Illuminate\Http\Response
+     */
+    public function store(BlogCategoryCreateRequest $request)
+    {
+        $data = $request->input();
+
+        /**
+         * go away to observer
+         */
+//        if(empty($data['slug'])){
+//            $data['slug'] = Str::slug($data['title']);
+//        }
+
+        //Создаст объект, но не добавит в бд
+             // $item = new BlogCategory($data);
+        // Сохранение в БД через модель
+            // $item->save();
+
+        //Создаст объект и добавит в бд
+
+        $item = BlogCategory::create($data);
+
+        if ($item){
+            return redirect()->route('blog.admin.categories.edit', [$item->id])
+                ->with(['success' => 'Успешно сохранено']);
+        }else{
+            return back()->withErrors(['msg' => 'Ошибка сохранения'])
+                ->withInput();
+        }
+
+    }
+
+    /**
+     * Show the form for editing the specified resource.
+     *
+     * @param  int  $id
+     * @param BlogCategoryRepository $categoryRepository
+     * @return \Illuminate\Http\Response
+     */
+    public function edit($id)
+    {
+        $item = $this->blogCategoryRepository->getEdit($id);
+
+        if (empty($item)){
+            abort(404);
+        }
+
+        $categoryList = $this->blogCategoryRepository->getForCombobox();
+
+       return view('blog.admin.categories.edit',
+           compact('item','categoryList'));
+    }
+
+    /**
+     * Update the specified resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function update(BlogCategoryUpdateRequest $request, $id)
+    {
+
+        $item = BlogCategory::find($id);
+        if (empty($item)){
+            return back()
+                ->withErrors(['msg' => "Запись с id=[{$id}] не найдена"])
+                ->withInput();
+        }
+
+        $data = $request->all();
+        /**
+         * go away to observer
+         */
+//        if(empty($data['slug'])){
+//            $data['slug'] = Str::slug($data['title']);
+//        }
+        /*
+        $result = $item
+            ->fill($data)
+            ->save();
+        */
+
+        $result = $item->update($data);
+
+        if ($result){
+            return redirect()
+                ->route('blog.admin.categories.edit', $item->id)
+                ->with(['success' => 'Успешно сохранено']);
+        }else{
+            return back()
+                ->withErrors(['msg' => "Ошибка сохранения"])
+                ->withInput();
+        }
+    }
+}
Index: laravel58/app/Http/Controllers/Blog/Admin/PostController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Controllers/Blog/Admin/PostController.php	(date 1593534067581)
+++ laravel58/app/Http/Controllers/Blog/Admin/PostController.php	(date 1593534067581)
@@ -0,0 +1,179 @@
+<?php
+
+namespace App\Http\Controllers\Blog\Admin;
+
+use App\Http\Requests\BlogCategoryUpdateRequest;
+use App\Http\Requests\BlogPostCreateRequest;
+use App\Http\Requests\BlogPostUpdateRequest;
+use App\Jobs\BlogPostAfterCreateJob;
+use App\Jobs\BlogPostAfterDeleteJob;
+use App\Models\BlogPost;
+use App\Repositories\BlogCategoryRepository;
+use App\Repositories\BlogPostRepository;
+use Carbon\Carbon;
+use foo\bar;
+use Illuminate\Http\Request;
+use Illuminate\Support\Str;
+
+class PostController extends BaseController
+{
+    /**
+     * Display a listing of the posts.
+     *
+     */
+    /**
+     * @var BlogPostRepository
+     */
+    private $blogPostRepository;
+
+    /**
+     * @var BlogCategoryRepository
+     */
+    private $blogCategoryRepository;
+
+    /**
+     *  PostController constructor
+     */
+    public function __construct()
+    {
+        parent::__construct();
+
+        $this->blogPostRepository = app(BlogPostRepository::class);
+        $this->blogCategoryRepository = app(BlogCategoryRepository::class);
+    }
+
+    public function index()
+    {
+        $paginator = $this->blogPostRepository->getAllWithPaginate(25);
+
+        return view('blog.admin.posts.index', compact('paginator'));
+    }
+
+    /**
+     * Show the form for creating a new resource.
+     *
+     * @return \Illuminate\Http\Response
+     */
+    public function create()
+    {
+        $item = new BlogPost();
+
+        $categoryList = $this->blogCategoryRepository->getForCombobox();
+
+        return view('blog.admin.posts.edit',
+            compact('item','categoryList'));
+    }
+
+    /**
+     * Store a newly created resource in storage.
+     *
+     * @param  BlogPostCreateRequest  $request
+     * @return \Illuminate\Http\Response
+     */
+    public function store(BlogPostCreateRequest $request)
+    {
+        $data = $request->input();
+
+        $item = (new BlogPost())->create($data);
+
+        if ($item){
+            $job = new BlogPostAfterCreateJob($item);
+            $this->dispatch($job);
+
+            return redirect()->route('blog.admin.posts.edit', [$item->id])
+                ->with(['success' => 'Успешно сохранено']);
+        }else{
+            return back()->withErrors(['msg' => 'Ошибка сохранения'])
+                ->withInput();
+        }
+
+    }
+
+    /**
+     * Display the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function show($id)
+    {
+        //
+    }
+
+    /**
+     * Show the form for editing the specified resource.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function edit($id)
+    {
+        $item = $this->blogPostRepository->getEdit($id);
+
+        if (empty($item)){
+            abort(404);
+        }
+
+        $categoryList = $this->blogCategoryRepository->getForCombobox();
+
+        return view('blog.admin.posts.edit',
+            compact('item','categoryList'));
+    }
+
+    /**
+     * Update the specified resource in storage.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function update(BlogPostUpdateRequest $request, $id)
+    {
+        $item = $this->blogPostRepository->getEdit($id);
+
+        if (empty($item)){
+            return back()
+                ->withErrors(['msg' => "Запись с id=[{$id}] не найдена"])
+                ->withInput();
+        }
+        $data = $request->all();
+
+        $result = $item->update($data);
+
+        if ($result){
+            return redirect()
+                ->route('blog.admin.posts.edit', $item->id)
+                ->with(['success' => 'Успешно сохранено']);
+        }else{
+            return back()
+                ->withErrors(['msg' => "Ошибка сохранения"])
+                ->withInput();
+        }
+    }
+
+    /**
+     * Remove the specified resource from storage.
+     *
+     * @param  int  $id
+     * @return \Illuminate\Http\Response
+     */
+    public function destroy($id)
+    {
+        //dd(__METHOD__, $id, request()->all());
+    // soft removal, the article remains in the database
+        $result = BlogPost::destroy($id);
+
+        // complete deletion  from database
+       // $result = BlogPost::find($id)->forceDelete();
+
+        if ($result){
+            BlogPostAfterDeleteJob::dispatch($id)->delay(20);
+
+            return redirect()
+                ->route('blog.admin.posts.index')
+                ->with(['success' => 'Article with id [$id] deteted successfully']);
+        }else{
+            return back()->withErrors(['msg' => 'Delete Error']);
+        }
+    }
+}
Index: laravel58/app/Http/Requests/BlogCategoryCreateRequest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Requests/BlogCategoryCreateRequest.php	(date 1591782752191)
+++ laravel58/app/Http/Requests/BlogCategoryCreateRequest.php	(date 1591782752191)
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Http\Requests;
+
+use Illuminate\Foundation\Http\FormRequest;
+
+class BlogCategoryCreateRequest extends FormRequest
+{
+    /**
+     * Determine if the user is authorized to make this request.
+     *
+     * @return bool
+     */
+    public function authorize()
+    {
+        return true;
+    }
+
+    /**
+     * Get the validation rules that apply to the request.
+     *
+     * @return array
+     */
+    public function rules()
+    {
+        return [
+            'title' => 'required|min:5|max:200',
+            'slug' => 'max:200',
+            'description' => 'string|min:3|max:500',
+            'parent_id' => 'required|integer|exists:blog_categories,id',
+        ];
+    }
+    public function messages()
+    {
+        return [
+            'title.required' => 'Заголовок обязательное поле',
+            'description.min'  => 'Описание должно минимум состоять из 3 символов',
+            'description.min'  => 'Описание должно максимум содержать 500 символов',
+        ];
+    }
+}
Index: laravel58/app/Http/Requests/BlogCategoryUpdateRequest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/app/Http/Requests/BlogCategoryUpdateRequest.php	(date 1591607326836)
+++ laravel58/app/Http/Requests/BlogCategoryUpdateRequest.php	(date 1591607326836)
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Http\Requests;
+
+use Illuminate\Foundation\Http\FormRequest;
+
+class BlogCategoryUpdateRequest extends FormRequest
+{
+    /**
+     * Determine if the user is authorized to make this request.
+     *
+     * @return bool
+     */
+    public function authorize()
+    {
+        return true;
+    }
+
+    /**
+     * Get the validation rules that apply to the request.
+     *
+     * @return array
+     */
+    public function rules()
+    {
+        return [
+            'title' => 'required|min:5|max:200',
+            'slug' => 'max:200',
+            'description' => 'string|min:3|max:500',
+            'parent_id' => 'required|integer|exists:blog_categories,id',
+        ];
+    }
+    public function messages()
+    {
+        return [
+            'title.required' => 'Заголовок обязательное поле',
+            'description.min'  => 'Описание должно минимум состоять из 3 символов',
+            'description.min'  => 'Описание должно максимум содержать 500 символов',
+        ];
+    }
+}
Index: laravel58/resources/views/home.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/home.blade.php	(date 1591375926823)
+++ laravel58/resources/views/home.blade.php	(date 1591375926823)
@@ -0,0 +1,23 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">Dashboard</div>
+
+                <div class="card-body">
+                    @if (session('status'))
+                        <div class="alert alert-success" role="alert">
+                            {{ session('status') }}
+                        </div>
+                    @endif
+
+                    You are logged in!
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/layouts/app.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/layouts/app.blade.php	(date 1591375926821)
+++ laravel58/resources/views/layouts/app.blade.php	(date 1591375926821)
@@ -0,0 +1,80 @@
+<!DOCTYPE html>
+<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+
+    <!-- CSRF Token -->
+    <meta name="csrf-token" content="{{ csrf_token() }}">
+
+    <title>{{ config('app.name', 'Laravel') }}</title>
+
+    <!-- Scripts -->
+    <script src="{{ asset('js/app.js') }}" defer></script>
+
+    <!-- Fonts -->
+    <link rel="dns-prefetch" href="//fonts.gstatic.com">
+    <link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet" type="text/css">
+
+    <!-- Styles -->
+    <link href="{{ asset('css/app.css') }}" rel="stylesheet">
+</head>
+<body>
+    <div id="app">
+        <nav class="navbar navbar-expand-md navbar-light navbar-laravel">
+            <div class="container">
+                <a class="navbar-brand" href="{{ url('/') }}">
+                    {{ config('app.name', 'Laravel') }}
+                </a>
+                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
+                    <span class="navbar-toggler-icon"></span>
+                </button>
+
+                <div class="collapse navbar-collapse" id="navbarSupportedContent">
+                    <!-- Left Side Of Navbar -->
+                    <ul class="navbar-nav mr-auto">
+
+                    </ul>
+
+                    <!-- Right Side Of Navbar -->
+                    <ul class="navbar-nav ml-auto">
+                        <!-- Authentication Links -->
+                        @guest
+                            <li class="nav-item">
+                                <a class="nav-link" href="{{ route('login') }}">{{ __('Login') }}</a>
+                            </li>
+                            @if (Route::has('register'))
+                                <li class="nav-item">
+                                    <a class="nav-link" href="{{ route('register') }}">{{ __('Register') }}</a>
+                                </li>
+                            @endif
+                        @else
+                            <li class="nav-item dropdown">
+                                <a id="navbarDropdown" class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-pre>
+                                    {{ Auth::user()->name }} <span class="caret"></span>
+                                </a>
+
+                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
+                                    <a class="dropdown-item" href="{{ route('logout') }}"
+                                       onclick="event.preventDefault();
+                                                     document.getElementById('logout-form').submit();">
+                                        {{ __('Logout') }}
+                                    </a>
+
+                                    <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
+                                        @csrf
+                                    </form>
+                                </div>
+                            </li>
+                        @endguest
+                    </ul>
+                </div>
+            </div>
+        </nav>
+
+        <main class="py-4">
+            @yield('content')
+        </main>
+    </div>
+</body>
+</html>
Index: laravel58/resources/views/auth/login.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/auth/login.blade.php	(date 1591375926814)
+++ laravel58/resources/views/auth/login.blade.php	(date 1591375926814)
@@ -0,0 +1,73 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">{{ __('Login') }}</div>
+
+                <div class="card-body">
+                    <form method="POST" action="{{ route('login') }}">
+                        @csrf
+
+                        <div class="form-group row">
+                            <label for="email" class="col-md-4 col-form-label text-md-right">{{ __('E-Mail Address') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="email" type="email" class="form-control{{ $errors->has('email') ? ' is-invalid' : '' }}" name="email" value="{{ old('email') }}" required autofocus>
+
+                                @if ($errors->has('email'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('email') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="password" class="col-md-4 col-form-label text-md-right">{{ __('Password') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="password" type="password" class="form-control{{ $errors->has('password') ? ' is-invalid' : '' }}" name="password" required>
+
+                                @if ($errors->has('password'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('password') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <div class="col-md-6 offset-md-4">
+                                <div class="form-check">
+                                    <input class="form-check-input" type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>
+
+                                    <label class="form-check-label" for="remember">
+                                        {{ __('Remember Me') }}
+                                    </label>
+                                </div>
+                            </div>
+                        </div>
+
+                        <div class="form-group row mb-0">
+                            <div class="col-md-8 offset-md-4">
+                                <button type="submit" class="btn btn-primary">
+                                    {{ __('Login') }}
+                                </button>
+
+                                @if (Route::has('password.request'))
+                                    <a class="btn btn-link" href="{{ route('password.request') }}">
+                                        {{ __('Forgot Your Password?') }}
+                                    </a>
+                                @endif
+                            </div>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/auth/register.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/auth/register.blade.php	(date 1591375926816)
+++ laravel58/resources/views/auth/register.blade.php	(date 1591375926816)
@@ -0,0 +1,77 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">{{ __('Register') }}</div>
+
+                <div class="card-body">
+                    <form method="POST" action="{{ route('register') }}">
+                        @csrf
+
+                        <div class="form-group row">
+                            <label for="name" class="col-md-4 col-form-label text-md-right">{{ __('Name') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="name" type="text" class="form-control{{ $errors->has('name') ? ' is-invalid' : '' }}" name="name" value="{{ old('name') }}" required autofocus>
+
+                                @if ($errors->has('name'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('name') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="email" class="col-md-4 col-form-label text-md-right">{{ __('E-Mail Address') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="email" type="email" class="form-control{{ $errors->has('email') ? ' is-invalid' : '' }}" name="email" value="{{ old('email') }}" required>
+
+                                @if ($errors->has('email'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('email') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="password" class="col-md-4 col-form-label text-md-right">{{ __('Password') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="password" type="password" class="form-control{{ $errors->has('password') ? ' is-invalid' : '' }}" name="password" required>
+
+                                @if ($errors->has('password'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('password') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="password-confirm" class="col-md-4 col-form-label text-md-right">{{ __('Confirm Password') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required>
+                            </div>
+                        </div>
+
+                        <div class="form-group row mb-0">
+                            <div class="col-md-6 offset-md-4">
+                                <button type="submit" class="btn btn-primary">
+                                    {{ __('Register') }}
+                                </button>
+                            </div>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/auth/verify.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/auth/verify.blade.php	(date 1591375926817)
+++ laravel58/resources/views/auth/verify.blade.php	(date 1591375926817)
@@ -0,0 +1,24 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">{{ __('Verify Your Email Address') }}</div>
+
+                <div class="card-body">
+                    @if (session('resent'))
+                        <div class="alert alert-success" role="alert">
+                            {{ __('A fresh verification link has been sent to your email address.') }}
+                        </div>
+                    @endif
+
+                    {{ __('Before proceeding, please check your email for a verification link.') }}
+                    {{ __('If you did not receive the email') }}, <a href="{{ route('verification.resend') }}">{{ __('click here to request another') }}</a>.
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/auth/passwords/email.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/auth/passwords/email.blade.php	(date 1591375926819)
+++ laravel58/resources/views/auth/passwords/email.blade.php	(date 1591375926819)
@@ -0,0 +1,47 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">{{ __('Reset Password') }}</div>
+
+                <div class="card-body">
+                    @if (session('status'))
+                        <div class="alert alert-success" role="alert">
+                            {{ session('status') }}
+                        </div>
+                    @endif
+
+                    <form method="POST" action="{{ route('password.email') }}">
+                        @csrf
+
+                        <div class="form-group row">
+                            <label for="email" class="col-md-4 col-form-label text-md-right">{{ __('E-Mail Address') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="email" type="email" class="form-control{{ $errors->has('email') ? ' is-invalid' : '' }}" name="email" value="{{ old('email') }}" required>
+
+                                @if ($errors->has('email'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('email') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row mb-0">
+                            <div class="col-md-6 offset-md-4">
+                                <button type="submit" class="btn btn-primary">
+                                    {{ __('Send Password Reset Link') }}
+                                </button>
+                            </div>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/auth/passwords/reset.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/auth/passwords/reset.blade.php	(date 1591375926820)
+++ laravel58/resources/views/auth/passwords/reset.blade.php	(date 1591375926820)
@@ -0,0 +1,65 @@
+@extends('layouts.app')
+
+@section('content')
+<div class="container">
+    <div class="row justify-content-center">
+        <div class="col-md-8">
+            <div class="card">
+                <div class="card-header">{{ __('Reset Password') }}</div>
+
+                <div class="card-body">
+                    <form method="POST" action="{{ route('password.update') }}">
+                        @csrf
+
+                        <input type="hidden" name="token" value="{{ $token }}">
+
+                        <div class="form-group row">
+                            <label for="email" class="col-md-4 col-form-label text-md-right">{{ __('E-Mail Address') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="email" type="email" class="form-control{{ $errors->has('email') ? ' is-invalid' : '' }}" name="email" value="{{ $email ?? old('email') }}" required autofocus>
+
+                                @if ($errors->has('email'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('email') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="password" class="col-md-4 col-form-label text-md-right">{{ __('Password') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="password" type="password" class="form-control{{ $errors->has('password') ? ' is-invalid' : '' }}" name="password" required>
+
+                                @if ($errors->has('password'))
+                                    <span class="invalid-feedback" role="alert">
+                                        <strong>{{ $errors->first('password') }}</strong>
+                                    </span>
+                                @endif
+                            </div>
+                        </div>
+
+                        <div class="form-group row">
+                            <label for="password-confirm" class="col-md-4 col-form-label text-md-right">{{ __('Confirm Password') }}</label>
+
+                            <div class="col-md-6">
+                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required>
+                            </div>
+                        </div>
+
+                        <div class="form-group row mb-0">
+                            <div class="col-md-6 offset-md-4">
+                                <button type="submit" class="btn btn-primary">
+                                    {{ __('Reset Password') }}
+                                </button>
+                            </div>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+@endsection
Index: laravel58/resources/views/blog/posts/index.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/posts/index.blade.php	(date 1591376547417)
+++ laravel58/resources/views/blog/posts/index.blade.php	(date 1591376547417)
@@ -0,0 +1,13 @@
+@extends('layouts.app')
+
+@section('content')
+<table>
+    @foreach($items as $item)
+        <tr>
+            <td>{{ $item->id }}</td>
+            <td>{{ $item->title }}</td>
+            <td>{{ $item->created_at }}</td>
+        </tr>
+    @endforeach
+</table>
+@endsection
Index: laravel58/resources/views/blog/admin/posts/index.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/admin/posts/index.blade.php	(date 1592984667241)
+++ laravel58/resources/views/blog/admin/posts/index.blade.php	(date 1592984667241)
@@ -0,0 +1,65 @@
+@extends('layouts.app')
+
+@section('content')
+    <div class="container">
+        @include('blog.admin.posts.includes.result_messages')
+        <div class="row justify-content-center">
+
+            <div class="col-md-12">
+                <nav class="navbar navbar-toggleable-mb navbar-light bg-faded">
+                    <a class="btn btn-primary" href="{{route('blog.admin.posts.create')}}">Написать</a>
+                </nav>
+                <div class="card">
+                    <div class="card-body">
+                        <table class="table table-hover">
+                            <thead>
+                            <tr>
+                                <td>Id</td>
+                                <td>Автор</td>
+                                <td>Категория</td>
+                                <td>Заголовок</td>
+                                <td>Дата публикации</td>
+                            </tr>
+                            </thead>
+                            <tbody>
+                            @foreach($paginator as $post)
+                                @php /** @var \App\Models\BlogPost $post   */ @endphp
+                                <tr @if(!$post->is_published) style="background-color: #ccc;" @endif>
+                                    <td>
+                                        {{ $post->id }}
+                                    </td>
+                                    <td>
+                                        {{ $post->user->name }}
+                                    </td>
+                                    <td>
+                                        {{ $post->category->title }}
+                                    </td>
+                                    <td>
+                                        <a href="{{ route('blog.admin.posts.edit', $post->id) }}">{{ $post->title }}</a>
+                                    </td>
+                                    <td>
+                                        {{ $post->published_at ? \Carbon\Carbon::parse($post->published_at)->format('d.M H:i') : "" }}
+                                    </td>
+                                </tr>
+
+                            @endforeach
+                            </tbody>
+                        </table>
+                    </div>
+                </div>
+            </div>
+
+        </div>
+        @if($paginator->total() > $paginator->count())
+            <div class="row justify-content-center">
+                <div class="col-md-12">
+                    <div class="card">
+                        <div class="card-body">
+                            {{ $paginator->links() }}
+                        </div>
+                    </div>
+                </div>
+            </div>
+        @endif
+    </div>
+@endsection
Index: laravel58/resources/views/blog/admin/categories/edit.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/admin/categories/edit.blade.php	(date 1591778690383)
+++ laravel58/resources/views/blog/admin/categories/edit.blade.php	(date 1591778690383)
@@ -0,0 +1,55 @@
+@extends('layouts.app')
+
+@section('content')
+    @php  /* @var \App\Models\BlogCategory $item  */ @endphp
+
+    @if($item->exists)
+        <form method="POST" action="{{route('blog.admin.categories.update', $item->id )}}">
+        @method('PATCH')
+    @else
+         <form method="POST" action="{{route('blog.admin.categories.store')}}">
+    @endif
+        @csrf
+        <div class="container">
+            @php /* @var \Illuminate\Support\ViewErrorBag $errors */ @endphp
+
+            @if($errors->any())
+                <div class="row justify-content-center">
+                    <div class="col-md-11">
+                        <div class="alert alert-danger" role="alert">
+                            <button type="button" class="close" data-dismiss="alert" area-label="close">
+                                <span aria-hidden="true">x</span>
+                            </button>
+                            {{ $errors->first() }}
+                        </div>
+                    </div>
+                </div>
+            @endif
+
+            @if(session('success'))
+                <div class="row justify-content-center">
+                    <div class="col-md-11">
+                        <div class="alert alert-success" role="alert">
+                            <button type="button" class="close" data-dismiss="alert" area-label="close">
+                                <span aria-hidden="true">x</span>
+                            </button>
+                            {{ session()->get('success') }}
+                        </div>
+                    </div>
+                </div>
+            @endif
+
+
+            <div class="row justify-content-center">
+                <div class="col-md-8">
+                    @include('blog.admin.categories.includes.item_edit_main_col')
+                </div>
+                <div class="col-md-3">
+                    @include('blog.admin.categories.includes.item_edit_add_col')
+                </div>
+            </div>
+        </div>
+    </form>
+
+
+@endsection
Index: laravel58/resources/views/blog/admin/categories/index.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/admin/categories/index.blade.php	(date 1592903491899)
+++ laravel58/resources/views/blog/admin/categories/index.blade.php	(date 1592903491899)
@@ -0,0 +1,67 @@
+@extends('layouts.app')
+
+@section('content')
+    <div class="container">
+        <div class="row justify-content-center">
+
+            <div class="col-md-12">
+                <nav class="navbar navbar-toggleable-mb navbar-light bg-faded">
+                    <a class="btn btn-primary" href="{{route('blog.admin.categories.create')}}">Добавить категорию</a>
+                </nav>
+                <div class="card">
+                    <div class="card-body">
+                        <table class="table table-hover">
+                            <thead>
+                                <tr>
+                                    <td>Id</td>
+                                    <td>Категория</td>
+                                    <td>Родитель</td>
+                                </tr>
+                            </thead>
+                            <tbody>
+                                @foreach($paginator as $item)
+                                    @php /** @var \App\Models\BlogCategory $item   */ @endphp
+                                    <tr>
+                                        <td>
+                                            {{ $item->id }}
+                                        </td>
+                                        <td>
+                                            <a href="{{ route('blog.admin.categories.edit', $item->id) }}">{{ $item->title }}</a>
+                                        </td>
+                                        <td @if(in_array($item->id, [0, 1])) style="color: #ccc;" @endif>
+{{--                                            {{ $item->parentCategory->title ?? '?'}}--}}
+
+
+                                            {{--{{ optional($item->parentCategory)->title }}--}}
+{{--{{ $item->parentCategory()->title--}}
+{{--           ?? ($item->id === \App\Models\BlogCategory::ROOT--}}
+{{--           ? 'Root'--}}
+{{--           : '???') }}--}}
+{{--                                            {{ $item->parent_title }}--}}
+
+                                            {{ $item->parentTitle }}
+
+                                        </td>
+                                    </tr>
+
+                                @endforeach
+                            </tbody>
+                        </table>
+                    </div>
+                </div>
+            </div>
+
+        </div>
+        @if($paginator->total() > $paginator->count())
+            <div class="row justify-content-center">
+                <div class="col-md-12">
+                    <div class="card">
+                        <div class="card-body">
+                            {{ $paginator->links() }}
+                        </div>
+                    </div>
+                </div>
+            </div>
+        @endif
+    </div>
+@endsection
Index: laravel58/resources/views/blog/admin/categories/includes/item_edit_add_col.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/admin/categories/includes/item_edit_add_col.blade.php	(date 1591535540696)
+++ laravel58/resources/views/blog/admin/categories/includes/item_edit_add_col.blade.php	(date 1591535540696)
@@ -0,0 +1,53 @@
+@php /* @var \App\Models\BlogCategory $item */@endphp
+<div class="row justify-content-center">
+    <div class="col-md-12">
+        <div class="card">
+            <div class="card-body">
+               <button type="submit" class="btn btn-primary">Сохранить</button>
+
+            </div>
+        </div>
+    </div>
+</div>
+@if($item->exists())
+<div class="row justify-content-center">
+    <div class="col-md-12">
+        <div class="card">
+            <div class="card-body">
+                <ul class="list-unstyled"><li>ID: {{ $item->id }}</li></ul>
+
+            </div>
+        </div>
+    </div>
+</div>
+<div class="row justify-content-center">
+    <div class="col-md-12">
+        <div class="card">
+            <div class="card-body">
+                <div class="form-group">
+                    <label for="created_at">Создано</label>
+                    <input type="text" value="{{ $item->created_at}}"
+                           class="form-control"
+                           disabled>
+
+                </div>
+                <div class="form-group">
+                    <label for="update_at">Изменено</label>
+                    <input type="text" value="{{ $item->updated_at}}"
+                           class="form-control"
+                           disabled>
+
+                </div>
+                <div class="form-group">
+                    <label for="deleted_at">Удалено</label>
+                    <input type="text" value="{{ $item->deleted_at}}"
+                           class="form-control"
+                           disabled>
+
+                </div>
+
+            </div>
+        </div>
+    </div>
+</div>
+@endif
Index: laravel58/resources/views/blog/admin/categories/includes/item_edit_main_col.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/resources/views/blog/admin/categories/includes/item_edit_main_col.blade.php	(date 1592820760486)
+++ laravel58/resources/views/blog/admin/categories/includes/item_edit_main_col.blade.php	(date 1592820760486)
@@ -0,0 +1,60 @@
+@php /* @var \App\Models\BlogCategory $item */@endphp
+<div class="row justify-content-center">
+    <div class="col-md-12">
+        <div class="card">
+            <div class="card-body">
+                <ul class="nav nav-tabs" role="tablist">
+                    <li class="nav-item">
+                        <a class="nav-link active" data-toggle="tab" href="#maindata" role="tab">Основные сведения</a>
+                    </li>
+                </ul>
+                <div class="tab-content">
+                    <div class="tab-pane active" id="maindata" role="tabpanel">
+                        <div class="form-group">
+                            <label for="title">Заголовок</label>
+                            <input type="text" value="{{ old('title', $item->title) }}"
+                                   class="form-control"
+                                   id="title"
+                                   name="title"
+                                   minlength="3"
+                                   required>
+
+                        </div>
+
+                        <div class="form-group">
+                            <label for="slug">Идентификатор</label>
+                            <input type="text" value="{{ $item->slug}}"
+                                   class="form-control"
+                                   id="slug"
+                                   name="slug">
+
+                        </div>
+                        <div class="form-group">
+                            <label for="parent_id">Выбор родителя</label>
+                            <select class="form-control"
+                                    id="parent_id"
+                                    name="parent_id"
+                                    placeholder="Выбрать категорию">
+                                @foreach($categoryList as $categoryOption)
+                                    <option value="{{ $categoryOption->id }}"
+                                    @if($categoryOption->id == $item->parent_id) selected @endif>{{ $categoryOption->id_title }}</option>
+                                @endforeach
+                            </select>
+
+                        </div>
+                        <div class="form-group">
+                            <label for="description">Описание</label>
+                            <textarea class="form-control"
+                                    id="description"
+                                    name="description"
+                                    rows="3">{{ old('description', $item->description) }}
+                            </textarea>
+
+                        </div>
+
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
Index: laravel58/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.idea/.gitignore	(date 1592579855864)
+++ laravel58/.idea/.gitignore	(date 1592579855864)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: laravel58/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.idea/modules.xml	(date 1592579855667)
+++ laravel58/.idea/modules.xml	(date 1592579855667)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/laravel58.iml" filepath="$PROJECT_DIR$/.idea/laravel58.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: laravel58/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.idea/vcs.xml	(date 1592583637981)
+++ laravel58/.idea/vcs.xml	(date 1592583637981)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: laravel58/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.idea/misc.xml	(date 1592579855647)
+++ laravel58/.idea/misc.xml	(date 1592579855647)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaScriptSettings">
+    <option name="languageLevel" value="ES6" />
+  </component>
+</project>
\ No newline at end of file
Index: laravel58/.idea/laravel58.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- laravel58/.idea/laravel58.iml	(date 1599913469215)
+++ laravel58/.idea/laravel58.iml	(date 1599913469215)
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/tests" isTestSource="true" packagePrefix="Tests\" />
+      <sourceFolder url="file://$MODULE_DIR$/spec" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/app" isTestSource="false" packagePrefix="App\" />
+      <sourceFolder url="file://$MODULE_DIR$/tests/Unit" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/tests/Feature" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/barryvdh/laravel-debugbar" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/barryvdh/laravel-ide-helper" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/barryvdh/reflection-docblock" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/beyondcode/laravel-dump-server" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/composer" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/dnoegel/php-xdg-base-dir" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/cache" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/dbal" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/event-manager" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/inflector" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/instantiator" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/doctrine/lexer" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/dragonmantank/cron-expression" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/egulias/email-validator" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/facade/flare-client-php" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/facade/ignition" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/facade/ignition-contracts" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/fideloper/proxy" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/filp/whoops" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/fzaninotto/faker" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/guzzlehttp/psr7" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/hamcrest/hamcrest-php" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/intervention/image" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/jakub-onderka/php-console-color" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/jakub-onderka/php-console-highlighter" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/justinrainbow/json-schema" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/laravel/framework" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/laravel/tinker" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/league/commonmark" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/league/flysystem" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/maximebf/debugbar" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/mockery/mockery" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/monolog/monolog" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/myclabs/deep-copy" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/nesbot/carbon" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/nikic/php-parser" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/nunomaduro/collision" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/opis/closure" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/paragonie/random_compat" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phar-io/manifest" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phar-io/version" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpdocumentor/reflection-common" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpdocumentor/reflection-docblock" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpdocumentor/type-resolver" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpoption/phpoption" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpspec/prophecy" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/php-code-coverage" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/php-file-iterator" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/php-text-template" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/php-timer" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/php-token-stream" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/phpunit/phpunit" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/psr/container" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/psr/http-message" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/psr/log" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/psr/simple-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/psy/psysh" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/ralouphie/getallheaders" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/ramsey/uuid" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/scrivo/highlight.php" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/code-unit-reverse-lookup" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/comparator" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/diff" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/environment" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/exporter" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/global-state" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/object-enumerator" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/object-reflector" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/recursion-context" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/resource-operations" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/type" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/sebastian/version" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/seld/jsonlint" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/seld/phar-utils" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/swiftmailer/swiftmailer" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/console" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/css-selector" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/debug" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/error-handler" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/event-dispatcher" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/event-dispatcher-contracts" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/filesystem" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/finder" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/http-foundation" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/http-kernel" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/mime" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-ctype" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-iconv" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-intl-idn" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-mbstring" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-php72" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-php73" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/polyfill-php80" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/process" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/routing" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/service-contracts" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/translation" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/translation-contracts" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/var-dumper" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/theseer/tokenizer" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/tijsverkoyen/css-to-inline-styles" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/vlucas/phpdotenv" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/webmozart/assert" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git laravel58/public/favicon.ico laravel58/public/favicon.ico
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git laravel58/composer.phar laravel58/composer.phar
new file mode 100644
index 0000000000000000000000000000000000000000..4cb50a573b30adad18186c1fdafb77d72f731970
GIT binary patch
literal 1976232
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%0Dt{
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%0D!3i8(<doa$4irxJiDR?@KIHgvY?-m*N^+Z
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

